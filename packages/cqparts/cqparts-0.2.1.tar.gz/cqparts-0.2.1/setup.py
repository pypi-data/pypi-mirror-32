#!/usr/bin/env python

import setuptools

setup_kwargs = { 'author': 'Peter Boin',
  'author_email': 'peter.boin+cqparts@gmail.com',
  'classifiers': [ 'Intended Audience :: Developers',
                   'Intended Audience :: Manufacturing',
                   'Intended Audience :: End Users/Desktop',
                   'Intended Audience :: Science/Research',
                   'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
                   'Natural Language :: English',
                   'Operating System :: MacOS',
                   'Operating System :: POSIX',
                   'Operating System :: Unix',
                   'Programming Language :: Python',
                   'Programming Language :: Python :: 2',
                   'Programming Language :: Python :: 3',
                   'Topic :: Scientific/Engineering',
                   'Topic :: Multimedia :: Graphics :: 3D Modeling',
                   'Topic :: Multimedia :: Graphics :: 3D Rendering',
                   'Development Status :: 3 - Alpha'],
  'description': 'Hierarchical and deeply parametric models using cadquery',
  'install_requires': [ 'cadquery',
                        'six',
                        'numpy',
                        'Jinja2',
                        'tinydb',
                        'requests'],
  'keywords': ['cadquery', 'cad', '3d', 'modeling'],
  'license': 'GPLv3',
  'long_description': u'\n.. image:: https://fragmuffin.github.io/cqparts/media/logo/dark.svg\n    :align: center\n\n=====================\nWhat is `cqparts`?\n=====================\n\n``cqparts`` is CAD for Python programmers, short for "``cadquery`` parts".\n\nUsing ``cqparts`` you can wrap geometry made with ``cadquery`` to build complex\nand deeply parametric models.\n\nFull documentation at: https://fragmuffin.github.io/cqparts\n\n\nInstalling\n------------------\n\nPre-requisites\n^^^^^^^^^^^^^^^^^^\n\nYou\'ll need to fulfill the requirements of ``cadquery``, the simplest way to do\nthat is to install ``cadquery`` first by following the instructions here:\n\nhttp://dcowden.github.io/cadquery/installation.html\n\nPyPI\n^^^^^^^^^\n\nOnce ``cadquery`` is installed, install ``cqparts`` with::\n\n    pip install cqparts\n\n\n``cqparts_*`` Content Libraries\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can also install content libraries with a similar ``pip install`` command.\n\nList available libraries with::\n\n    pip search cqparts_\n\nFor example, to install the ``cqparts_bearings`` content library, run::\n\n    pip install cqparts_bearings\n\n\nExample Usage\n-------------------\n\nHere is just one of the simplest examples to give you an idea of what this\nlibrary does.\n\nMore detailed examples found in\n`the official documentation for cqparts <https://fragmuffin.github.io/cqparts/doc>`_.\n\nWrapping a Cube\n^^^^^^^^^^^^^^^^^^\n\n.. image:: https://fragmuffin.github.io/cqparts/media/img/unit-cube.png\n\nA simple cube defined with ``cadquery`` alone::\n\n    # create unit cube solid\n    import cadquery\n    size = 10\n    cube = cadquery.Workplane(\'XY\').box(size, size, size)\n\n    # display cube (optional)\n    from Helpers import show\n    show(cube)\n\nWrapping this in a ``cqparts.Part`` object can be done like this::\n\n    # create unit cube as cqparts.Part\n    import cadquery\n    import cqparts\n    from cqparts.params import PositiveFloat\n\n    class MyCube(cqparts.Part):\n        size = PositiveFloat(1, doc="cube size")\n        def make(self):\n            return cadquery.Workplane(\'XY\').box(self.size, self.size, self.size)\n\n    # create cube instance\n    cube = MyCube(size=10)\n\n    # display cube (optional)\n    from cqparts.display import display\n    display(cube)\n\nYou can see that under the bonnet (in the ``make`` function) the geometry is\ncreated with ``cadquery``, but the resulting ``MyCube`` class is instantiated\nmore intuitively, and more object orientated.\n\n\nCreating a Hierarchy\n^^^^^^^^^^^^^^^^^^^^^^\n\n``cqparts`` can also be used to create a deep hierarchy of *parts* and\n*assemblies* to build something deeply complicated and entirely parametric.\n\nA simple example of this is the\n`toy car tutorial <https://fragmuffin.github.io/cqparts/doc/tutorials/assembly.html>`_.\n\n.. image:: https://fragmuffin.github.io/cqparts/media/img/toy-car.png\n\n\n``cqparts`` Capabilities\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe work done in ``cqparts_fasteners`` is a good example of how useful\n``cqparts`` wrapping can be; read about the ``Fastener`` class, how it works,\nand what can be done with it in the\n`cqparts_fasteners docs <https://fragmuffin.github.io/cqparts/doc/cqparts_fasteners/index.html>`_\n\n.. image:: https://fragmuffin.github.io/cqparts/media/img/nut-bolt-fastener.png\n\n\nContributing\n-----------------\n\nIssues, and Pull Requests are encouraged, and happily received, please read\n`CONTRIBUTING.md <https://github.com/fragmuffin/cqparts/blob/master/CONTRIBUTING.md>`_\nfor guidance on how to contribute.\n',
  'maintainer': 'Peter Boin',
  'maintainer_email': 'peter.boin+cqparts@gmail.com',
  'name': 'cqparts',
  'package_data': { '': [ 'LICENSE',
                          'display/web-template/*',
                          'display/web-template/static/*',
                          'display/web-template/static/js/*',
                          'display/web-template/model/*']},
  'packages': [ 'cqparts',
                'cqparts.constraint',
                'cqparts.catalogue',
                'cqparts.params',
                'cqparts.codec',
                'cqparts.display',
                'cqparts.utils'],
  'scripts': [],
  'url': 'https://github.com/fragmuffin/cqparts',
  'version': '0.2.1',
  'zip_safe': False}

setuptools.setup(**setup_kwargs)