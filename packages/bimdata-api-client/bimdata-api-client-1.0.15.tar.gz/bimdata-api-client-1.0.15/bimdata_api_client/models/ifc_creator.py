# coding: utf-8

"""
    BIMData API

    BIMData API documentation  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@bimdata.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IfcCreator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'email': 'str',
        'enabled': 'bool',
        'salt': 'str',
        'password': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'company': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'confirmation_token': 'str',
        'password_requested_at': 'datetime',
        'invitation_token': 'str',
        'created': 'bool',
        'user': 'int'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'enabled': 'enabled',
        'salt': 'salt',
        'password': 'password',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'company': 'company',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'confirmation_token': 'confirmation_token',
        'password_requested_at': 'password_requested_at',
        'invitation_token': 'invitation_token',
        'created': 'created',
        'user': 'user'
    }

    def __init__(self, id=None, email=None, enabled=None, salt=None, password=None, firstname=None, lastname=None, company=None, created_at=None, updated_at=None, confirmation_token=None, password_requested_at=None, invitation_token=None, created=None, user=None):  # noqa: E501
        """IfcCreator - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._email = None
        self._enabled = None
        self._salt = None
        self._password = None
        self._firstname = None
        self._lastname = None
        self._company = None
        self._created_at = None
        self._updated_at = None
        self._confirmation_token = None
        self._password_requested_at = None
        self._invitation_token = None
        self._created = None
        self._user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.email = email
        if enabled is not None:
            self.enabled = enabled
        if salt is not None:
            self.salt = salt
        if password is not None:
            self.password = password
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if company is not None:
            self.company = company
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if confirmation_token is not None:
            self.confirmation_token = confirmation_token
        if password_requested_at is not None:
            self.password_requested_at = password_requested_at
        if invitation_token is not None:
            self.invitation_token = invitation_token
        if created is not None:
            self.created = created
        if user is not None:
            self.user = user

    @property
    def id(self):
        """Gets the id of this IfcCreator.  # noqa: E501


        :return: The id of this IfcCreator.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IfcCreator.


        :param id: The id of this IfcCreator.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this IfcCreator.  # noqa: E501


        :return: The email of this IfcCreator.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this IfcCreator.


        :param email: The email of this IfcCreator.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")  # noqa: E501
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def enabled(self):
        """Gets the enabled of this IfcCreator.  # noqa: E501


        :return: The enabled of this IfcCreator.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IfcCreator.


        :param enabled: The enabled of this IfcCreator.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def salt(self):
        """Gets the salt of this IfcCreator.  # noqa: E501


        :return: The salt of this IfcCreator.  # noqa: E501
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this IfcCreator.


        :param salt: The salt of this IfcCreator.  # noqa: E501
        :type: str
        """
        if salt is not None and len(salt) > 255:
            raise ValueError("Invalid value for `salt`, length must be less than or equal to `255`")  # noqa: E501

        self._salt = salt

    @property
    def password(self):
        """Gets the password of this IfcCreator.  # noqa: E501


        :return: The password of this IfcCreator.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this IfcCreator.


        :param password: The password of this IfcCreator.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 255:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `255`")  # noqa: E501

        self._password = password

    @property
    def firstname(self):
        """Gets the firstname of this IfcCreator.  # noqa: E501


        :return: The firstname of this IfcCreator.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this IfcCreator.


        :param firstname: The firstname of this IfcCreator.  # noqa: E501
        :type: str
        """
        if firstname is not None and len(firstname) > 255:
            raise ValueError("Invalid value for `firstname`, length must be less than or equal to `255`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this IfcCreator.  # noqa: E501


        :return: The lastname of this IfcCreator.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this IfcCreator.


        :param lastname: The lastname of this IfcCreator.  # noqa: E501
        :type: str
        """
        if lastname is not None and len(lastname) > 255:
            raise ValueError("Invalid value for `lastname`, length must be less than or equal to `255`")  # noqa: E501

        self._lastname = lastname

    @property
    def company(self):
        """Gets the company of this IfcCreator.  # noqa: E501


        :return: The company of this IfcCreator.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this IfcCreator.


        :param company: The company of this IfcCreator.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def created_at(self):
        """Gets the created_at of this IfcCreator.  # noqa: E501


        :return: The created_at of this IfcCreator.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IfcCreator.


        :param created_at: The created_at of this IfcCreator.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this IfcCreator.  # noqa: E501


        :return: The updated_at of this IfcCreator.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IfcCreator.


        :param updated_at: The updated_at of this IfcCreator.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def confirmation_token(self):
        """Gets the confirmation_token of this IfcCreator.  # noqa: E501


        :return: The confirmation_token of this IfcCreator.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_token

    @confirmation_token.setter
    def confirmation_token(self, confirmation_token):
        """Sets the confirmation_token of this IfcCreator.


        :param confirmation_token: The confirmation_token of this IfcCreator.  # noqa: E501
        :type: str
        """
        if confirmation_token is not None and len(confirmation_token) > 48:
            raise ValueError("Invalid value for `confirmation_token`, length must be less than or equal to `48`")  # noqa: E501

        self._confirmation_token = confirmation_token

    @property
    def password_requested_at(self):
        """Gets the password_requested_at of this IfcCreator.  # noqa: E501


        :return: The password_requested_at of this IfcCreator.  # noqa: E501
        :rtype: datetime
        """
        return self._password_requested_at

    @password_requested_at.setter
    def password_requested_at(self, password_requested_at):
        """Sets the password_requested_at of this IfcCreator.


        :param password_requested_at: The password_requested_at of this IfcCreator.  # noqa: E501
        :type: datetime
        """

        self._password_requested_at = password_requested_at

    @property
    def invitation_token(self):
        """Gets the invitation_token of this IfcCreator.  # noqa: E501


        :return: The invitation_token of this IfcCreator.  # noqa: E501
        :rtype: str
        """
        return self._invitation_token

    @invitation_token.setter
    def invitation_token(self, invitation_token):
        """Sets the invitation_token of this IfcCreator.


        :param invitation_token: The invitation_token of this IfcCreator.  # noqa: E501
        :type: str
        """
        if invitation_token is not None and len(invitation_token) > 48:
            raise ValueError("Invalid value for `invitation_token`, length must be less than or equal to `48`")  # noqa: E501

        self._invitation_token = invitation_token

    @property
    def created(self):
        """Gets the created of this IfcCreator.  # noqa: E501


        :return: The created of this IfcCreator.  # noqa: E501
        :rtype: bool
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this IfcCreator.


        :param created: The created of this IfcCreator.  # noqa: E501
        :type: bool
        """

        self._created = created

    @property
    def user(self):
        """Gets the user of this IfcCreator.  # noqa: E501


        :return: The user of this IfcCreator.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this IfcCreator.


        :param user: The user of this IfcCreator.  # noqa: E501
        :type: int
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IfcCreator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
