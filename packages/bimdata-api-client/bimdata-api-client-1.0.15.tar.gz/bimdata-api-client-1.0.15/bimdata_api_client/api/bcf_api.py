# coding: utf-8

"""
    BIMData API

    BIMData API documentation  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@bimdata.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bimdata_api_client.api_client import ApiClient


class BcfApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bcf2_1_current_user_list(self, **kwargs):  # noqa: E501
        """bcf2_1_current_user_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_current_user_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[SelfUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_current_user_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_current_user_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def bcf2_1_current_user_list_with_http_info(self, **kwargs):  # noqa: E501
        """bcf2_1_current_user_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_current_user_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[SelfUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_current_user_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/current-user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SelfUser]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_delete(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_delete(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_delete_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_delete_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_delete_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_delete_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_events_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_delete`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_comments_events_delete_0(self, comments_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_delete_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_delete_0(comments_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_comments_events_delete_0_with_http_info(comments_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_comments_events_delete_0_with_http_info(comments_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_comments_events_delete_0_with_http_info(self, comments_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_comments_events_delete_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_comments_events_delete_0_with_http_info(comments_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comments_pk', 'id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_comments_events_delete_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `bcf2_1_projects_topics_comments_events_delete_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_comments_events_delete_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_comments_events_delete_0`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_comments_events_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_events_delete(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_delete(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_events_delete_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_events_delete_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_events_delete_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_events_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_events_delete_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_events_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_events_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_events_delete`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_events_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_bitmap_delete(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_delete(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_bitmap_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_bitmap_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_bitmap_delete_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_bitmap_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_bitmap_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_bitmap_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_bitmap_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_delete`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_bitmap_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_coloring_delete(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_delete(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_coloring_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_coloring_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_coloring_delete_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_coloring_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_coloring_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_coloring_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_coloring_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_delete`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_coloring_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_delete(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_delete(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_delete_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_delete_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_delete_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_delete_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_delete`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_selection_delete(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_delete(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_selection_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_selection_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_selection_delete_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_selection_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_selection_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_selection_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_selection_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_delete`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_selection_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf2_1_projects_topics_viewpoints_visibility_delete(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_delete(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf2_1_projects_topics_viewpoints_visibility_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf2_1_projects_topics_viewpoints_visibility_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def bcf2_1_projects_topics_viewpoints_visibility_delete_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """bcf2_1_projects_topics_viewpoints_visibility_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf2_1_projects_topics_viewpoints_visibility_delete_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf2_1_projects_topics_viewpoints_visibility_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf2_1_projects_topics_viewpoints_visibility_delete`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_delete`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `bcf2_1_projects_topics_viewpoints_visibility_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bcf_versions_delete(self, id, **kwargs):  # noqa: E501
        """bcf_versions_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bcf_versions_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bcf_versions_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bcf_versions_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """bcf_versions_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bcf_versions_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bcf_versions_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bcf_versions_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_bcf_document(self, projects_pk, **kwargs):  # noqa: E501
        """create_bcf_document  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_bcf_document(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_bcf_document_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.create_bcf_document_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def create_bcf_document_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """create_bcf_document  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_bcf_document_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'guid', 'filename']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bcf_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_bcf_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'guid' in params:
            form_params.append(('guid', params['guid']))  # noqa: E501
        if 'filename' in params:
            form_params.append(('filename', params['filename']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_bcf_project(self, data, **kwargs):  # noqa: E501
        """create_bcf_project  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_bcf_project(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_bcf_project_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_bcf_project_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def create_bcf_project_with_http_info(self, data, **kwargs):  # noqa: E501
        """create_bcf_project  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_bcf_project_with_http_info(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bcf_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_bitmap(self, viewpoints_pk, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_bitmap  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_bitmap(viewpoints_pk, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_bitmap_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_bitmap_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_bitmap_with_http_info(self, viewpoints_pk, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_bitmap  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_bitmap_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bitmap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `create_bitmap`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_bitmap`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_bitmap`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_bitmap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bitmap',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_coloring(self, viewpoints_pk, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_coloring  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_coloring(viewpoints_pk, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_coloring_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_coloring_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_coloring_with_http_info(self, viewpoints_pk, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_coloring  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_coloring_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_coloring" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `create_coloring`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_coloring`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_coloring`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_coloring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_comment(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_comment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_comment(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_comment_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_comment_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_comment_with_http_info(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_comment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_comment_with_http_info(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_comment`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_comment`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_comment_event(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_comment_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_comment_event(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_comment_event_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_comment_event_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_comment_event_with_http_info(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_comment_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_comment_event_with_http_info(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_comment_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_comment_event`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_comment_event`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_comment_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_comment_event_0(self, comments_pk, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_comment_event_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_comment_event_0(comments_pk, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_comment_event_0_with_http_info(comments_pk, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_comment_event_0_with_http_info(comments_pk, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_comment_event_0_with_http_info(self, comments_pk, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_comment_event_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_comment_event_0_with_http_info(comments_pk, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comments_pk', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_comment_event_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `create_comment_event_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_comment_event_0`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_comment_event_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_comment_event_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_document_reference(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_document_reference  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_document_reference(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_document_reference_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_document_reference_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_document_reference_with_http_info(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_document_reference  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_document_reference_with_http_info(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_document_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_document_reference`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_document_reference`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_document_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentReference',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_file(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_file(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_file_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_file_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_file_with_http_info(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_file_with_http_info(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_file`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_file`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_related_topic(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_related_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_related_topic(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_related_topic_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_related_topic_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_related_topic_with_http_info(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_related_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_related_topic_with_http_info(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_related_topic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_related_topic`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_related_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_related_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelatedTopic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_selection(self, viewpoints_pk, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_selection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_selection(viewpoints_pk, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_selection_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_selection_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_selection_with_http_info(self, viewpoints_pk, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_selection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_selection_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_selection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `create_selection`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_selection`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_selection`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_selection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_snippet(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_snippet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_snippet(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_snippet_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_snippet_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_snippet_with_http_info(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_snippet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_snippet_with_http_info(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snippet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_snippet`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_snippet`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_snippet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_topic(self, projects_pk, data, **kwargs):  # noqa: E501
        """create_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_topic(projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_topic_with_http_info(projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_topic_with_http_info(projects_pk, data, **kwargs)  # noqa: E501
            return data

    def create_topic_with_http_info(self, projects_pk, data, **kwargs):  # noqa: E501
        """create_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_topic_with_http_info(projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_topic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_topic_event(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_topic_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_topic_event(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_topic_event_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_topic_event_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_topic_event_with_http_info(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_topic_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_topic_event_with_http_info(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_topic_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_topic_event`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_topic_event`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_topic_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_version(self, data, **kwargs):  # noqa: E501
        """create_version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_version(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_version_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_version_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def create_version_with_http_info(self, data, **kwargs):  # noqa: E501
        """create_version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_version_with_http_info(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_viewpoint(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_viewpoint  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_viewpoint(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_viewpoint_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_viewpoint_with_http_info(projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_viewpoint_with_http_info(self, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_viewpoint  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_viewpoint_with_http_info(projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_viewpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_viewpoint`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_visibility(self, viewpoints_pk, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_visibility  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_visibility(viewpoints_pk, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_visibility_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_visibility_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def create_visibility_with_http_info(self, viewpoints_pk, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """create_visibility  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_visibility_with_http_info(viewpoints_pk, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `create_visibility`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `create_visibility`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `create_visibility`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_bcf_document(self, id, projects_pk, **kwargs):  # noqa: E501
        """delete_bcf_document  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_bcf_document(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_bcf_document_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_bcf_document_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
            return data

    def delete_bcf_document_with_http_info(self, id, projects_pk, **kwargs):  # noqa: E501
        """delete_bcf_document  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_bcf_document_with_http_info(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bcf_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_bcf_document`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_bcf_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_bcf_project(self, id, **kwargs):  # noqa: E501
        """delete_bcf_project  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_bcf_project(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_bcf_project_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_bcf_project_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_bcf_project_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_bcf_project  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_bcf_project_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bcf_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_comment(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_comment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_comment(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_comment_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_comment_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def delete_comment_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_comment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_comment_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_comment`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `delete_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_document_reference(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_document_reference  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_document_reference(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_document_reference_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_document_reference_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def delete_document_reference_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_document_reference  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_document_reference_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_document_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_document_reference`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_document_reference`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `delete_document_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_file(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_file(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_file_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_file_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def delete_file_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_file_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_file`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_file`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `delete_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_related_topic(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_related_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_related_topic(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_related_topic_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_related_topic_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def delete_related_topic_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_related_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_related_topic_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_related_topic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_related_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_related_topic`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `delete_related_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_snippet(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_snippet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_snippet(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_snippet_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_snippet_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def delete_snippet_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """delete_snippet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_snippet_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snippet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_snippet`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_snippet`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `delete_snippet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_topic(self, id, projects_pk, **kwargs):  # noqa: E501
        """delete_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_topic(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_topic_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_topic_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
            return data

    def delete_topic_with_http_info(self, id, projects_pk, **kwargs):  # noqa: E501
        """delete_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_topic_with_http_info(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_topic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `delete_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_bcf_document(self, id, projects_pk, **kwargs):  # noqa: E501
        """full_update_bcf_document  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_bcf_document(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_bcf_document_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_bcf_document_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
            return data

    def full_update_bcf_document_with_http_info(self, id, projects_pk, **kwargs):  # noqa: E501
        """full_update_bcf_document  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_bcf_document_with_http_info(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'guid', 'filename']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_bcf_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_bcf_document`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_bcf_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'guid' in params:
            form_params.append(('guid', params['guid']))  # noqa: E501
        if 'filename' in params:
            form_params.append(('filename', params['filename']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_bcf_project(self, id, data, **kwargs):  # noqa: E501
        """full_update_bcf_project  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_bcf_project(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_bcf_project_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_bcf_project_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def full_update_bcf_project_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """full_update_bcf_project  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_bcf_project_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_bcf_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_bcf_project`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_bitmap(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_bitmap  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_bitmap(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_bitmap_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_bitmap_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_bitmap_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_bitmap  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_bitmap_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_bitmap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `full_update_bitmap`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_bitmap`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_bitmap`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_bitmap`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_bitmap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bitmap',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_coloring(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_coloring  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_coloring(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_coloring_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_coloring_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_coloring_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_coloring  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_coloring_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_coloring" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `full_update_coloring`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_coloring`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_coloring`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_coloring`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_coloring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_comment(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_comment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_comment(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_comment_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_comment_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_comment_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_comment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_comment_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_comment`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_comment`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_comment_event(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_comment_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_comment_event(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_comment_event_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_comment_event_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_comment_event_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_comment_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_comment_event_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_comment_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_comment_event`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_comment_event`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_comment_event`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_comment_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_comment_event_0(self, comments_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_comment_event_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_comment_event_0(comments_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_comment_event_0_with_http_info(comments_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_comment_event_0_with_http_info(comments_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_comment_event_0_with_http_info(self, comments_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_comment_event_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_comment_event_0_with_http_info(comments_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comments_pk', 'id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_comment_event_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `full_update_comment_event_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_comment_event_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_comment_event_0`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_comment_event_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_comment_event_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_document_reference(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_document_reference  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_document_reference(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_document_reference_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_document_reference_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_document_reference_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_document_reference  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_document_reference_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_document_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_document_reference`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_document_reference`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_document_reference`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_document_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentReference',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_file(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_file(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_file_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_file_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_file_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_file_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_file`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_file`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_file`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_related_topic(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_related_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_related_topic(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_related_topic_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_related_topic_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_related_topic_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_related_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_related_topic_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_related_topic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_related_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_related_topic`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_related_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_related_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelatedTopic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_selection(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_selection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_selection(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_selection_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_selection_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_selection_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_selection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_selection_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_selection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `full_update_selection`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_selection`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_selection`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_selection`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_selection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_snippet(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_snippet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_snippet(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_snippet_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_snippet_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_snippet_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_snippet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_snippet_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_snippet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_snippet`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_snippet`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_snippet`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_snippet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_topic(self, id, projects_pk, data, **kwargs):  # noqa: E501
        """full_update_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_topic(id, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_topic_with_http_info(id, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_topic_with_http_info(id, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_topic_with_http_info(self, id, projects_pk, data, **kwargs):  # noqa: E501
        """full_update_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_topic_with_http_info(id, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_topic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_topic_event(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_topic_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_topic_event(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_topic_event_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_topic_event_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_topic_event_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_topic_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_topic_event_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_topic_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_topic_event`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_topic_event`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_topic_event`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_topic_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_version(self, id, data, **kwargs):  # noqa: E501
        """full_update_version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_version(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_version_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_version_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def full_update_version_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """full_update_version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_version_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_version`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_viewpoint(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_viewpoint  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_viewpoint(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_viewpoint_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_viewpoint_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_viewpoint_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_viewpoint  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_viewpoint_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_viewpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_viewpoint`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_visibility(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_visibility  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_visibility(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.full_update_visibility_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_visibility_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def full_update_visibility_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """full_update_visibility  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.full_update_visibility_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `full_update_visibility`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `full_update_visibility`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `full_update_visibility`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `full_update_visibility`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `full_update_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_comments_events(self, projects_pk, **kwargs):  # noqa: E501
        """get_all_comments_events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_comments_events(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_comments_events_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_comments_events_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def get_all_comments_events_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """get_all_comments_events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_comments_events_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_comments_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_all_comments_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/comments/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommentEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_topics_events(self, projects_pk, **kwargs):  # noqa: E501
        """get_all_topics_events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_topics_events(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[TopicEvents]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_topics_events_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_topics_events_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def get_all_topics_events_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """get_all_topics_events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_topics_events_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[TopicEvents]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_topics_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_all_topics_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TopicEvents]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bcf_document(self, id, projects_pk, **kwargs):  # noqa: E501
        """get_bcf_document  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bcf_document(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bcf_document_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bcf_document_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
            return data

    def get_bcf_document_with_http_info(self, id, projects_pk, **kwargs):  # noqa: E501
        """get_bcf_document  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bcf_document_with_http_info(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bcf_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_bcf_document`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_bcf_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bcf_documents(self, projects_pk, **kwargs):  # noqa: E501
        """get_bcf_documents  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bcf_documents(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bcf_documents_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bcf_documents_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def get_bcf_documents_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """get_bcf_documents  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bcf_documents_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bcf_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_bcf_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bcf_project(self, id, **kwargs):  # noqa: E501
        """get_bcf_project  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bcf_project(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bcf_project_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bcf_project_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_bcf_project_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_bcf_project  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bcf_project_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bcf_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bcf_projects(self, **kwargs):  # noqa: E501
        """get_bcf_projects  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bcf_projects(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[BcfProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bcf_projects_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_bcf_projects_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_bcf_projects_with_http_info(self, **kwargs):  # noqa: E501
        """get_bcf_projects  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bcf_projects_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[BcfProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bcf_projects" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BcfProject]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bitmap(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_bitmap  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bitmap(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bitmap_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bitmap_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_bitmap_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_bitmap  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bitmap_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bitmap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_bitmap`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_bitmap`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_bitmap`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_bitmap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bitmap',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bitmaps(self, viewpoints_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_bitmaps  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bitmaps(viewpoints_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Bitmap]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bitmaps_with_http_info(viewpoints_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bitmaps_with_http_info(viewpoints_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_bitmaps_with_http_info(self, viewpoints_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_bitmaps  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bitmaps_with_http_info(viewpoints_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Bitmap]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bitmaps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_bitmaps`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_bitmaps`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_bitmaps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Bitmap]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_coloring(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_coloring  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_coloring(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_coloring_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_coloring_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_coloring_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_coloring  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_coloring_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coloring" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_coloring`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_coloring`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_coloring`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_coloring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_colorings(self, viewpoints_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_colorings  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_colorings(viewpoints_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Coloring]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_colorings_with_http_info(viewpoints_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_colorings_with_http_info(viewpoints_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_colorings_with_http_info(self, viewpoints_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_colorings  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_colorings_with_http_info(viewpoints_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Coloring]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_colorings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_colorings`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_colorings`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_colorings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Coloring]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comment(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comment(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_comment_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_comment_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_comment_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comment_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_comment`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comment_event(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comment_event(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_comment_event_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_comment_event_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_comment_event_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comment_event_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comment_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_comment_event`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_comment_event`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_comment_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comment_event_0(self, comments_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment_event_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comment_event_0(comments_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_comment_event_0_with_http_info(comments_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_comment_event_0_with_http_info(comments_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_comment_event_0_with_http_info(self, comments_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment_event_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comment_event_0_with_http_info(comments_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comments_pk', 'id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comment_event_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `get_comment_event_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_comment_event_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_comment_event_0`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_comment_event_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comment_events(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment_events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comment_events(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_comment_events_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_comment_events_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_comment_events_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment_events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comment_events_with_http_info(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comment_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_comment_events`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_comment_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommentEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comment_events_0(self, comments_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment_events_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comment_events_0(comments_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_comment_events_0_with_http_info(comments_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_comment_events_0_with_http_info(comments_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_comment_events_0_with_http_info(self, comments_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comment_events_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comment_events_0_with_http_info(comments_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[CommentEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comments_pk', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comment_events_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `get_comment_events_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_comment_events_0`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_comment_events_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommentEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_comments(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comments  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comments(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Comment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_comments_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_comments_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_comments_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_comments  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_comments_with_http_info(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Comment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_comments`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Comment]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_document_reference(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_document_reference  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_reference(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_document_reference_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_reference_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_document_reference_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_document_reference  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_reference_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_document_reference`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_document_reference`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_document_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentReference',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_document_references(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_document_references  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_references(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[DocumentReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_document_references_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_references_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_document_references_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_document_references  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_references_with_http_info(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[DocumentReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_references" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_document_references`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_document_references`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DocumentReference]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_extensions(self, projects_pk, **kwargs):  # noqa: E501
        """get_extensions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_extensions(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[Extensions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_extensions_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_extensions_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def get_extensions_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """get_extensions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_extensions_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[Extensions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_extensions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_extensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/extensions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Extensions]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_file(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_file(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_file_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_file_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_file_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_file_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_file`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_file`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_files(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_files  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_files(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[BimSnippet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_files_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_files_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_files_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_files  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_files_with_http_info(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[BimSnippet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_files`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BimSnippet]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_related_topic(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_related_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_related_topic(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_related_topic_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_related_topic_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_related_topic_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_related_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_related_topic_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_related_topic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_related_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_related_topic`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_related_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelatedTopic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_related_topics(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_related_topics  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_related_topics(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[RelatedTopic]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_related_topics_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_related_topics_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_related_topics_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_related_topics  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_related_topics_with_http_info(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[RelatedTopic]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_related_topics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_related_topics`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_related_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RelatedTopic]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_selection(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_selection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_selection(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_selection_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_selection_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_selection_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_selection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_selection_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_selection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_selection`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_selection`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_selection`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_selection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_selections(self, viewpoints_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_selections  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_selections(viewpoints_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_selections_with_http_info(viewpoints_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_selections_with_http_info(viewpoints_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_selections_with_http_info(self, viewpoints_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_selections  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_selections_with_http_info(viewpoints_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_selections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_selections`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_selections`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_selections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Component]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_snapshots(self, viewpoints_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_snapshots  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_snapshots(viewpoints_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Snapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_snapshots_with_http_info(viewpoints_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_snapshots_with_http_info(viewpoints_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_snapshots_with_http_info(self, viewpoints_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_snapshots  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_snapshots_with_http_info(viewpoints_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Snapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_snapshots`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_snapshots`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_snapshots`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/snapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Snapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_snippet(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_snippet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_snippet(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_snippet_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_snippet_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_snippet_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_snippet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_snippet_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snippet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_snippet`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_snippet`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_snippet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_snippets(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_snippets  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_snippets(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[BimSnippet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_snippets_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_snippets_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_snippets_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_snippets  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_snippets_with_http_info(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[BimSnippet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snippets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_snippets`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_snippets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BimSnippet]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topic(self, id, projects_pk, **kwargs):  # noqa: E501
        """get_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_topic(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_topic_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_topic_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
            return data

    def get_topic_with_http_info(self, id, projects_pk, **kwargs):  # noqa: E501
        """get_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_topic_with_http_info(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topic_event(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_topic_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_topic_event(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_topic_event_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_topic_event_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_topic_event_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_topic_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_topic_event_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_topic_event`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_topic_event`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_topic_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topic_events(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_topic_events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_topic_events(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[TopicEvents]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_topic_events_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_topic_events_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_topic_events_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_topic_events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_topic_events_with_http_info(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[TopicEvents]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_topic_events`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_topic_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TopicEvents]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_topics(self, projects_pk, **kwargs):  # noqa: E501
        """get_topics  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_topics(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[Topic]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_topics_with_http_info(projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_topics_with_http_info(projects_pk, **kwargs)  # noqa: E501
            return data

    def get_topics_with_http_info(self, projects_pk, **kwargs):  # noqa: E501
        """get_topics  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_topics_with_http_info(projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :return: list[Topic]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Topic]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_version(self, id, **kwargs):  # noqa: E501
        """get_version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_version(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_version_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_version_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_version_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_version_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_versions(self, **kwargs):  # noqa: E501
        """get_versions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_versions(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Version]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_versions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_versions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_versions_with_http_info(self, **kwargs):  # noqa: E501
        """get_versions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_versions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Version]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Version]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_viewpoint(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_viewpoint  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_viewpoint(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_viewpoint_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_viewpoint_with_http_info(id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_viewpoint_with_http_info(self, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_viewpoint  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_viewpoint_with_http_info(id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_viewpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_viewpoints(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_viewpoints  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_viewpoints(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Viewpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_viewpoints_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_viewpoints_with_http_info(projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_viewpoints_with_http_info(self, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_viewpoints  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_viewpoints_with_http_info(projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Viewpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_viewpoints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_viewpoints`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_viewpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Viewpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_visibilities(self, viewpoints_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_visibilities  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_visibilities(viewpoints_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Visibility]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_visibilities_with_http_info(viewpoints_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_visibilities_with_http_info(viewpoints_pk, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_visibilities_with_http_info(self, viewpoints_pk, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_visibilities  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_visibilities_with_http_info(viewpoints_pk, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: list[Visibility]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_visibilities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_visibilities`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_visibilities`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_visibilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Visibility]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_visibility(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_visibility  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_visibility(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_visibility_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_visibility_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, **kwargs)  # noqa: E501
            return data

    def get_visibility_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, **kwargs):  # noqa: E501
        """get_visibility  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_visibility_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `get_visibility`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_visibility`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `get_visibility`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `get_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bcf_document(self, id, projects_pk, **kwargs):  # noqa: E501
        """update_bcf_document  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_bcf_document(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_bcf_document_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.update_bcf_document_with_http_info(id, projects_pk, **kwargs)  # noqa: E501
            return data

    def update_bcf_document_with_http_info(self, id, projects_pk, **kwargs):  # noqa: E501
        """update_bcf_document  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_bcf_document_with_http_info(id, projects_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str guid:
        :param str filename:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'guid', 'filename']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bcf_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_bcf_document`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_bcf_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'guid' in params:
            form_params.append(('guid', params['guid']))  # noqa: E501
        if 'filename' in params:
            form_params.append(('filename', params['filename']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/documents/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bcf_project(self, id, data, **kwargs):  # noqa: E501
        """update_bcf_project  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_bcf_project(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_bcf_project_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_bcf_project_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def update_bcf_project_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """update_bcf_project  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_bcf_project_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param BcfProject data: (required)
        :return: BcfProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bcf_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_bcf_project`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_bcf_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BcfProject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bitmap(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_bitmap  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_bitmap(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_bitmap_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_bitmap_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_bitmap_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_bitmap  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_bitmap_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Bitmap data: (required)
        :return: Bitmap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bitmap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `update_bitmap`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_bitmap`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_bitmap`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_bitmap`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_bitmap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/bitmap/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bitmap',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_coloring(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_coloring  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_coloring(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_coloring_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_coloring_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_coloring_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_coloring  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_coloring_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Coloring data: (required)
        :return: Coloring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_coloring" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `update_coloring`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_coloring`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_coloring`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_coloring`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_coloring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/coloring/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Coloring',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_comment(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_comment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_comment(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_comment_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_comment_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_comment_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_comment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_comment_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Comment data: (required)
        :return: Comment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_comment`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_comment`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_comment`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Comment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_comment_event(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_comment_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_comment_event(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_comment_event_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_comment_event_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_comment_event_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_comment_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_comment_event_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_comment_event`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_comment_event`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_comment_event`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_comment_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/events/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_comment_event_0(self, comments_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_comment_event_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_comment_event_0(comments_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_comment_event_0_with_http_info(comments_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_comment_event_0_with_http_info(comments_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_comment_event_0_with_http_info(self, comments_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_comment_event_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_comment_event_0_with_http_info(comments_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comments_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param CommentEvent data: (required)
        :return: CommentEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comments_pk', 'id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment_event_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comments_pk' is set
        if ('comments_pk' not in params or
                params['comments_pk'] is None):
            raise ValueError("Missing the required parameter `comments_pk` when calling `update_comment_event_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_comment_event_0`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_comment_event_0`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_comment_event_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_comment_event_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comments_pk' in params:
            path_params['comments_pk'] = params['comments_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/comments/{comments_pk}/events/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentEvent',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_document_reference(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_document_reference  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_document_reference(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_document_reference_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_document_reference_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_document_reference_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_document_reference  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_document_reference_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param DocumentReference data: (required)
        :return: DocumentReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_document_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_document_reference`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_document_reference`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_document_reference`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_document_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/document_references/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentReference',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_file(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_file(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_file_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_file_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_file_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_file_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_file`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_file`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_file`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/file/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_related_topic(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_related_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_related_topic(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_related_topic_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_related_topic_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_related_topic_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_related_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_related_topic_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param RelatedTopic data: (required)
        :return: RelatedTopic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_related_topic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_related_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_related_topic`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_related_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_related_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/related_topics/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelatedTopic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_selection(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_selection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_selection(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_selection_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_selection_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_selection_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_selection  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_selection_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Component data: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_selection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `update_selection`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_selection`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_selection`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_selection`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_selection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/selection/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Component',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_snippet(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_snippet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_snippet(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_snippet_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_snippet_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_snippet_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_snippet  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_snippet_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param BimSnippet data: (required)
        :return: BimSnippet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_snippet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_snippet`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_snippet`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_snippet`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_snippet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/snippet/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BimSnippet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_topic(self, id, projects_pk, data, **kwargs):  # noqa: E501
        """update_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_topic(id, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_topic_with_http_info(id, projects_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_topic_with_http_info(id, projects_pk, data, **kwargs)  # noqa: E501
            return data

    def update_topic_with_http_info(self, id, projects_pk, data, **kwargs):  # noqa: E501
        """update_topic  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_topic_with_http_info(id, projects_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param Topic data: (required)
        :return: Topic
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_topic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_topic`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_topic`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_topic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topic',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_topic_event(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_topic_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_topic_event(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_topic_event_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_topic_event_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_topic_event_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_topic_event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_topic_event_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param TopicEvents data: (required)
        :return: TopicEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_topic_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_topic_event`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_topic_event`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_topic_event`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_topic_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/events/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopicEvents',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_version(self, id, data, **kwargs):  # noqa: E501
        """update_version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_version(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_version_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_version_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def update_version_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """update_version  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_version_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param Version data: (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_version`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/versions/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_viewpoint(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_viewpoint  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_viewpoint(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_viewpoint_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_viewpoint_with_http_info(id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_viewpoint_with_http_info(self, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_viewpoint  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_viewpoint_with_http_info(id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Viewpoint data: (required)
        :return: Viewpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_viewpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_viewpoint`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_viewpoint`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_viewpoint`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_viewpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Viewpoint',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_visibility(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_visibility  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_visibility(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_visibility_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_visibility_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs)  # noqa: E501
            return data

    def update_visibility_with_http_info(self, viewpoints_pk, id, projects_pk, topics_pk, data, **kwargs):  # noqa: E501
        """update_visibility  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_visibility_with_http_info(viewpoints_pk, id, projects_pk, topics_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str viewpoints_pk: (required)
        :param str id: (required)
        :param str projects_pk: (required)
        :param str topics_pk: (required)
        :param Visibility data: (required)
        :return: Visibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewpoints_pk', 'id', 'projects_pk', 'topics_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewpoints_pk' is set
        if ('viewpoints_pk' not in params or
                params['viewpoints_pk'] is None):
            raise ValueError("Missing the required parameter `viewpoints_pk` when calling `update_visibility`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_visibility`")  # noqa: E501
        # verify the required parameter 'projects_pk' is set
        if ('projects_pk' not in params or
                params['projects_pk'] is None):
            raise ValueError("Missing the required parameter `projects_pk` when calling `update_visibility`")  # noqa: E501
        # verify the required parameter 'topics_pk' is set
        if ('topics_pk' not in params or
                params['topics_pk'] is None):
            raise ValueError("Missing the required parameter `topics_pk` when calling `update_visibility`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewpoints_pk' in params:
            path_params['viewpoints_pk'] = params['viewpoints_pk']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'projects_pk' in params:
            path_params['projects_pk'] = params['projects_pk']  # noqa: E501
        if 'topics_pk' in params:
            path_params['topics_pk'] = params['topics_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/bcf/2.1/projects/{projects_pk}/topics/{topics_pk}/viewpoints/{viewpoints_pk}/visibility/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Visibility',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
