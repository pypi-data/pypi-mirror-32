# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest
from datetime import date

from swagger_client.mercury.client.api.tradeservice_api import TradeserviceApi
from .utils import TestUtils


class TestTradeserviceApi(unittest.TestCase):
    """TradeserviceApi unit test stubs"""

    def setUp(self):
        self.api = TradeserviceApi()
        self.test_utils = TestUtils()

    def tearDown(self):
        pass

    def test_calculate_decomposed_pn_l(self):
        """Test case for calculate_decomposed_pn_l

        Returns the P&L timeline decomposed by greeks for the given trade and the specified time range  # noqa: E501
        """
        position = self.test_utils.create_single_option_position(
            opening_date=date(2018, 4, 9))
        data = {'body': position,
                '_from': date(2018, 4, 10),
                'to': date(2018, 4, 13)}
        response = self.api.calculate_decomposed_pn_l(**data)
        # TODO: add assertion to response

    def test_calculate_historical_pn_l(self):
        """Test case for calculate_historical_pn_l

        Returns the P&L timeline for the given trade and the specified time range  # noqa: E501
        """
        position = self.test_utils.create_single_option_position(
            opening_date=date(2018, 4, 9))
        data = {'body': position,
                '_from': date(2018, 4, 9),
                'to': date(2018, 4, 14)}
        response = self.api.calculate_historical_pn_l(**data)
        # TODO: add assertion to response

    def test_calculate_historical_value(self):
        """Test case for calculate_historical_value

        Returns the historical dollar denominated value for the given trade and the time window  # noqa: E501
        """
        position = self.test_utils.create_long_call_vertical_spread_position(
            opening_date=date(2018, 4, 9))
        data = {'body': position,
                '_from': date(2018, 4, 9),
                'to': date(2018, 4, 14)}
        response = self.api.calculate_historical_value(**data)
        # TODO: add assertion to response

    def test_calculate_instant_decomposed_pn_l(self):
        """Test case for calculate_instant_decomposed_pn_l

        Returns the greek decomposed P&L for the given trade and the time window  # noqa: E501
        """
        position = self.test_utils.create_single_option_position(
            opening_date=date(2018, 4, 9))
        data = {'body': position,
                '_from': date(2018, 4, 9),
                'to': date(2018, 4, 14)}
        response = self.api.calculate_instant_decomposed_pn_l(**data)
        # TODO: add assertion to response

    def test_calculate_pn_l(self):
        """Test case for calculate_pn_l

        Returns the the t+0 curve and expiration PnL curve for the given trade  # noqa: E501
        """
        position = self.test_utils.create_long_put_butterfly_position(
            opening_date=date(2018, 4, 9))

        data = {'body': position,
                'date': date(2018, 4, 10)}
        response = self.api.calculate_pn_l(**data)
        # TODO: add assertion to response


if __name__ == '__main__':
    unittest.main()
