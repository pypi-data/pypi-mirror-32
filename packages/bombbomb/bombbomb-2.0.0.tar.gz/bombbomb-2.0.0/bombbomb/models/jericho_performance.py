# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class JerichoPerformance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, jericho_id=None, sent=None, unique_views=None, unique_landing_page_views=None, landing_page_views=None, delivered=None, bounce=None, open=None, click=None, video_play=None, abuse_complaints=None, contacts=None, prompts_sent=None, prompts_with_recordings=None, prompts_opted_out=None):
        """
        JerichoPerformance - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'jericho_id': 'int',
            'sent': 'int',
            'unique_views': 'int',
            'unique_landing_page_views': 'int',
            'landing_page_views': 'int',
            'delivered': 'int',
            'bounce': 'int',
            'open': 'int',
            'click': 'int',
            'video_play': 'int',
            'abuse_complaints': 'int',
            'contacts': 'int',
            'prompts_sent': 'int',
            'prompts_with_recordings': 'int',
            'prompts_opted_out': 'int'
        }

        self.attribute_map = {
            'jericho_id': 'jerichoId',
            'sent': 'sent',
            'unique_views': 'uniqueViews',
            'unique_landing_page_views': 'uniqueLandingPageViews',
            'landing_page_views': 'landingPageViews',
            'delivered': 'delivered',
            'bounce': 'bounce',
            'open': 'open',
            'click': 'click',
            'video_play': 'videoPlay',
            'abuse_complaints': 'abuseComplaints',
            'contacts': 'contacts',
            'prompts_sent': 'promptsSent',
            'prompts_with_recordings': 'promptsWithRecordings',
            'prompts_opted_out': 'promptsOptedOut'
        }

        self._jericho_id = jericho_id
        self._sent = sent
        self._unique_views = unique_views
        self._unique_landing_page_views = unique_landing_page_views
        self._landing_page_views = landing_page_views
        self._delivered = delivered
        self._bounce = bounce
        self._open = open
        self._click = click
        self._video_play = video_play
        self._abuse_complaints = abuse_complaints
        self._contacts = contacts
        self._prompts_sent = prompts_sent
        self._prompts_with_recordings = prompts_with_recordings
        self._prompts_opted_out = prompts_opted_out

    @property
    def jericho_id(self):
        """
        Gets the jericho_id of this JerichoPerformance.
        The jericho id

        :return: The jericho_id of this JerichoPerformance.
        :rtype: int
        """
        return self._jericho_id

    @jericho_id.setter
    def jericho_id(self, jericho_id):
        """
        Sets the jericho_id of this JerichoPerformance.
        The jericho id

        :param jericho_id: The jericho_id of this JerichoPerformance.
        :type: int
        """

        self._jericho_id = jericho_id

    @property
    def sent(self):
        """
        Gets the sent of this JerichoPerformance.
        The number of emails sent

        :return: The sent of this JerichoPerformance.
        :rtype: int
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """
        Sets the sent of this JerichoPerformance.
        The number of emails sent

        :param sent: The sent of this JerichoPerformance.
        :type: int
        """

        self._sent = sent

    @property
    def unique_views(self):
        """
        Gets the unique_views of this JerichoPerformance.
        The unique number of people that viewed the email

        :return: The unique_views of this JerichoPerformance.
        :rtype: int
        """
        return self._unique_views

    @unique_views.setter
    def unique_views(self, unique_views):
        """
        Sets the unique_views of this JerichoPerformance.
        The unique number of people that viewed the email

        :param unique_views: The unique_views of this JerichoPerformance.
        :type: int
        """

        self._unique_views = unique_views

    @property
    def unique_landing_page_views(self):
        """
        Gets the unique_landing_page_views of this JerichoPerformance.
        The unique number of people that visited the landing page

        :return: The unique_landing_page_views of this JerichoPerformance.
        :rtype: int
        """
        return self._unique_landing_page_views

    @unique_landing_page_views.setter
    def unique_landing_page_views(self, unique_landing_page_views):
        """
        Sets the unique_landing_page_views of this JerichoPerformance.
        The unique number of people that visited the landing page

        :param unique_landing_page_views: The unique_landing_page_views of this JerichoPerformance.
        :type: int
        """

        self._unique_landing_page_views = unique_landing_page_views

    @property
    def landing_page_views(self):
        """
        Gets the landing_page_views of this JerichoPerformance.
        The total number of people that visisted the landing page

        :return: The landing_page_views of this JerichoPerformance.
        :rtype: int
        """
        return self._landing_page_views

    @landing_page_views.setter
    def landing_page_views(self, landing_page_views):
        """
        Sets the landing_page_views of this JerichoPerformance.
        The total number of people that visisted the landing page

        :param landing_page_views: The landing_page_views of this JerichoPerformance.
        :type: int
        """

        self._landing_page_views = landing_page_views

    @property
    def delivered(self):
        """
        Gets the delivered of this JerichoPerformance.
        The number of emails delivered, likely less than sent due to bounces, and other common delivery issues

        :return: The delivered of this JerichoPerformance.
        :rtype: int
        """
        return self._delivered

    @delivered.setter
    def delivered(self, delivered):
        """
        Sets the delivered of this JerichoPerformance.
        The number of emails delivered, likely less than sent due to bounces, and other common delivery issues

        :param delivered: The delivered of this JerichoPerformance.
        :type: int
        """

        self._delivered = delivered

    @property
    def bounce(self):
        """
        Gets the bounce of this JerichoPerformance.
        The number of emails that bounced as undeliverable

        :return: The bounce of this JerichoPerformance.
        :rtype: int
        """
        return self._bounce

    @bounce.setter
    def bounce(self, bounce):
        """
        Sets the bounce of this JerichoPerformance.
        The number of emails that bounced as undeliverable

        :param bounce: The bounce of this JerichoPerformance.
        :type: int
        """

        self._bounce = bounce

    @property
    def open(self):
        """
        Gets the open of this JerichoPerformance.
        The total number of times the emails were viewed

        :return: The open of this JerichoPerformance.
        :rtype: int
        """
        return self._open

    @open.setter
    def open(self, open):
        """
        Sets the open of this JerichoPerformance.
        The total number of times the emails were viewed

        :param open: The open of this JerichoPerformance.
        :type: int
        """

        self._open = open

    @property
    def click(self):
        """
        Gets the click of this JerichoPerformance.
        The total number of times links in the emails were clicked

        :return: The click of this JerichoPerformance.
        :rtype: int
        """
        return self._click

    @click.setter
    def click(self, click):
        """
        Sets the click of this JerichoPerformance.
        The total number of times links in the emails were clicked

        :param click: The click of this JerichoPerformance.
        :type: int
        """

        self._click = click

    @property
    def video_play(self):
        """
        Gets the video_play of this JerichoPerformance.
        The total number of times videos in the emails were played

        :return: The video_play of this JerichoPerformance.
        :rtype: int
        """
        return self._video_play

    @video_play.setter
    def video_play(self, video_play):
        """
        Sets the video_play of this JerichoPerformance.
        The total number of times videos in the emails were played

        :param video_play: The video_play of this JerichoPerformance.
        :type: int
        """

        self._video_play = video_play

    @property
    def abuse_complaints(self):
        """
        Gets the abuse_complaints of this JerichoPerformance.
        The number of recipients that marked the message as abusive

        :return: The abuse_complaints of this JerichoPerformance.
        :rtype: int
        """
        return self._abuse_complaints

    @abuse_complaints.setter
    def abuse_complaints(self, abuse_complaints):
        """
        Sets the abuse_complaints of this JerichoPerformance.
        The number of recipients that marked the message as abusive

        :param abuse_complaints: The abuse_complaints of this JerichoPerformance.
        :type: int
        """

        self._abuse_complaints = abuse_complaints

    @property
    def contacts(self):
        """
        Gets the contacts of this JerichoPerformance.
        The total number of contacts submitted to be sent, may be more than was sent to

        :return: The contacts of this JerichoPerformance.
        :rtype: int
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this JerichoPerformance.
        The total number of contacts submitted to be sent, may be more than was sent to

        :param contacts: The contacts of this JerichoPerformance.
        :type: int
        """

        self._contacts = contacts

    @property
    def prompts_sent(self):
        """
        Gets the prompts_sent of this JerichoPerformance.
        The total number of prompts sent to members of the client group

        :return: The prompts_sent of this JerichoPerformance.
        :rtype: int
        """
        return self._prompts_sent

    @prompts_sent.setter
    def prompts_sent(self, prompts_sent):
        """
        Sets the prompts_sent of this JerichoPerformance.
        The total number of prompts sent to members of the client group

        :param prompts_sent: The prompts_sent of this JerichoPerformance.
        :type: int
        """

        self._prompts_sent = prompts_sent

    @property
    def prompts_with_recordings(self):
        """
        Gets the prompts_with_recordings of this JerichoPerformance.
        The total number of prompts sent that included a personal recording

        :return: The prompts_with_recordings of this JerichoPerformance.
        :rtype: int
        """
        return self._prompts_with_recordings

    @prompts_with_recordings.setter
    def prompts_with_recordings(self, prompts_with_recordings):
        """
        Sets the prompts_with_recordings of this JerichoPerformance.
        The total number of prompts sent that included a personal recording

        :param prompts_with_recordings: The prompts_with_recordings of this JerichoPerformance.
        :type: int
        """

        self._prompts_with_recordings = prompts_with_recordings

    @property
    def prompts_opted_out(self):
        """
        Gets the prompts_opted_out of this JerichoPerformance.
        The total number of members that chose not to send a prompt

        :return: The prompts_opted_out of this JerichoPerformance.
        :rtype: int
        """
        return self._prompts_opted_out

    @prompts_opted_out.setter
    def prompts_opted_out(self, prompts_opted_out):
        """
        Sets the prompts_opted_out of this JerichoPerformance.
        The total number of members that chose not to send a prompt

        :param prompts_opted_out: The prompts_opted_out of this JerichoPerformance.
        :type: int
        """

        self._prompts_opted_out = prompts_opted_out

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
