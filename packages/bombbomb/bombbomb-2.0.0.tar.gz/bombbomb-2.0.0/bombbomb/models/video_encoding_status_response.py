# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VideoEncodingStatusResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, is_ready=None, is_failed=None, progress=None):
        """
        VideoEncodingStatusResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_ready': 'bool',
            'is_failed': 'bool',
            'progress': 'int'
        }

        self.attribute_map = {
            'is_ready': 'isReady',
            'is_failed': 'isFailed',
            'progress': 'progress'
        }

        self._is_ready = is_ready
        self._is_failed = is_failed
        self._progress = progress

    @property
    def is_ready(self):
        """
        Gets the is_ready of this VideoEncodingStatusResponse.
        Returns true if the video is done encoding and finalized.

        :return: The is_ready of this VideoEncodingStatusResponse.
        :rtype: bool
        """
        return self._is_ready

    @is_ready.setter
    def is_ready(self, is_ready):
        """
        Sets the is_ready of this VideoEncodingStatusResponse.
        Returns true if the video is done encoding and finalized.

        :param is_ready: The is_ready of this VideoEncodingStatusResponse.
        :type: bool
        """

        self._is_ready = is_ready

    @property
    def is_failed(self):
        """
        Gets the is_failed of this VideoEncodingStatusResponse.
        Returns true if the video encoding process failed.

        :return: The is_failed of this VideoEncodingStatusResponse.
        :rtype: bool
        """
        return self._is_failed

    @is_failed.setter
    def is_failed(self, is_failed):
        """
        Sets the is_failed of this VideoEncodingStatusResponse.
        Returns true if the video encoding process failed.

        :param is_failed: The is_failed of this VideoEncodingStatusResponse.
        :type: bool
        """

        self._is_failed = is_failed

    @property
    def progress(self):
        """
        Gets the progress of this VideoEncodingStatusResponse.
        0-100 value indicating progress of video encoding process.

        :return: The progress of this VideoEncodingStatusResponse.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """
        Sets the progress of this VideoEncodingStatusResponse.
        0-100 value indicating progress of video encoding process.

        :param progress: The progress of this VideoEncodingStatusResponse.
        :type: int
        """

        self._progress = progress

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
