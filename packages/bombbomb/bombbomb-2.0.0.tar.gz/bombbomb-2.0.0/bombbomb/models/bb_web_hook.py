# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BBWebHook(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id=None, hook_id=None, url=None, is_hidden=None):
        """
        BBWebHook - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_id': 'str',
            'hook_id': 'int',
            'url': 'str',
            'is_hidden': 'bool'
        }

        self.attribute_map = {
            'user_id': 'userId',
            'hook_id': 'hookId',
            'url': 'url',
            'is_hidden': 'isHidden'
        }

        self._user_id = user_id
        self._hook_id = hook_id
        self._url = url
        self._is_hidden = is_hidden

    @property
    def user_id(self):
        """
        Gets the user_id of this BBWebHook.
        The user to whom the webhook belongs

        :return: The user_id of this BBWebHook.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this BBWebHook.
        The user to whom the webhook belongs

        :param user_id: The user_id of this BBWebHook.
        :type: str
        """

        self._user_id = user_id

    @property
    def hook_id(self):
        """
        Gets the hook_id of this BBWebHook.
        The id of the hook

        :return: The hook_id of this BBWebHook.
        :rtype: int
        """
        return self._hook_id

    @hook_id.setter
    def hook_id(self, hook_id):
        """
        Sets the hook_id of this BBWebHook.
        The id of the hook

        :param hook_id: The hook_id of this BBWebHook.
        :type: int
        """

        self._hook_id = hook_id

    @property
    def url(self):
        """
        Gets the url of this BBWebHook.
        the url to send hook requests to

        :return: The url of this BBWebHook.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this BBWebHook.
        the url to send hook requests to

        :param url: The url of this BBWebHook.
        :type: str
        """

        self._url = url

    @property
    def is_hidden(self):
        """
        Gets the is_hidden of this BBWebHook.
        Whether the hook is displayed to the user

        :return: The is_hidden of this BBWebHook.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """
        Sets the is_hidden of this BBWebHook.
        Whether the hook is displayed to the user

        :param is_hidden: The is_hidden of this BBWebHook.
        :type: bool
        """

        self._is_hidden = is_hidden

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
