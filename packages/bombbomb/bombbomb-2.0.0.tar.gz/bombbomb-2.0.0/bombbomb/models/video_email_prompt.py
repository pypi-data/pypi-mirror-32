# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VideoEmailPrompt(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, template_id=None, email_subject_line=None, email_content=None, contact_id=None, to_lists=None, prompt_intro=None, example_video_id=None, followup_video_id=None, send_without_video=None, video_due_date=None, prompt_bot_id=None, apply_template=None, facebook_message=None, twitter_message=None, linkedin_message=None, alternate_content_id=None, jericho_id=None, prompt_subject=None, prompt_html=None, scheduled_send_date=None, client_group_id=None, thumbnail_url=None, created_date=None, last_notified=None, send_mechanism=None, send_types=None):
        """
        VideoEmailPrompt - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'template_id': 'str',
            'email_subject_line': 'str',
            'email_content': 'str',
            'contact_id': 'str',
            'to_lists': 'list[str]',
            'prompt_intro': 'str',
            'example_video_id': 'str',
            'followup_video_id': 'str',
            'send_without_video': 'bool',
            'video_due_date': 'datetime',
            'video_id': 'str',
            'email_id': 'str',
            'job_id': 'str',
            'prompt_bot_id': 'str',
            'apply_template': 'bool',
            'facebook_message': 'str',
            'twitter_message': 'str',
            'linkedin_message': 'str',
            'alternate_content_id': 'str',
            'id': 'str',
            'user_id': 'str',
            'jericho_id': 'str',
            'prompt_subject': 'str',
            'prompt_html': 'str',
            'scheduled_send_date': 'datetime',
            'client_group_id': 'str',
            'thumbnail_url': 'str',
            'status': 'int',
            'created_date': 'datetime',
            'last_notified': 'datetime',
            'send_mechanism': 'datetime',
            'send_types': 'list[str]'
        }

        self.attribute_map = {
            'template_id': 'templateId',
            'email_subject_line': 'emailSubjectLine',
            'email_content': 'emailContent',
            'contact_id': 'contactId',
            'to_lists': 'toLists',
            'prompt_intro': 'promptIntro',
            'example_video_id': 'exampleVideoId',
            'followup_video_id': 'followupVideoId',
            'send_without_video': 'sendWithoutVideo',
            'video_due_date': 'videoDueDate',
            'video_id': 'videoId',
            'email_id': 'emailId',
            'job_id': 'jobId',
            'prompt_bot_id': 'promptBotId',
            'apply_template': 'applyTemplate',
            'facebook_message': 'facebookMessage',
            'twitter_message': 'twitterMessage',
            'linkedin_message': 'linkedinMessage',
            'alternate_content_id': 'alternateContentId',
            'id': 'id',
            'user_id': 'userId',
            'jericho_id': 'jerichoId',
            'prompt_subject': 'promptSubject',
            'prompt_html': 'promptHtml',
            'scheduled_send_date': 'scheduledSendDate',
            'client_group_id': 'clientGroupId',
            'thumbnail_url': 'thumbnailUrl',
            'status': 'status',
            'created_date': 'createdDate',
            'last_notified': 'lastNotified',
            'send_mechanism': 'sendMechanism',
            'send_types': 'sendTypes'
        }

        self._video_id = None
        self._email_id = None
        self._job_id = None
        self._id = None
        self._user_id = None
        self._status = None
        self._template_id = template_id
        self._email_subject_line = email_subject_line
        self._email_content = email_content
        self._contact_id = contact_id
        self._to_lists = to_lists
        self._prompt_intro = prompt_intro
        self._example_video_id = example_video_id
        self._followup_video_id = followup_video_id
        self._send_without_video = send_without_video
        self._video_due_date = video_due_date
        self._prompt_bot_id = prompt_bot_id
        self._apply_template = apply_template
        self._facebook_message = facebook_message
        self._twitter_message = twitter_message
        self._linkedin_message = linkedin_message
        self._alternate_content_id = alternate_content_id
        self._jericho_id = jericho_id
        self._prompt_subject = prompt_subject
        self._prompt_html = prompt_html
        self._scheduled_send_date = scheduled_send_date
        self._client_group_id = client_group_id
        self._thumbnail_url = thumbnail_url
        self._created_date = created_date
        self._last_notified = last_notified
        self._send_mechanism = send_mechanism
        self._send_types = send_types

    @property
    def template_id(self):
        """
        Gets the template_id of this VideoEmailPrompt.
        Optional. The email template to be used in the sent email, if none supplied, the users' default will be applied.

        :return: The template_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """
        Sets the template_id of this VideoEmailPrompt.
        Optional. The email template to be used in the sent email, if none supplied, the users' default will be applied.

        :param template_id: The template_id of this VideoEmailPrompt.
        :type: str
        """

        self._template_id = template_id

    @property
    def email_subject_line(self):
        """
        Gets the email_subject_line of this VideoEmailPrompt.
        The subject line of the final email

        :return: The email_subject_line of this VideoEmailPrompt.
        :rtype: str
        """
        return self._email_subject_line

    @email_subject_line.setter
    def email_subject_line(self, email_subject_line):
        """
        Sets the email_subject_line of this VideoEmailPrompt.
        The subject line of the final email

        :param email_subject_line: The email_subject_line of this VideoEmailPrompt.
        :type: str
        """

        self._email_subject_line = email_subject_line

    @property
    def email_content(self):
        """
        Gets the email_content of this VideoEmailPrompt.
        The HTML content of the final email

        :return: The email_content of this VideoEmailPrompt.
        :rtype: str
        """
        return self._email_content

    @email_content.setter
    def email_content(self, email_content):
        """
        Sets the email_content of this VideoEmailPrompt.
        The HTML content of the final email

        :param email_content: The email_content of this VideoEmailPrompt.
        :type: str
        """

        self._email_content = email_content

    @property
    def contact_id(self):
        """
        Gets the contact_id of this VideoEmailPrompt.
        Contact Id to send the final email to

        :return: The contact_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """
        Sets the contact_id of this VideoEmailPrompt.
        Contact Id to send the final email to

        :param contact_id: The contact_id of this VideoEmailPrompt.
        :type: str
        """

        self._contact_id = contact_id

    @property
    def to_lists(self):
        """
        Gets the to_lists of this VideoEmailPrompt.
        List Ids to send the final email to

        :return: The to_lists of this VideoEmailPrompt.
        :rtype: list[str]
        """
        return self._to_lists

    @to_lists.setter
    def to_lists(self, to_lists):
        """
        Sets the to_lists of this VideoEmailPrompt.
        List Ids to send the final email to

        :param to_lists: The to_lists of this VideoEmailPrompt.
        :type: list[str]
        """

        self._to_lists = to_lists

    @property
    def prompt_intro(self):
        """
        Gets the prompt_intro of this VideoEmailPrompt.
        A paragraph intro statement about the purpose of the email you're recording a video for.

        :return: The prompt_intro of this VideoEmailPrompt.
        :rtype: str
        """
        return self._prompt_intro

    @prompt_intro.setter
    def prompt_intro(self, prompt_intro):
        """
        Sets the prompt_intro of this VideoEmailPrompt.
        A paragraph intro statement about the purpose of the email you're recording a video for.

        :param prompt_intro: The prompt_intro of this VideoEmailPrompt.
        :type: str
        """

        self._prompt_intro = prompt_intro

    @property
    def example_video_id(self):
        """
        Gets the example_video_id of this VideoEmailPrompt.
        An example or explanatory video to help the user understand what to say.

        :return: The example_video_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._example_video_id

    @example_video_id.setter
    def example_video_id(self, example_video_id):
        """
        Sets the example_video_id of this VideoEmailPrompt.
        An example or explanatory video to help the user understand what to say.

        :param example_video_id: The example_video_id of this VideoEmailPrompt.
        :type: str
        """

        self._example_video_id = example_video_id

    @property
    def followup_video_id(self):
        """
        Gets the followup_video_id of this VideoEmailPrompt.
        An example or explanatory video to help the user understand what to say.

        :return: The followup_video_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._followup_video_id

    @followup_video_id.setter
    def followup_video_id(self, followup_video_id):
        """
        Sets the followup_video_id of this VideoEmailPrompt.
        An example or explanatory video to help the user understand what to say.

        :param followup_video_id: The followup_video_id of this VideoEmailPrompt.
        :type: str
        """

        self._followup_video_id = followup_video_id

    @property
    def send_without_video(self):
        """
        Gets the send_without_video of this VideoEmailPrompt.
        Whether to send the email if no video is recorded. If set to require a video, and none is added before the videoDueDate, the prompt is cancelled.

        :return: The send_without_video of this VideoEmailPrompt.
        :rtype: bool
        """
        return self._send_without_video

    @send_without_video.setter
    def send_without_video(self, send_without_video):
        """
        Sets the send_without_video of this VideoEmailPrompt.
        Whether to send the email if no video is recorded. If set to require a video, and none is added before the videoDueDate, the prompt is cancelled.

        :param send_without_video: The send_without_video of this VideoEmailPrompt.
        :type: bool
        """

        self._send_without_video = send_without_video

    @property
    def video_due_date(self):
        """
        Gets the video_due_date of this VideoEmailPrompt.
        When the video must be recorded by

        :return: The video_due_date of this VideoEmailPrompt.
        :rtype: datetime
        """
        return self._video_due_date

    @video_due_date.setter
    def video_due_date(self, video_due_date):
        """
        Sets the video_due_date of this VideoEmailPrompt.
        When the video must be recorded by

        :param video_due_date: The video_due_date of this VideoEmailPrompt.
        :type: datetime
        """

        self._video_due_date = video_due_date

    @property
    def video_id(self):
        """
        Gets the video_id of this VideoEmailPrompt.
        The video that was added to the prompt. Read Only.

        :return: The video_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._video_id

    @property
    def email_id(self):
        """
        Gets the email_id of this VideoEmailPrompt.
        The email that was created by the prompt Read Only.

        :return: The email_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._email_id

    @property
    def job_id(self):
        """
        Gets the job_id of this VideoEmailPrompt.
        The job sent by the prompt Read Only.

        :return: The job_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._job_id

    @property
    def prompt_bot_id(self):
        """
        Gets the prompt_bot_id of this VideoEmailPrompt.
        The bot that created the prompt.

        :return: The prompt_bot_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._prompt_bot_id

    @prompt_bot_id.setter
    def prompt_bot_id(self, prompt_bot_id):
        """
        Sets the prompt_bot_id of this VideoEmailPrompt.
        The bot that created the prompt.

        :param prompt_bot_id: The prompt_bot_id of this VideoEmailPrompt.
        :type: str
        """

        self._prompt_bot_id = prompt_bot_id

    @property
    def apply_template(self):
        """
        Gets the apply_template of this VideoEmailPrompt.
        Controls whether a user template is applied to the message as it is sent

        :return: The apply_template of this VideoEmailPrompt.
        :rtype: bool
        """
        return self._apply_template

    @apply_template.setter
    def apply_template(self, apply_template):
        """
        Sets the apply_template of this VideoEmailPrompt.
        Controls whether a user template is applied to the message as it is sent

        :param apply_template: The apply_template of this VideoEmailPrompt.
        :type: bool
        """

        self._apply_template = apply_template

    @property
    def facebook_message(self):
        """
        Gets the facebook_message of this VideoEmailPrompt.
        The facebook message to be passed off to social sender

        :return: The facebook_message of this VideoEmailPrompt.
        :rtype: str
        """
        return self._facebook_message

    @facebook_message.setter
    def facebook_message(self, facebook_message):
        """
        Sets the facebook_message of this VideoEmailPrompt.
        The facebook message to be passed off to social sender

        :param facebook_message: The facebook_message of this VideoEmailPrompt.
        :type: str
        """

        self._facebook_message = facebook_message

    @property
    def twitter_message(self):
        """
        Gets the twitter_message of this VideoEmailPrompt.
        The twitter message to be passed off to social sender

        :return: The twitter_message of this VideoEmailPrompt.
        :rtype: str
        """
        return self._twitter_message

    @twitter_message.setter
    def twitter_message(self, twitter_message):
        """
        Sets the twitter_message of this VideoEmailPrompt.
        The twitter message to be passed off to social sender

        :param twitter_message: The twitter_message of this VideoEmailPrompt.
        :type: str
        """

        self._twitter_message = twitter_message

    @property
    def linkedin_message(self):
        """
        Gets the linkedin_message of this VideoEmailPrompt.
        The linkedin message to be passed off to social sender

        :return: The linkedin_message of this VideoEmailPrompt.
        :rtype: str
        """
        return self._linkedin_message

    @linkedin_message.setter
    def linkedin_message(self, linkedin_message):
        """
        Sets the linkedin_message of this VideoEmailPrompt.
        The linkedin message to be passed off to social sender

        :param linkedin_message: The linkedin_message of this VideoEmailPrompt.
        :type: str
        """

        self._linkedin_message = linkedin_message

    @property
    def alternate_content_id(self):
        """
        Gets the alternate_content_id of this VideoEmailPrompt.
        The id for the alternate content id

        :return: The alternate_content_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._alternate_content_id

    @alternate_content_id.setter
    def alternate_content_id(self, alternate_content_id):
        """
        Sets the alternate_content_id of this VideoEmailPrompt.
        The id for the alternate content id

        :param alternate_content_id: The alternate_content_id of this VideoEmailPrompt.
        :type: str
        """

        self._alternate_content_id = alternate_content_id

    @property
    def id(self):
        """
        Gets the id of this VideoEmailPrompt.
        The identifier of the prompt. Read Only.

        :return: The id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._id

    @property
    def user_id(self):
        """
        Gets the user_id of this VideoEmailPrompt.
        The prompt's owner. Read Only.

        :return: The user_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._user_id

    @property
    def jericho_id(self):
        """
        Gets the jericho_id of this VideoEmailPrompt.
        If sent in a jericho context, this will have the jericho id

        :return: The jericho_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._jericho_id

    @jericho_id.setter
    def jericho_id(self, jericho_id):
        """
        Sets the jericho_id of this VideoEmailPrompt.
        If sent in a jericho context, this will have the jericho id

        :param jericho_id: The jericho_id of this VideoEmailPrompt.
        :type: str
        """

        self._jericho_id = jericho_id

    @property
    def prompt_subject(self):
        """
        Gets the prompt_subject of this VideoEmailPrompt.
        The prompt's subject line

        :return: The prompt_subject of this VideoEmailPrompt.
        :rtype: str
        """
        return self._prompt_subject

    @prompt_subject.setter
    def prompt_subject(self, prompt_subject):
        """
        Sets the prompt_subject of this VideoEmailPrompt.
        The prompt's subject line

        :param prompt_subject: The prompt_subject of this VideoEmailPrompt.
        :type: str
        """

        self._prompt_subject = prompt_subject

    @property
    def prompt_html(self):
        """
        Gets the prompt_html of this VideoEmailPrompt.
        The suggested script of the prompt.

        :return: The prompt_html of this VideoEmailPrompt.
        :rtype: str
        """
        return self._prompt_html

    @prompt_html.setter
    def prompt_html(self, prompt_html):
        """
        Sets the prompt_html of this VideoEmailPrompt.
        The suggested script of the prompt.

        :param prompt_html: The prompt_html of this VideoEmailPrompt.
        :type: str
        """

        self._prompt_html = prompt_html

    @property
    def scheduled_send_date(self):
        """
        Gets the scheduled_send_date of this VideoEmailPrompt.
        When the final email is scheduled to be sent

        :return: The scheduled_send_date of this VideoEmailPrompt.
        :rtype: datetime
        """
        return self._scheduled_send_date

    @scheduled_send_date.setter
    def scheduled_send_date(self, scheduled_send_date):
        """
        Sets the scheduled_send_date of this VideoEmailPrompt.
        When the final email is scheduled to be sent

        :param scheduled_send_date: The scheduled_send_date of this VideoEmailPrompt.
        :type: datetime
        """

        self._scheduled_send_date = scheduled_send_date

    @property
    def client_group_id(self):
        """
        Gets the client_group_id of this VideoEmailPrompt.
        The client group campaign that created the prompt.

        :return: The client_group_id of this VideoEmailPrompt.
        :rtype: str
        """
        return self._client_group_id

    @client_group_id.setter
    def client_group_id(self, client_group_id):
        """
        Sets the client_group_id of this VideoEmailPrompt.
        The client group campaign that created the prompt.

        :param client_group_id: The client_group_id of this VideoEmailPrompt.
        :type: str
        """

        self._client_group_id = client_group_id

    @property
    def thumbnail_url(self):
        """
        Gets the thumbnail_url of this VideoEmailPrompt.
        The URL of a thumbnail image for this prompt

        :return: The thumbnail_url of this VideoEmailPrompt.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """
        Sets the thumbnail_url of this VideoEmailPrompt.
        The URL of a thumbnail image for this prompt

        :param thumbnail_url: The thumbnail_url of this VideoEmailPrompt.
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def status(self):
        """
        Gets the status of this VideoEmailPrompt.
        The status of the prompt: created = 0, sent = 10, recorded = 20, job_created = 30, timed_out = 40, declined = 50 Read Only

        :return: The status of this VideoEmailPrompt.
        :rtype: int
        """
        return self._status

    @property
    def created_date(self):
        """
        Gets the created_date of this VideoEmailPrompt.
        When the email was first sent out

        :return: The created_date of this VideoEmailPrompt.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this VideoEmailPrompt.
        When the email was first sent out

        :param created_date: The created_date of this VideoEmailPrompt.
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_notified(self):
        """
        Gets the last_notified of this VideoEmailPrompt.
        When the user was last notified about a prompt email waiting for a video

        :return: The last_notified of this VideoEmailPrompt.
        :rtype: datetime
        """
        return self._last_notified

    @last_notified.setter
    def last_notified(self, last_notified):
        """
        Sets the last_notified of this VideoEmailPrompt.
        When the user was last notified about a prompt email waiting for a video

        :param last_notified: The last_notified of this VideoEmailPrompt.
        :type: datetime
        """

        self._last_notified = last_notified

    @property
    def send_mechanism(self):
        """
        Gets the send_mechanism of this VideoEmailPrompt.
        The sendMechanism property

        :return: The send_mechanism of this VideoEmailPrompt.
        :rtype: datetime
        """
        return self._send_mechanism

    @send_mechanism.setter
    def send_mechanism(self, send_mechanism):
        """
        Sets the send_mechanism of this VideoEmailPrompt.
        The sendMechanism property

        :param send_mechanism: The send_mechanism of this VideoEmailPrompt.
        :type: datetime
        """

        self._send_mechanism = send_mechanism

    @property
    def send_types(self):
        """
        Gets the send_types of this VideoEmailPrompt.
        The types of mechanisms this prompt can send.

        :return: The send_types of this VideoEmailPrompt.
        :rtype: list[str]
        """
        return self._send_types

    @send_types.setter
    def send_types(self, send_types):
        """
        Sets the send_types of this VideoEmailPrompt.
        The types of mechanisms this prompt can send.

        :param send_types: The send_types of this VideoEmailPrompt.
        :type: list[str]
        """

        self._send_types = send_types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
