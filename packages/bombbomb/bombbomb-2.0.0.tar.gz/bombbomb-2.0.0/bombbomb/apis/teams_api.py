# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TeamsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_team_member(self, team_id, **kwargs):
        """
        Add Member to Team
        Adds a member to a team.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_team_member(team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param bool admin: Set if the user is an admin of this team.
        :param str subgroup_ids: Subgroup IDs to add user to
        :param str user_email: The email of the member being added to the team.
        :param str user_id: The user id of the member being added to the team.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_team_member_with_http_info(team_id, **kwargs)
        else:
            (data) = self.add_team_member_with_http_info(team_id, **kwargs)
            return data

    def add_team_member_with_http_info(self, team_id, **kwargs):
        """
        Add Member to Team
        Adds a member to a team.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_team_member_with_http_info(team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param bool admin: Set if the user is an admin of this team.
        :param str subgroup_ids: Subgroup IDs to add user to
        :param str user_email: The email of the member being added to the team.
        :param str user_id: The user id of the member being added to the team.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'admin', 'subgroup_ids', 'user_email', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_team_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `add_team_member`")

        resource_path = '/team/{teamId}/member'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'admin' in params:
            form_params.append(('admin', params['admin']))
        if 'subgroup_ids' in params:
            form_params.append(('subgroupIds', params['subgroup_ids']))
        if 'user_email' in params:
            form_params.append(('userEmail', params['user_email']))
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_users(self, team_id, user_details, **kwargs):
        """
        Add users to group.
        Add a new or existing user to group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_users(team_id, user_details, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str user_details: Array of emails or objects containing details needed to create user (required)
        :param str send_welcome_email: Whether to send welcome email to new users
        :param str subgroup_ids: Subgroup IDs to add user to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_users_with_http_info(team_id, user_details, **kwargs)
        else:
            (data) = self.add_users_with_http_info(team_id, user_details, **kwargs)
            return data

    def add_users_with_http_info(self, team_id, user_details, **kwargs):
        """
        Add users to group.
        Add a new or existing user to group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_users_with_http_info(team_id, user_details, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str user_details: Array of emails or objects containing details needed to create user (required)
        :param str send_welcome_email: Whether to send welcome email to new users
        :param str subgroup_ids: Subgroup IDs to add user to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'user_details', 'send_welcome_email', 'subgroup_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `add_users`")
        # verify the required parameter 'user_details' is set
        if ('user_details' not in params) or (params['user_details'] is None):
            raise ValueError("Missing the required parameter `user_details` when calling `add_users`")

        resource_path = '/team/{teamId}/members'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_details' in params:
            form_params.append(('userDetails', params['user_details']))
        if 'send_welcome_email' in params:
            form_params.append(('sendWelcomeEmail', params['send_welcome_email']))
        if 'subgroup_ids' in params:
            form_params.append(('subgroupIds', params['subgroup_ids']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_users_from_csv(self, team_id, csv_import_id, map, **kwargs):
        """
        Add members to group from CSV
        Imports members to a group from a given CSV ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_users_from_csv(team_id, csv_import_id, map, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str csv_import_id: ID of the CSV to import (required)
        :param str map: Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
        :param str send_welcome_email: Whether to send welcome email to new users
        :param str subgroup_ids: Subgroup IDs to add user to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_users_from_csv_with_http_info(team_id, csv_import_id, map, **kwargs)
        else:
            (data) = self.add_users_from_csv_with_http_info(team_id, csv_import_id, map, **kwargs)
            return data

    def add_users_from_csv_with_http_info(self, team_id, csv_import_id, map, **kwargs):
        """
        Add members to group from CSV
        Imports members to a group from a given CSV ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_users_from_csv_with_http_info(team_id, csv_import_id, map, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str csv_import_id: ID of the CSV to import (required)
        :param str map: Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
        :param str send_welcome_email: Whether to send welcome email to new users
        :param str subgroup_ids: Subgroup IDs to add user to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'csv_import_id', 'map', 'send_welcome_email', 'subgroup_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_users_from_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `add_users_from_csv`")
        # verify the required parameter 'csv_import_id' is set
        if ('csv_import_id' not in params) or (params['csv_import_id'] is None):
            raise ValueError("Missing the required parameter `csv_import_id` when calling `add_users_from_csv`")
        # verify the required parameter 'map' is set
        if ('map' not in params) or (params['map'] is None):
            raise ValueError("Missing the required parameter `map` when calling `add_users_from_csv`")

        resource_path = '/team/{teamId}/members/csv'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'csv_import_id' in params:
            form_params.append(('csvImportId', params['csv_import_id']))
        if 'map' in params:
            form_params.append(('map', params['map']))
        if 'send_welcome_email' in params:
            form_params.append(('sendWelcomeEmail', params['send_welcome_email']))
        if 'subgroup_ids' in params:
            form_params.append(('subgroupIds', params['subgroup_ids']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def cancel_jericho_send(self, jericho_id, **kwargs):
        """
        Cancel a Jericho Send
        Cancels a scheduled Jericho send from being sent.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_jericho_send(jericho_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str jericho_id: ID of the Jericho Job to cancel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cancel_jericho_send_with_http_info(jericho_id, **kwargs)
        else:
            (data) = self.cancel_jericho_send_with_http_info(jericho_id, **kwargs)
            return data

    def cancel_jericho_send_with_http_info(self, jericho_id, **kwargs):
        """
        Cancel a Jericho Send
        Cancels a scheduled Jericho send from being sent.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_jericho_send_with_http_info(jericho_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str jericho_id: ID of the Jericho Job to cancel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jericho_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_jericho_send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jericho_id' is set
        if ('jericho_id' not in params) or (params['jericho_id'] is None):
            raise ValueError("Missing the required parameter `jericho_id` when calling `cancel_jericho_send`")

        resource_path = '/team/{teamId}/jericho/{jerichoId}'.replace('{format}', 'json')
        path_params = {}
        if 'jericho_id' in params:
            path_params['jerichoId'] = params['jericho_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_subteam(self, team_id, name, **kwargs):
        """
        Add a Subteam
        Adds a subteam to a parent team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_subteam(team_id, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str name: The subteam's name. (required)
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_subteam_with_http_info(team_id, name, **kwargs)
        else:
            (data) = self.create_subteam_with_http_info(team_id, name, **kwargs)
            return data

    def create_subteam_with_http_info(self, team_id, name, **kwargs):
        """
        Add a Subteam
        Adds a subteam to a parent team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_subteam_with_http_info(team_id, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str name: The subteam's name. (required)
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subteam" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `create_subteam`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_subteam`")

        resource_path = '/team/{teamId}/subteam'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamPublicRepresentation',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_subteam(self, team_id, subteam_id, **kwargs):
        """
        Delete Subteam
        Deletes a subteam

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_subteam(team_id, subteam_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str subteam_id: The subteam you wish to delete. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_subteam_with_http_info(team_id, subteam_id, **kwargs)
        else:
            (data) = self.delete_subteam_with_http_info(team_id, subteam_id, **kwargs)
            return data

    def delete_subteam_with_http_info(self, team_id, subteam_id, **kwargs):
        """
        Delete Subteam
        Deletes a subteam

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_subteam_with_http_info(team_id, subteam_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str subteam_id: The subteam you wish to delete. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'subteam_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subteam" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `delete_subteam`")
        # verify the required parameter 'subteam_id' is set
        if ('subteam_id' not in params) or (params['subteam_id'] is None):
            raise ValueError("Missing the required parameter `subteam_id` when calling `delete_subteam`")

        resource_path = '/team/{teamId}/subteam'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subteam_id' in params:
            form_params.append(('subteamId', params['subteam_id']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_client_group_associations(self, client_id, **kwargs):
        """
        Lists team associations
        Returns a collection of team associations for a given user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_client_group_associations(client_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: The clientId requesting group associations. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_client_group_associations_with_http_info(client_id, **kwargs)
        else:
            (data) = self.get_all_client_group_associations_with_http_info(client_id, **kwargs)
            return data

    def get_all_client_group_associations_with_http_info(self, client_id, **kwargs):
        """
        Lists team associations
        Returns a collection of team associations for a given user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_client_group_associations_with_http_info(client_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: The clientId requesting group associations. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_client_group_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_all_client_group_associations`")

        resource_path = '/team/associations/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'client_id' in params:
            query_params['clientId'] = params['client_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_client_group_assets(self, asset_type, **kwargs):
        """
        Lists team assets
        Returns a collection of assets

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_client_group_assets(asset_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str asset_type: The type of assets. (required)
        :param str team_id: The team containing the assets.
        :param str auto_tag_name: The auto tag name containing the assets.
        :param str page_size: The number of items to retrieve in a single db query.
        :param str page: Zero-based index of the page of data to retrieve from the db.
        :param str search: Search words.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_client_group_assets_with_http_info(asset_type, **kwargs)
        else:
            (data) = self.get_client_group_assets_with_http_info(asset_type, **kwargs)
            return data

    def get_client_group_assets_with_http_info(self, asset_type, **kwargs):
        """
        Lists team assets
        Returns a collection of assets

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_client_group_assets_with_http_info(asset_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str asset_type: The type of assets. (required)
        :param str team_id: The team containing the assets.
        :param str auto_tag_name: The auto tag name containing the assets.
        :param str page_size: The number of items to retrieve in a single db query.
        :param str page: Zero-based index of the page of data to retrieve from the db.
        :param str search: Search words.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_type', 'team_id', 'auto_tag_name', 'page_size', 'page', 'search']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_group_assets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_type' is set
        if ('asset_type' not in params) or (params['asset_type'] is None):
            raise ValueError("Missing the required parameter `asset_type` when calling `get_client_group_assets`")

        resource_path = '/team/assets/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'asset_type' in params:
            query_params['assetType'] = params['asset_type']
        if 'team_id' in params:
            query_params['teamId'] = params['team_id']
        if 'auto_tag_name' in params:
            query_params['autoTagName'] = params['auto_tag_name']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'search' in params:
            query_params['search'] = params['search']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_client_group_statistics(self, team_id, **kwargs):
        """
        Get Team statistics
        Get top level statistic data for a Team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_client_group_statistics(team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str member_status: The status of members to query for
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_client_group_statistics_with_http_info(team_id, **kwargs)
        else:
            (data) = self.get_client_group_statistics_with_http_info(team_id, **kwargs)
            return data

    def get_client_group_statistics_with_http_info(self, team_id, **kwargs):
        """
        Get Team statistics
        Get top level statistic data for a Team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_client_group_statistics_with_http_info(team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str member_status: The status of members to query for
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'member_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_group_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_client_group_statistics`")

        resource_path = '/team/{teamId}/stats'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}
        if 'member_status' in params:
            query_params['memberStatus'] = params['member_status']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_jericho_sends(self, team_id, **kwargs):
        """
        List Jericho Sends
        Lists Jericho sends, both pending and sent.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_jericho_sends(team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team whose Jericho sends you wish to see. (required)
        :return: list[JerichoConfiguration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_jericho_sends_with_http_info(team_id, **kwargs)
        else:
            (data) = self.get_jericho_sends_with_http_info(team_id, **kwargs)
            return data

    def get_jericho_sends_with_http_info(self, team_id, **kwargs):
        """
        List Jericho Sends
        Lists Jericho sends, both pending and sent.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_jericho_sends_with_http_info(team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team whose Jericho sends you wish to see. (required)
        :return: list[JerichoConfiguration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jericho_sends" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_jericho_sends`")

        resource_path = '/team/{teamId}/jericho'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[JerichoConfiguration]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_jericho_stats(self, jericho_id, team_id, **kwargs):
        """
        Gets Jericho performance statistics
        Returns an aggregate view of the performance of a Jericho send

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_jericho_stats(jericho_id, team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str jericho_id: ID of the Jericho job (required)
        :param str team_id: ID of team through which Jericho was sent (required)
        :return: JerichoPerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_jericho_stats_with_http_info(jericho_id, team_id, **kwargs)
        else:
            (data) = self.get_jericho_stats_with_http_info(jericho_id, team_id, **kwargs)
            return data

    def get_jericho_stats_with_http_info(self, jericho_id, team_id, **kwargs):
        """
        Gets Jericho performance statistics
        Returns an aggregate view of the performance of a Jericho send

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_jericho_stats_with_http_info(jericho_id, team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str jericho_id: ID of the Jericho job (required)
        :param str team_id: ID of team through which Jericho was sent (required)
        :return: JerichoPerformance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jericho_id', 'team_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jericho_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jericho_id' is set
        if ('jericho_id' not in params) or (params['jericho_id'] is None):
            raise ValueError("Missing the required parameter `jericho_id` when calling `get_jericho_stats`")
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_jericho_stats`")

        resource_path = '/team/{teamId}/jericho/{jerichoId}/performance'.replace('{format}', 'json')
        path_params = {}
        if 'jericho_id' in params:
            path_params['jerichoId'] = params['jericho_id']
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JerichoPerformance',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_paged_client_group_members(self, team_id, page_size, page, **kwargs):
        """
        List Team Members
        Get a paginated listing of Team members

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_paged_client_group_members(team_id, page_size, page, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str page_size: Amount of records to return in a page. (required)
        :param str page: The page to return. (required)
        :param str status: The status type to filter by.
        :param str search: Filter results with names that match the search term.
        :param str order_by: Key to order results by
        :param str order_direction: ASC or DESC
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_paged_client_group_members_with_http_info(team_id, page_size, page, **kwargs)
        else:
            (data) = self.get_paged_client_group_members_with_http_info(team_id, page_size, page, **kwargs)
            return data

    def get_paged_client_group_members_with_http_info(self, team_id, page_size, page, **kwargs):
        """
        List Team Members
        Get a paginated listing of Team members

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_paged_client_group_members_with_http_info(team_id, page_size, page, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str page_size: Amount of records to return in a page. (required)
        :param str page: The page to return. (required)
        :param str status: The status type to filter by.
        :param str search: Filter results with names that match the search term.
        :param str order_by: Key to order results by
        :param str order_direction: ASC or DESC
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'page_size', 'page', 'status', 'search', 'order_by', 'order_direction']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_paged_client_group_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_paged_client_group_members`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_paged_client_group_members`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_paged_client_group_members`")

        resource_path = '/team/{teamId}/members'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'order_by' in params:
            query_params['orderBy'] = params['order_by']
        if 'order_direction' in params:
            query_params['orderDirection'] = params['order_direction']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_subteams(self, team_id, **kwargs):
        """
        List Subteams
        Returns a collection of subteams for a parent team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subteams(team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :return: list[TeamPublicRepresentation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_subteams_with_http_info(team_id, **kwargs)
        else:
            (data) = self.get_subteams_with_http_info(team_id, **kwargs)
            return data

    def get_subteams_with_http_info(self, team_id, **kwargs):
        """
        List Subteams
        Returns a collection of subteams for a parent team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subteams_with_http_info(team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :return: list[TeamPublicRepresentation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subteams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_subteams`")

        resource_path = '/team/{teamId}/subteam'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[TeamPublicRepresentation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_team_prompt_aggregate_stats(self, client_group_id, **kwargs):
        """
        Get aggregate stats for campaigns
        Get all the campaigns aggregate stats

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_prompt_aggregate_stats(client_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_group_id: ID of the client group association (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_prompt_aggregate_stats_with_http_info(client_group_id, **kwargs)
        else:
            (data) = self.get_team_prompt_aggregate_stats_with_http_info(client_group_id, **kwargs)
            return data

    def get_team_prompt_aggregate_stats_with_http_info(self, client_group_id, **kwargs):
        """
        Get aggregate stats for campaigns
        Get all the campaigns aggregate stats

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_prompt_aggregate_stats_with_http_info(client_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_group_id: ID of the client group association (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_prompt_aggregate_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_group_id' is set
        if ('client_group_id' not in params) or (params['client_group_id'] is None):
            raise ValueError("Missing the required parameter `client_group_id` when calling `get_team_prompt_aggregate_stats`")

        resource_path = '/team/{clientGroupId}/campaign/stats'.replace('{format}', 'json')
        path_params = {}
        if 'client_group_id' in params:
            path_params['clientGroupId'] = params['client_group_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_team_prompt_campaigns(self, client_group_id, **kwargs):
        """
        Get campaigns for team
        Get campaigns for the team and their stats

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_prompt_campaigns(client_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_group_id: ID of the client group association (required)
        :param str search_term: The value to search for in prompt subject
        :param str current_page: The current page
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_prompt_campaigns_with_http_info(client_group_id, **kwargs)
        else:
            (data) = self.get_team_prompt_campaigns_with_http_info(client_group_id, **kwargs)
            return data

    def get_team_prompt_campaigns_with_http_info(self, client_group_id, **kwargs):
        """
        Get campaigns for team
        Get campaigns for the team and their stats

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_prompt_campaigns_with_http_info(client_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_group_id: ID of the client group association (required)
        :param str search_term: The value to search for in prompt subject
        :param str current_page: The current page
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_group_id', 'search_term', 'current_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_prompt_campaigns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_group_id' is set
        if ('client_group_id' not in params) or (params['client_group_id'] is None):
            raise ValueError("Missing the required parameter `client_group_id` when calling `get_team_prompt_campaigns`")

        resource_path = '/team/{clientGroupId}/campaign'.replace('{format}', 'json')
        path_params = {}
        if 'client_group_id' in params:
            path_params['clientGroupId'] = params['client_group_id']

        query_params = {}
        if 'search_term' in params:
            query_params['searchTerm'] = params['search_term']
        if 'current_page' in params:
            query_params['currentPage'] = params['current_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def invite_to_social_prompt_team(self, team_id, list_id, **kwargs):
        """
        Invite a list to join the admin's social prompt team
        Invite to Social Prompt Team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.invite_to_social_prompt_team(team_id, list_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str list_id: List to invite to the social prompt team. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.invite_to_social_prompt_team_with_http_info(team_id, list_id, **kwargs)
        else:
            (data) = self.invite_to_social_prompt_team_with_http_info(team_id, list_id, **kwargs)
            return data

    def invite_to_social_prompt_team_with_http_info(self, team_id, list_id, **kwargs):
        """
        Invite a list to join the admin's social prompt team
        Invite to Social Prompt Team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.invite_to_social_prompt_team_with_http_info(team_id, list_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str list_id: List to invite to the social prompt team. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'list_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invite_to_social_prompt_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `invite_to_social_prompt_team`")
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params) or (params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling `invite_to_social_prompt_team`")

        resource_path = '/teams/prompt/invite'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'team_id' in params:
            form_params.append(('teamId', params['team_id']))
        if 'list_id' in params:
            form_params.append(('listId', params['list_id']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def queue_jericho_send(self, config, team_id, **kwargs):
        """
        Creates a Jericho send.
        Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.queue_jericho_send(config, team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JerichoConfiguration config: JSON representing a Jericho configuration (required)
        :param str team_id: The ID of the team. (required)
        :return: JerichoConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.queue_jericho_send_with_http_info(config, team_id, **kwargs)
        else:
            (data) = self.queue_jericho_send_with_http_info(config, team_id, **kwargs)
            return data

    def queue_jericho_send_with_http_info(self, config, team_id, **kwargs):
        """
        Creates a Jericho send.
        Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.queue_jericho_send_with_http_info(config, team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param JerichoConfiguration config: JSON representing a Jericho configuration (required)
        :param str team_id: The ID of the team. (required)
        :return: JerichoConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config', 'team_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method queue_jericho_send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config' is set
        if ('config' not in params) or (params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `queue_jericho_send`")
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `queue_jericho_send`")

        resource_path = '/team/{teamId}/jericho'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'config' in params:
            body_params = params['config']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JerichoConfiguration',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_member_from_team(self, team_id, user_id, **kwargs):
        """
        Remove Member from Team
        Removes a member from a team.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_member_from_team(team_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str user_id: The user id of the member being removed. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_member_from_team_with_http_info(team_id, user_id, **kwargs)
        else:
            (data) = self.remove_member_from_team_with_http_info(team_id, user_id, **kwargs)
            return data

    def remove_member_from_team_with_http_info(self, team_id, user_id, **kwargs):
        """
        Remove Member from Team
        Removes a member from a team.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_member_from_team_with_http_info(team_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str user_id: The user id of the member being removed. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_member_from_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `remove_member_from_team`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `remove_member_from_team`")

        resource_path = '/team/{teamId}/member/{userId}'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def resend_team_member_invitation(self, team_id, member_user_id, **kwargs):
        """
        Resend invite
        Resend invitation to a member of a team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.resend_team_member_invitation(team_id, member_user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str member_user_id: The user id of the member being resent an invitation. (required)
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.resend_team_member_invitation_with_http_info(team_id, member_user_id, **kwargs)
        else:
            (data) = self.resend_team_member_invitation_with_http_info(team_id, member_user_id, **kwargs)
            return data

    def resend_team_member_invitation_with_http_info(self, team_id, member_user_id, **kwargs):
        """
        Resend invite
        Resend invitation to a member of a team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.resend_team_member_invitation_with_http_info(team_id, member_user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str member_user_id: The user id of the member being resent an invitation. (required)
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'member_user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_team_member_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `resend_team_member_invitation`")
        # verify the required parameter 'member_user_id' is set
        if ('member_user_id' not in params) or (params['member_user_id'] is None):
            raise ValueError("Missing the required parameter `member_user_id` when calling `resend_team_member_invitation`")

        resource_path = '/team/{teamId}/{memberUserId}/rewelcome'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']
        if 'member_user_id' in params:
            path_params['memberUserId'] = params['member_user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamPublicRepresentation',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_jericho_prompt_send(self, team_id, jericho_id, **kwargs):
        """
        Updates the Jericho Prompt Settings
        Updates the prompt settings based on the original email id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_jericho_prompt_send(team_id, jericho_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str jericho_id: ID of the Jericho job (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_jericho_prompt_send_with_http_info(team_id, jericho_id, **kwargs)
        else:
            (data) = self.update_jericho_prompt_send_with_http_info(team_id, jericho_id, **kwargs)
            return data

    def update_jericho_prompt_send_with_http_info(self, team_id, jericho_id, **kwargs):
        """
        Updates the Jericho Prompt Settings
        Updates the prompt settings based on the original email id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_jericho_prompt_send_with_http_info(team_id, jericho_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str jericho_id: ID of the Jericho job (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'jericho_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_jericho_prompt_send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `update_jericho_prompt_send`")
        # verify the required parameter 'jericho_id' is set
        if ('jericho_id' not in params) or (params['jericho_id'] is None):
            raise ValueError("Missing the required parameter `jericho_id` when calling `update_jericho_prompt_send`")

        resource_path = '/team/{teamId}/jericho/{jerichoId}'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']
        if 'jericho_id' in params:
            path_params['jerichoId'] = params['jericho_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_team(self, team_id, **kwargs):
        """
        Update a team
        Update fields on a team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_team(team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str name: The name of the team
        :param str state: The status of the login permissions
        :param bool subteams_can_add_members: Updates subteam member adding setting on group
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_team_with_http_info(team_id, **kwargs)
        else:
            (data) = self.update_team_with_http_info(team_id, **kwargs)
            return data

    def update_team_with_http_info(self, team_id, **kwargs):
        """
        Update a team
        Update fields on a team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_team_with_http_info(team_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str name: The name of the team
        :param str state: The status of the login permissions
        :param bool subteams_can_add_members: Updates subteam member adding setting on group
        :return: TeamPublicRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'name', 'state', 'subteams_can_add_members']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `update_team`")

        resource_path = '/team/{teamId}'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'state' in params:
            form_params.append(('state', params['state']))
        if 'subteams_can_add_members' in params:
            form_params.append(('subteamsCanAddMembers', params['subteams_can_add_members']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamPublicRepresentation',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_team_member(self, team_id, user_id, admin, **kwargs):
        """
        Update Member of Team
        Updates a member of a team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_team_member(team_id, user_id, admin, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str user_id: The user id of the member being added to the team. (required)
        :param bool admin: Set if the user is an admin of this team. (required)
        :param str permission_suite_id: Set if the user is an admin of this team.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_team_member_with_http_info(team_id, user_id, admin, **kwargs)
        else:
            (data) = self.update_team_member_with_http_info(team_id, user_id, admin, **kwargs)
            return data

    def update_team_member_with_http_info(self, team_id, user_id, admin, **kwargs):
        """
        Update Member of Team
        Updates a member of a team

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_team_member_with_http_info(team_id, user_id, admin, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_id: The team id (required)
        :param str user_id: The user id of the member being added to the team. (required)
        :param bool admin: Set if the user is an admin of this team. (required)
        :param str permission_suite_id: Set if the user is an admin of this team.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'user_id', 'admin', 'permission_suite_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_team_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `update_team_member`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_team_member`")
        # verify the required parameter 'admin' is set
        if ('admin' not in params) or (params['admin'] is None):
            raise ValueError("Missing the required parameter `admin` when calling `update_team_member`")

        resource_path = '/team/{teamId}/member'.replace('{format}', 'json')
        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))
        if 'admin' in params:
            form_params.append(('admin', params['admin']))
        if 'permission_suite_id' in params:
            form_params.append(('permissionSuiteId', params['permission_suite_id']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
