# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from bonsai.proto import generator_simulator_api_pb2 as bonsai_dot_proto_dot_generator__simulator__api__pb2


class InstructorStub(object):
  """This is the interface for the instructor.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.advance = channel.unary_unary(
        '/bonsai.proto.instructor.Instructor/advance',
        request_serializer=bonsai_dot_proto_dot_generator__simulator__api__pb2.SimulatorToServer.SerializeToString,
        response_deserializer=bonsai_dot_proto_dot_generator__simulator__api__pb2.ServerToSimulator.FromString,
        )


class InstructorServicer(object):
  """This is the interface for the instructor.
  """

  def advance(self, request, context):
    """This basically emulates the old request-reply of the old ZMQ protocol,
    except that events are truly multithreaded.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InstructorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'advance': grpc.unary_unary_rpc_method_handler(
          servicer.advance,
          request_deserializer=bonsai_dot_proto_dot_generator__simulator__api__pb2.SimulatorToServer.FromString,
          response_serializer=bonsai_dot_proto_dot_generator__simulator__api__pb2.ServerToSimulator.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bonsai.proto.instructor.Instructor', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
