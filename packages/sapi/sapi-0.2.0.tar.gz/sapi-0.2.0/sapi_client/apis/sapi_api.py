# coding: utf-8

"""
    CERN Unified Storage API

    A unified storage API for all data-storage back-ends.

    OpenAPI spec version: 3.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class SapiApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_export(self, policy, subsystem, **kwargs):
        """
        Delete the entire policy
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_export(policy, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str policy: The policy to operate on (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_export_with_http_info(policy, subsystem, **kwargs)
        else:
            (data) = self.delete_export_with_http_info(policy, subsystem, **kwargs)
            return data

    def delete_export_with_http_info(self, policy, subsystem, **kwargs):
        """
        Delete the entire policy
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_export_with_http_info(policy, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str policy: The policy to operate on (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy', 'subsystem']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy' is set
        if ('policy' not in params) or (params['policy'] is None):
            raise ValueError("Missing the required parameter `policy` when calling `delete_export`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `delete_export`")


        collection_formats = {}

        path_params = {}
        if 'policy' in params:
            path_params['policy'] = params['policy']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/export/{policy}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_export_rule(self, rule, policy, subsystem, **kwargs):
        """
        Delete rule from policy
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_export_rule(rule, policy, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule: The policy rule to operate on (required)
        :param str policy: The policy to operate on (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_export_rule_with_http_info(rule, policy, subsystem, **kwargs)
        else:
            (data) = self.delete_export_rule_with_http_info(rule, policy, subsystem, **kwargs)
            return data

    def delete_export_rule_with_http_info(self, rule, policy, subsystem, **kwargs):
        """
        Delete rule from policy
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_export_rule_with_http_info(rule, policy, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule: The policy rule to operate on (required)
        :param str policy: The policy to operate on (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule', 'policy', 'subsystem']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_export_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if ('rule' not in params) or (params['rule'] is None):
            raise ValueError("Missing the required parameter `rule` when calling `delete_export_rule`")
        # verify the required parameter 'policy' is set
        if ('policy' not in params) or (params['policy'] is None):
            raise ValueError("Missing the required parameter `policy` when calling `delete_export_rule`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `delete_export_rule`")


        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']
        if 'policy' in params:
            path_params['policy'] = params['policy']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/export/{policy}/rule/{rule}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_locks(self, host, volume_name, subsystem, **kwargs):
        """
        Force the lock for the host
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_locks(host, volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str host: the host holding the lock in question (required)
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_locks_with_http_info(host, volume_name, subsystem, **kwargs)
        else:
            (data) = self.delete_locks_with_http_info(host, volume_name, subsystem, **kwargs)
            return data

    def delete_locks_with_http_info(self, host, volume_name, subsystem, **kwargs):
        """
        Force the lock for the host
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_locks_with_http_info(host, volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str host: the host holding the lock in question (required)
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'volume_name', 'subsystem']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_locks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params) or (params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `delete_locks`")
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `delete_locks`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `delete_locks`")


        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}/locks/{host}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_snapshots(self, snapshot_name, volume_name, subsystem, **kwargs):
        """
        Delete the snapshot
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_snapshots(snapshot_name, volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str snapshot_name: The snapshot name (required)
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_snapshots_with_http_info(snapshot_name, volume_name, subsystem, **kwargs)
        else:
            (data) = self.delete_snapshots_with_http_info(snapshot_name, volume_name, subsystem, **kwargs)
            return data

    def delete_snapshots_with_http_info(self, snapshot_name, volume_name, subsystem, **kwargs):
        """
        Delete the snapshot
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_snapshots_with_http_info(snapshot_name, volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str snapshot_name: The snapshot name (required)
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_name', 'volume_name', 'subsystem']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'snapshot_name' is set
        if ('snapshot_name' not in params) or (params['snapshot_name'] is None):
            raise ValueError("Missing the required parameter `snapshot_name` when calling `delete_snapshots`")
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `delete_snapshots`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `delete_snapshots`")


        collection_formats = {}

        path_params = {}
        if 'snapshot_name' in params:
            path_params['snapshot_name'] = params['snapshot_name']
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}/snapshots/{snapshot_name}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_volume(self, volume_name, subsystem, **kwargs):
        """
        Restrict the volume named *volume_name* but do not actually delete it
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_volume(volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_volume_with_http_info(volume_name, subsystem, **kwargs)
        else:
            (data) = self.delete_volume_with_http_info(volume_name, subsystem, **kwargs)
            return data

    def delete_volume_with_http_info(self, volume_name, subsystem, **kwargs):
        """
        Restrict the volume named *volume_name* but do not actually delete it
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_volume_with_http_info(volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_name', 'subsystem']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `delete_volume`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `delete_volume`")


        collection_formats = {}

        path_params = {}
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_exports(self, subsystem, **kwargs):
        """
        Get all ACLs present on the back-end
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_exports(subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: list[ExportPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_exports_with_http_info(subsystem, **kwargs)
        else:
            (data) = self.get_all_exports_with_http_info(subsystem, **kwargs)
            return data

    def get_all_exports_with_http_info(self, subsystem, **kwargs):
        """
        Get all ACLs present on the back-end
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_exports_with_http_info(subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: list[ExportPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subsystem', 'x_fields']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_exports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `get_all_exports`")


        collection_formats = {}

        path_params = {}
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/export', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ExportPolicy]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_locks(self, volume_name, subsystem, **kwargs):
        """
        Get the host locking the volume, if any
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_locks(volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: list[Lock]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_locks_with_http_info(volume_name, subsystem, **kwargs)
        else:
            (data) = self.get_all_locks_with_http_info(volume_name, subsystem, **kwargs)
            return data

    def get_all_locks_with_http_info(self, volume_name, subsystem, **kwargs):
        """
        Get the host locking the volume, if any
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_locks_with_http_info(volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: list[Lock]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_name', 'subsystem', 'x_fields']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_locks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `get_all_locks`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `get_all_locks`")


        collection_formats = {}

        path_params = {}
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}/locks', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Lock]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_snapshots(self, volume_name, subsystem, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_snapshots(volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: list[Snapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_snapshots_with_http_info(volume_name, subsystem, **kwargs)
        else:
            (data) = self.get_all_snapshots_with_http_info(volume_name, subsystem, **kwargs)
            return data

    def get_all_snapshots_with_http_info(self, volume_name, subsystem, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_snapshots_with_http_info(volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: list[Snapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_name', 'subsystem', 'x_fields']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_snapshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `get_all_snapshots`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `get_all_snapshots`")


        collection_formats = {}

        path_params = {}
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}/snapshots', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Snapshot]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_export(self, policy, subsystem, **kwargs):
        """
        Display the rules of a given policy
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_export(policy, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str policy: The policy to operate on (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: ExportPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_export_with_http_info(policy, subsystem, **kwargs)
        else:
            (data) = self.get_export_with_http_info(policy, subsystem, **kwargs)
            return data

    def get_export_with_http_info(self, policy, subsystem, **kwargs):
        """
        Display the rules of a given policy
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_export_with_http_info(policy, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str policy: The policy to operate on (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: ExportPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy', 'subsystem', 'x_fields']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy' is set
        if ('policy' not in params) or (params['policy'] is None):
            raise ValueError("Missing the required parameter `policy` when calling `get_export`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `get_export`")


        collection_formats = {}

        path_params = {}
        if 'policy' in params:
            path_params['policy'] = params['policy']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/export/{policy}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExportPolicy',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_snapshots(self, snapshot_name, volume_name, subsystem, **kwargs):
        """
        Get the current information for a given snapshot
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_snapshots(snapshot_name, volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str snapshot_name: The snapshot name (required)
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_snapshots_with_http_info(snapshot_name, volume_name, subsystem, **kwargs)
        else:
            (data) = self.get_snapshots_with_http_info(snapshot_name, volume_name, subsystem, **kwargs)
            return data

    def get_snapshots_with_http_info(self, snapshot_name, volume_name, subsystem, **kwargs):
        """
        Get the current information for a given snapshot
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_snapshots_with_http_info(snapshot_name, volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str snapshot_name: The snapshot name (required)
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_name', 'volume_name', 'subsystem', 'x_fields']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'snapshot_name' is set
        if ('snapshot_name' not in params) or (params['snapshot_name'] is None):
            raise ValueError("Missing the required parameter `snapshot_name` when calling `get_snapshots`")
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `get_snapshots`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `get_snapshots`")


        collection_formats = {}

        path_params = {}
        if 'snapshot_name' in params:
            path_params['snapshot_name'] = params['snapshot_name']
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}/snapshots/{snapshot_name}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Snapshot',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_volume(self, volume_name, subsystem, **kwargs):
        """
        Get a specific volume by name
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_volume(volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: VolumeRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_volume_with_http_info(volume_name, subsystem, **kwargs)
        else:
            (data) = self.get_volume_with_http_info(volume_name, subsystem, **kwargs)
            return data

    def get_volume_with_http_info(self, volume_name, subsystem, **kwargs):
        """
        Get a specific volume by name
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_volume_with_http_info(volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: VolumeRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_name', 'subsystem', 'x_fields']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `get_volume`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `get_volume`")


        collection_formats = {}

        path_params = {}
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VolumeRead',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_volumes(self, subsystem, **kwargs):
        """
        Get a list of all volumes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_volumes(subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: list[VolumeRead]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_volumes_with_http_info(subsystem, **kwargs)
        else:
            (data) = self.get_volumes_with_http_info(subsystem, **kwargs)
            return data

    def get_volumes_with_http_info(self, subsystem, **kwargs):
        """
        Get a list of all volumes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_volumes_with_http_info(subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str subsystem: The subsystem to run the command on. (required)
        :param str x_fields: An optional fields mask
        :return: list[VolumeRead]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subsystem', 'x_fields']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volumes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `get_volumes`")


        collection_formats = {}

        path_params = {}
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/volumes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[VolumeRead]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def patch_volume(self, volume_name, subsystem, payload, **kwargs):
        """
        Partially update volume_name
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.patch_volume(volume_name, subsystem, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param VolumeWrite payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.patch_volume_with_http_info(volume_name, subsystem, payload, **kwargs)
        else:
            (data) = self.patch_volume_with_http_info(volume_name, subsystem, payload, **kwargs)
            return data

    def patch_volume_with_http_info(self, volume_name, subsystem, payload, **kwargs):
        """
        Partially update volume_name
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.patch_volume_with_http_info(volume_name, subsystem, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param VolumeWrite payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_name', 'subsystem', 'payload']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `patch_volume`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `patch_volume`")
        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `patch_volume`")


        collection_formats = {}

        path_params = {}
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_export(self, policy, subsystem, payload, **kwargs):
        """
        Grant hosts matching a given pattern access to the given volume
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_export(policy, subsystem, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str policy: The policy to operate on (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param PolicyRule payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_export_with_http_info(policy, subsystem, payload, **kwargs)
        else:
            (data) = self.post_export_with_http_info(policy, subsystem, payload, **kwargs)
            return data

    def post_export_with_http_info(self, policy, subsystem, payload, **kwargs):
        """
        Grant hosts matching a given pattern access to the given volume
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_export_with_http_info(policy, subsystem, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str policy: The policy to operate on (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param PolicyRule payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy', 'subsystem', 'payload']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy' is set
        if ('policy' not in params) or (params['policy'] is None):
            raise ValueError("Missing the required parameter `policy` when calling `post_export`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `post_export`")
        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `post_export`")


        collection_formats = {}

        path_params = {}
        if 'policy' in params:
            path_params['policy'] = params['policy']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/export/{policy}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_snapshots(self, snapshot_name, volume_name, subsystem, payload, **kwargs):
        """
        Create a new snapshot of *volume_name* under *snapshot_name*
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_snapshots(snapshot_name, volume_name, subsystem, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str snapshot_name: The snapshot name (required)
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param SnapshotPut payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_snapshots_with_http_info(snapshot_name, volume_name, subsystem, payload, **kwargs)
        else:
            (data) = self.post_snapshots_with_http_info(snapshot_name, volume_name, subsystem, payload, **kwargs)
            return data

    def post_snapshots_with_http_info(self, snapshot_name, volume_name, subsystem, payload, **kwargs):
        """
        Create a new snapshot of *volume_name* under *snapshot_name*
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_snapshots_with_http_info(snapshot_name, volume_name, subsystem, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str snapshot_name: The snapshot name (required)
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param SnapshotPut payload: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_name', 'volume_name', 'subsystem', 'payload']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_snapshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'snapshot_name' is set
        if ('snapshot_name' not in params) or (params['snapshot_name'] is None):
            raise ValueError("Missing the required parameter `snapshot_name` when calling `post_snapshots`")
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `post_snapshots`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `post_snapshots`")
        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `post_snapshots`")


        collection_formats = {}

        path_params = {}
        if 'snapshot_name' in params:
            path_params['snapshot_name'] = params['snapshot_name']
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}/snapshots/{snapshot_name}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_volume(self, volume_name, subsystem, payload, **kwargs):
        """
        Create a new volume with the given details.  If `from_snapshot` is a snapshot and `volume_name` already refers to an existing volume, roll back that volume to that snapshot. If `from_snapshot` is a snapshot, `from_volume` is an existing volume and `volume_name` doesn't already exist, create a clone of `from_volume` named `volume_name`, in the state at `from_snapshot`.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_volume(volume_name, subsystem, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param OptionalFromSnapshot payload: (required)
        :param str x_fields: An optional fields mask
        :return: VolumeRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_volume_with_http_info(volume_name, subsystem, payload, **kwargs)
        else:
            (data) = self.post_volume_with_http_info(volume_name, subsystem, payload, **kwargs)
            return data

    def post_volume_with_http_info(self, volume_name, subsystem, payload, **kwargs):
        """
        Create a new volume with the given details.  If `from_snapshot` is a snapshot and `volume_name` already refers to an existing volume, roll back that volume to that snapshot. If `from_snapshot` is a snapshot, `from_volume` is an existing volume and `volume_name` doesn't already exist, create a clone of `from_volume` named `volume_name`, in the state at `from_snapshot`.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_volume_with_http_info(volume_name, subsystem, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :param OptionalFromSnapshot payload: (required)
        :param str x_fields: An optional fields mask
        :return: VolumeRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_name', 'subsystem', 'payload', 'x_fields']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `post_volume`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `post_volume`")
        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `post_volume`")


        collection_formats = {}

        path_params = {}
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VolumeRead',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_export_rule(self, rule, policy, subsystem, **kwargs):
        """
        Grant hosts matching a given pattern access
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_export_rule(rule, policy, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule: The policy rule to operate on (required)
        :param str policy: The policy to operate on (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_export_rule_with_http_info(rule, policy, subsystem, **kwargs)
        else:
            (data) = self.put_export_rule_with_http_info(rule, policy, subsystem, **kwargs)
            return data

    def put_export_rule_with_http_info(self, rule, policy, subsystem, **kwargs):
        """
        Grant hosts matching a given pattern access
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_export_rule_with_http_info(rule, policy, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule: The policy rule to operate on (required)
        :param str policy: The policy to operate on (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule', 'policy', 'subsystem']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_export_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if ('rule' not in params) or (params['rule'] is None):
            raise ValueError("Missing the required parameter `rule` when calling `put_export_rule`")
        # verify the required parameter 'policy' is set
        if ('policy' not in params) or (params['policy'] is None):
            raise ValueError("Missing the required parameter `policy` when calling `put_export_rule`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `put_export_rule`")


        collection_formats = {}

        path_params = {}
        if 'rule' in params:
            path_params['rule'] = params['rule']
        if 'policy' in params:
            path_params['policy'] = params['policy']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/export/{policy}/rule/{rule}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_locks(self, host, volume_name, subsystem, **kwargs):
        """
        Lock the volume with host holding the lock
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_locks(host, volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str host: the host holding the lock in question (required)
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_locks_with_http_info(host, volume_name, subsystem, **kwargs)
        else:
            (data) = self.put_locks_with_http_info(host, volume_name, subsystem, **kwargs)
            return data

    def put_locks_with_http_info(self, host, volume_name, subsystem, **kwargs):
        """
        Lock the volume with host holding the lock
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_locks_with_http_info(host, volume_name, subsystem, async=True)
        >>> result = thread.get()

        :param async bool
        :param str host: the host holding the lock in question (required)
        :param str volume_name: The name of the volume. Must not contain leading /. On NetApp back-ends, this may either be the name of a volume, or node_name:/junction/path. (required)
        :param str subsystem: The subsystem to run the command on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'volume_name', 'subsystem']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_locks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params) or (params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `put_locks`")
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params) or (params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `put_locks`")
        # verify the required parameter 'subsystem' is set
        if ('subsystem' not in params) or (params['subsystem'] is None):
            raise ValueError("Missing the required parameter `subsystem` when calling `put_locks`")


        collection_formats = {}

        path_params = {}
        if 'host' in params:
            path_params['host'] = params['host']
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']
        if 'subsystem' in params:
            path_params['subsystem'] = params['subsystem']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['sso']

        return self.api_client.call_api('/v3/{subsystem}/volumes/{volume_name}/locks/{host}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
