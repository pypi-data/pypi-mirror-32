import atexit

from getpass import getpass
from github import Github, GithubException
from github.NamedUser import NamedUser
from github.Repository import Repository
from msm import SkillEntry
from os import chmod

import os
from msk import __version__
from tempfile import mkstemp

from msk.exceptions import PRModified

ASKPASS = '''#!/usr/bin/env python3
import sys
print(
    "{password}"
    if sys.argv[1] == "Password for 'https://{username}@github.com': " else
    "{username}"
)'''

skills_kit_footer = '<sub>Created with [mycroft-skills-kit]({}) v{}</sub>'.format(
    'https://github.com/mycroftai/mycroft-skills-kit', __version__
)


def register_git_injector(username, password):
    """Generate a script that writes the password to the git command line tool"""
    fd, tmp_path = mkstemp()
    atexit.register(lambda: os.remove(tmp_path))

    with os.fdopen(fd, 'w') as f:
        f.write(ASKPASS.format(username=username, password=password))

    chmod(tmp_path, 0o700)
    os.environ['GIT_ASKPASS'] = tmp_path


def ask_for_github_credentials() -> Github:
    print('=== GitHub Credentials ===')
    while True:
        username = input('Username: ')
        password = getpass('Password: ')
        github = Github(username, password)
        try:
            _ = github.get_user().login
            register_git_injector(username, password)
            return github
        except GithubException:
            print('Login incorrect. Retry:')


def skill_repo_name(url: str):
    return '{}/{}'.format(SkillEntry.extract_author(url), SkillEntry.extract_repo_name(url))


def ask_input(message, validator, fail_message='Invalid entry'):
    while True:
        resp = input(message)
        try:
            if validator(resp):
                return resp
        except Exception:
            pass
        print(fail_message)


def create_or_edit_pr(title: str, body: str, skills_repo: Repository,
                      user: NamedUser, branch: str):
    base = skills_repo.default_branch
    head = '{}:{}'.format(user.login, branch)
    pulls = list(skills_repo.get_pulls(base=base, head=head))
    if pulls:
        pull = pulls[0]
        if 'mycroft-skills-kit' in pull.body:
            pull.edit(title, body)
        else:
            raise PRModified('Not updating description since it was not autogenerated')
        return pull
    else:
        return skills_repo.create_pull(title, body, base=base, head=head)
