#!python
""" Plot growth rate spectrum. """

from __future__ import (absolute_import, division,
                        print_function, unicode_literals)

__author__ = 'J.G. Chen'
__email__ = 'cjgls@pku.edu.cn'
__version__ = '3.1.0'
__date__ = '11/28/2017'
__all__ = ['gamma_plot']

import argparse
import os
from builtins import input

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
from collections import OrderedDict

import boutpy.visualization as bv
from boutpy.boututils.compare_inp import parser_config
from boutpy.boututils.functions import get_yesno, pycommand

plt.ion()
rcParams.update({'font.size': 28,
                 'legend.fontsize': 25,
                 'legend.labelspacing': 0.1,
                 'legend.frameon': False,
                 'lines.linewidth': 3,
                 'lines.markersize': 14,
                 'savefig.bbox': 'tight'})


def gamma_plot(gamma_info, xvar='ZPERIOD', yvar='gamma', exclude=None,
               colors=[], markers=[], linestyle=[], savefig=None,
               Tbar=None, filterv='gamma', threshold='< 0',
               ion=True, **kwargs):
    """Plot growth rate spectrum.

    Parameters
    ----------
    gamma_info : list
        list of files which contain growth rate information generated by
        ~bin.growthrate.py
    xvar, yvar: str, optional, default: xvar='ZPERIOD', yvar='gamma'
        x/y var in file ``gamma_info``
    Tbar : float, optional
        'gamma' renormalized with 'Tbar' to make it have same normalization
        for different case. if Tbar is ``None``, then use ``Tbar`` from
        first case.
    savefig : bool or str, optional, default: None
        if 'savefig' is bool type, then interactively input the figure name,
        if 'savefig' is string, then use it as figure name. By default, the
        figure is not saved.
    filterv : str, optional, default: 'gamma'
        filter out `yvar` according to `filterv` `threshold`. `filter` should
        exist in `gamma_info` files. if `filterv` is 'None', turn off filter.
    threshold : str, optional, default: '< 0'
    ion : bool, optional, default: True
        interactive mode on, input colors, markers and linestyle during the
        runtime.
    exclude : str, list of str
        TODO: exclude specific cases
    kwargs : keywords
        options to pass to matplotlib.pyplot.plot() method

    """

    ax = kwargs.pop('ax', None)
    cases = OrderedDict()          # dict{casen: path/to/gamma_info}
    filterout = OrderedDict()      # dict{casen: subcases filtered out}
    identities = OrderedDict()     # dict{casen: casen}
    data_all = OrderedDict()       # dict{casen: (x, y)}

    # TODO: exclude cases
    print("processing: ")

    count = 0   # case counter
    for info in gamma_info:
        info = os.path.realpath(info)
        idir = os.path.dirname(info)
        identity = idir.split('/')
        identity = identity[:-1] if identity[-1] == 'db' else identity
        ind = -1
        while '_'.join(identity[ind:]) in identities:
            ind -= 1
        else:
            identity = '_'.join(identity[ind:])

        # using ENV var to shorten the case's name
        try:
            for i in ['SCRATCH', 'CSCRATCH', 'HOME']:
                if i in os.environ.keys() and os.environ[i] in info:
                    case = info.replace(os.environ[i], "$" + i)
                    break
        except:
            case = info
            pass

        data = parser_config(info, dataframe=True).sort_values(xvar)
        # parser gamma_info successfully
        casen = 'case{}'.format(count)
        cases[casen] = case
        print('    {}: {}'.format(casen, case))
        count += 1

        identities[casen] = identity

        yvalue = data[yvar].copy()
        if yvar == 'gamma':
            # set Tbar
            if not isinstance(Tbar, (float, int)):
                Tbar = data['Tbar'][0]
            if np.all(data['Tbar'] == Tbar):
                # it is unique and same as Tbar
                pass
            else:
                print("    # renormalize gamma to Tbar: {:.3e} --> {:.3e}"
                      .format(data['Tbar'][0], Tbar))
                yvalue = yvalue / data['Tbar'] * Tbar

        # filter
        if filterv and filterv != 'None':
            findex = eval("data[filterv] {}".format(threshold))
            if any(findex):
                yvalue[findex] = 0
                filterout[casen] = data[xvar][findex]

        data_all[casen] = (data[xvar], yvalue)


    if filterout:
        print("---------- WARNING ------------")
        print("set '{}' to 0 if '{} {}'".format(yvar, filterv, threshold))
        for key, val in filterout.items():
            print("{}: {}".format(key, val.values))
        print("-------------------------------")

    colors = (colors if colors
              else ['k', 'r', 'g', 'b', 'c', 'm', 'y', 'purple'])
    markers = (markers if markers
               else ['*', 'o', 'd', 's', 'v', '>', '<', 'p'])
    linestyle = (linestyle if linestyle else '-' * 50)
    #  print("colors: ", colors)
    #  print("markers: ", markers)
    #  print("linestyle: ", linestyle)
    # plot figure
    # TODO: plot first, then check colors/markers/ls
    if ion:
        plt.ion()
    else:
        plt.ioff()
    if ax is None:
        fig = plt.figure()
        ax = plt.gca()
    else:
        fig = ax.get_figure()

    OK = False
    while not OK:
        n_ls = len(linestyle)
        n_mk = len(markers)
        n_cl = len(colors)
        if xvar == 'ZPERIOD':
            ax.set_xlabel('toroidal mode number')
        else:
            ax.set_xlabel(xvar)
        if yvar == 'gamma':
            ax.set_ylabel('$\gamma/\omega_A$')
            ax.set_title("Tbar = {:.2e} s".format(Tbar))
        else:
            ax.set_ylabel(yvar)

        for num, key in enumerate(data_all):
            ax.plot(data_all[key][0], data_all[key][1],
                    label=identities[key],
                    ls=linestyle[num % n_ls],
                    marker=markers[num % n_mk],
                    color=colors[num % n_cl],
                    **kwargs)
        l = ax.legend()
        for icolor, text in zip(colors, l.get_texts()):
            text.set_color(icolor)
        plt.tight_layout()

        if ion:
            # show figure immediately
            fig.canvas.draw()
            fig.canvas.update()
            fig.canvas.flush_events()
            plt.show(block=False)
            plt.pause(0.05)
            OK = get_yesno("colors, markers and linestyles OK?", default=True)
        else:
            OK = True

        if not OK:
            colors = input("colors: ").replace(" ", "") or colors
            if ',' in colors:
                colors = colors.split(',')
            markers = input("markers: ").replace(" ", "") or markers
            if ',' in markers:
                markers = markers.split(',')
            linestyle = input("linestyle: ").replace(" ", "") or linestyle
            if ',' in linestyle:
                linestyle = linestyle.split(',')

            #  if (len(colors) < count or len(markers) < count
                #  or len(linestyle) < count):
                #  print("colors: ", colors)
                #  print("markers: ", markers)
                #  print("linestyle: ", linestyle)
                #  raise ValueError(
                #       "not enough colors, markers or linestyles!")
            ax.clear()


    # if get_yesno("Update fig?"):
    if ion:
        pycommand("import matplotlib.pyplot as plt; import numpy as np",
                  gvars=globals(), lvars=locals())

    if savefig:
        if isinstance(savefig, str):
            figname = savefig
        else:
            figname = input("figname: ") or None
        if figname:
            bv.savefig(figname)

    """
        for section in config.sections():
            if eval("{} {}".format(config.getfloat(section, args.filter),
                                   args.threshold)):
                original = False
                filterout[identity].append(section)
            else:
                original = True

            values.append(
                 (config.getfloat(section, xvar),
                  config.getfloat(section, yvar) if original else 0,
                  section))
    """


if __name__ == '__main__':
    # execute only if run as a script
    parser = argparse.ArgumentParser(
        description='plot growth rate spectrum',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("gamma_info", nargs='*', default=['gamma_info'],
                        help="files contain gamma info")
    parser.add_argument("-x", "--xvar", nargs='?', default="ZPERIOD",
                        help="xaxis variable, `yvar` vs. `xvar`, "
                             "`xvar` should exist in `gamma_info`")
    parser.add_argument("-y", "--yvar", nargs='?', default="gamma",
                        help="yaxis variable, `yvar` vs. `xvar`, "
                             "`yvar should exist in `gamma_info")
    parser.add_argument("-C", "--Case", action='store_false',
                        help="case sensitive in `gamma_info files`")
    parser.add_argument("-f", "--filterv", nargs='?', default='gamma',
                        help="filter out `yvar` using `filterv` `threshold`")
    parser.add_argument("-s", "--savefig", action='store_false',
                        help="save figure?")
    parser.add_argument("-t", "--threshold", nargs='?', type=str,
                        default='< 0', help="threshold for the `filterv`")
    parser.add_argument("-T", "--Tbar", nargs='?', type=float,
                        help="gamma normalized to Tbar")
    parser.add_argument("-i", "--info", action='store_true',
                        help="print verbose information")

    args = parser.parse_args()

    if args.info:
        print(args)

    # TODO: casesensitive not work
    if not args.Case:
        xvar = args.xvar.lower()
        yvar = args.yvar.lower()
    else:
        xvar = args.xvar
        yvar = args.yvar

    # only keep files
    args.gamma_info = [i for i in args.gamma_info if os.path.isfile(i)]

    if len(args.gamma_info):
        gamma_plot(args.gamma_info, xvar=xvar, yvar=yvar, Tbar=args.Tbar,
                   savefig=args.savefig, filterv=args.filterv,
                   threshold=args.threshold)
