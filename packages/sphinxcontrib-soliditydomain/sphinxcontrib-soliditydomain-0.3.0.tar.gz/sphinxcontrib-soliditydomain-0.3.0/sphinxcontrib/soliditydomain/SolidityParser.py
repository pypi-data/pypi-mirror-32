# Generated from Solidity.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3x")
        buf.write("\u03a9\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\3\2\3\2\3")
        buf.write("\2\7\2\u00ac\n\2\f\2\16\2\u00af\13\2\3\2\3\2\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\4\3\4\3\5\3\5\5\5\u00bc\n\5\3\6\3\6\5\6\u00c0")
        buf.write("\n\6\3\7\3\7\3\b\5\b\u00c5\n\b\3\b\3\b\3\t\3\t\3\t\5\t")
        buf.write("\u00cc\n\t\3\n\3\n\3\n\3\n\5\n\u00d2\n\n\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u00d8\n\n\3\n\3\n\5\n\u00dc\n\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\7\n\u00e6\n\n\f\n\16\n\u00e9\13\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\5\n\u00f0\n\n\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\7\13\u00f8\n\13\f\13\16\13\u00fb\13\13\5\13\u00fd")
        buf.write("\n\13\3\13\3\13\7\13\u0101\n\13\f\13\16\13\u0104\13\13")
        buf.write("\3\13\3\13\3\f\3\f\3\f\3\f\3\f\7\f\u010d\n\f\f\f\16\f")
        buf.write("\u0110\13\f\3\f\3\f\5\f\u0114\n\f\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\5\r\u011e\n\r\3\16\3\16\7\16\u0122\n\16\f")
        buf.write("\16\16\16\u0125\13\16\3\16\3\16\3\16\5\16\u012a\n\16\3")
        buf.write("\16\3\16\3\17\3\17\3\17\3\17\3\17\5\17\u0133\n\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u013f")
        buf.write("\n\20\f\20\16\20\u0142\13\20\5\20\u0144\n\20\3\20\3\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\5\22\u0150\n")
        buf.write("\22\3\22\3\22\3\23\3\23\3\23\5\23\u0157\n\23\3\23\5\23")
        buf.write("\u015a\n\23\3\24\3\24\5\24\u015e\n\24\3\24\3\24\3\24\5")
        buf.write("\24\u0163\n\24\3\24\3\24\5\24\u0167\n\24\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0172\n\26\f\26\16")
        buf.write("\26\u0175\13\26\3\27\3\27\3\27\3\27\5\27\u017b\n\27\3")
        buf.write("\27\3\27\3\30\3\30\3\31\3\31\3\31\3\31\5\31\u0185\n\31")
        buf.write("\3\31\3\31\7\31\u0189\n\31\f\31\16\31\u018c\13\31\3\31")
        buf.write("\3\31\3\32\3\32\3\32\3\32\7\32\u0194\n\32\f\32\16\32\u0197")
        buf.write("\13\32\5\32\u0199\n\32\3\32\3\32\3\33\3\33\5\33\u019f")
        buf.write("\n\33\3\33\5\33\u01a2\n\33\3\34\3\34\3\34\3\34\7\34\u01a8")
        buf.write("\n\34\f\34\16\34\u01ab\13\34\5\34\u01ad\n\34\3\34\3\34")
        buf.write("\3\35\3\35\5\35\u01b3\n\35\3\35\5\35\u01b6\n\35\3\36\3")
        buf.write("\36\3\36\3\36\7\36\u01bc\n\36\f\36\16\36\u01bf\13\36\5")
        buf.write("\36\u01c1\n\36\3\36\3\36\3\37\3\37\5\37\u01c7\n\37\3 ")
        buf.write("\3 \5 \u01cb\n \3 \3 \3!\3!\3!\3!\3!\5!\u01d4\n!\3!\3")
        buf.write("!\3!\5!\u01d9\n!\3!\7!\u01dc\n!\f!\16!\u01df\13!\3\"\3")
        buf.write("\"\3\"\7\"\u01e4\n\"\f\"\16\"\u01e7\13\"\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3$\3$\3$\3$\3$\7$\u01f5\n$\f$\16$\u01f8\13$\3")
        buf.write("$\3$\5$\u01fc\n$\3%\3%\3&\3&\3\'\3\'\7\'\u0204\n\'\f\'")
        buf.write("\16\'\u0207\13\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\5(\u0217\n(\3)\3)\3)\3*\3*\3*\3*\3*\3*\3*\5*\u0223")
        buf.write("\n*\3+\3+\3+\3+\3+\3+\3,\3,\5,\u022d\n,\3-\3-\3-\3-\5")
        buf.write("-\u0233\n-\3-\5-\u0236\n-\3-\3-\5-\u023a\n-\3-\3-\3-\3")
        buf.write(".\3.\5.\u0241\n.\3.\3.\3/\3/\3/\3/\3/\3/\3/\3/\3\60\3")
        buf.write("\60\3\60\3\61\3\61\3\61\3\62\3\62\5\62\u0255\n\62\3\62")
        buf.write("\3\62\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\65\3\65\3\65")
        buf.write("\5\65\u0263\n\65\3\65\3\65\5\65\u0267\n\65\3\65\3\65\3")
        buf.write("\66\3\66\5\66\u026d\n\66\3\66\7\66\u0270\n\66\f\66\16")
        buf.write("\66\u0273\13\66\3\66\5\66\u0276\n\66\3\66\3\66\3\67\3")
        buf.write("\67\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3")
        buf.write("8\38\58\u028e\n8\38\38\38\38\38\38\38\38\38\38\38\38\3")
        buf.write("8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3")
        buf.write("8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3")
        buf.write("8\38\38\38\38\38\38\38\38\78\u02c9\n8\f8\168\u02cc\13")
        buf.write("8\39\39\39\39\39\39\39\59\u02d5\n9\3:\3:\3:\7:\u02da\n")
        buf.write(":\f:\16:\u02dd\13:\3;\3;\3;\7;\u02e2\n;\f;\16;\u02e5\13")
        buf.write(";\3;\5;\u02e8\n;\3<\3<\3<\3<\3=\3=\5=\u02f0\n=\3=\3=\5")
        buf.write("=\u02f4\n=\5=\u02f6\n=\3>\3>\3>\3>\3>\3?\3?\7?\u02ff\n")
        buf.write("?\f?\16?\u0302\13?\3?\3?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\5@\u0317\n@\3A\3A\5A\u031b\nA\3")
        buf.write("B\3B\3B\3B\5B\u0321\nB\3B\3B\5B\u0325\nB\3B\3B\7B\u0329")
        buf.write("\nB\fB\16B\u032c\13B\3B\5B\u032f\nB\3C\3C\3C\3C\5C\u0335")
        buf.write("\nC\3D\3D\3D\3D\3E\3E\3E\3E\3E\5E\u0340\nE\3F\3F\3F\7")
        buf.write("F\u0345\nF\fF\16F\u0348\13F\3G\3G\3G\3H\3H\3H\3I\3I\3")
        buf.write("I\7I\u0353\nI\fI\16I\u0356\13I\3J\3J\3J\3J\3J\3J\5J\u035e")
        buf.write("\nJ\3K\3K\3K\3K\5K\u0364\nK\3K\3K\5K\u0368\nK\3K\3K\3")
        buf.write("L\3L\3L\3M\3M\3M\5M\u0372\nM\3M\3M\3M\5M\u0377\nM\3M\3")
        buf.write("M\3N\3N\3N\3N\3O\3O\3P\3P\3P\3P\3Q\3Q\5Q\u0387\nQ\3Q\3")
        buf.write("Q\5Q\u038b\nQ\7Q\u038d\nQ\fQ\16Q\u0390\13Q\3Q\3Q\3Q\3")
        buf.write("Q\3Q\7Q\u0397\nQ\fQ\16Q\u039a\13Q\5Q\u039c\nQ\3Q\5Q\u039f")
        buf.write("\nQ\3R\3R\3S\3S\5S\u03a5\nS\3T\3T\3T\2\4@nU\2\4\6\b\n")
        buf.write("\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<")
        buf.write(">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\2\23\3\2\5")
        buf.write("\13\3\2\23\25\5\2jjnnpq\3\2\'(\5\2jjoors\4\2\61\65\\`")
        buf.write("\3\2\66\67\3\29:\3\2;<\4\2\16\16?@\3\2AB\3\2\7\n\3\2E")
        buf.write("F\4\2\13\13KT\5\2cdffuu\3\2cd\4\2\17\17tt\2\u03fc\2\u00ad")
        buf.write("\3\2\2\2\4\u00b2\3\2\2\2\6\u00b7\3\2\2\2\b\u00bb\3\2\2")
        buf.write("\2\n\u00bd\3\2\2\2\f\u00c1\3\2\2\2\16\u00c4\3\2\2\2\20")
        buf.write("\u00c8\3\2\2\2\22\u00ef\3\2\2\2\24\u00f1\3\2\2\2\26\u0107")
        buf.write("\3\2\2\2\30\u011d\3\2\2\2\32\u011f\3\2\2\2\34\u012d\3")
        buf.write("\2\2\2\36\u0136\3\2\2\2 \u0147\3\2\2\2\"\u014c\3\2\2\2")
        buf.write("$\u0153\3\2\2\2&\u015b\3\2\2\2(\u0168\3\2\2\2*\u0173\3")
        buf.write("\2\2\2,\u0176\3\2\2\2.\u017e\3\2\2\2\60\u0180\3\2\2\2")
        buf.write("\62\u018f\3\2\2\2\64\u019c\3\2\2\2\66\u01a3\3\2\2\28\u01b0")
        buf.write("\3\2\2\2:\u01b7\3\2\2\2<\u01c4\3\2\2\2>\u01c8\3\2\2\2")
        buf.write("@\u01d3\3\2\2\2B\u01e0\3\2\2\2D\u01e8\3\2\2\2F\u01ef\3")
        buf.write("\2\2\2H\u01fd\3\2\2\2J\u01ff\3\2\2\2L\u0201\3\2\2\2N\u0216")
        buf.write("\3\2\2\2P\u0218\3\2\2\2R\u021b\3\2\2\2T\u0224\3\2\2\2")
        buf.write("V\u022c\3\2\2\2X\u022e\3\2\2\2Z\u023e\3\2\2\2\\\u0244")
        buf.write("\3\2\2\2^\u024c\3\2\2\2`\u024f\3\2\2\2b\u0252\3\2\2\2")
        buf.write("d\u0258\3\2\2\2f\u025b\3\2\2\2h\u0262\3\2\2\2j\u026a\3")
        buf.write("\2\2\2l\u0279\3\2\2\2n\u028d\3\2\2\2p\u02d4\3\2\2\2r\u02d6")
        buf.write("\3\2\2\2t\u02de\3\2\2\2v\u02e9\3\2\2\2x\u02f5\3\2\2\2")
        buf.write("z\u02f7\3\2\2\2|\u02fc\3\2\2\2~\u0316\3\2\2\2\u0080\u031a")
        buf.write("\3\2\2\2\u0082\u0320\3\2\2\2\u0084\u0330\3\2\2\2\u0086")
        buf.write("\u0336\3\2\2\2\u0088\u033f\3\2\2\2\u008a\u0341\3\2\2\2")
        buf.write("\u008c\u0349\3\2\2\2\u008e\u034c\3\2\2\2\u0090\u034f\3")
        buf.write("\2\2\2\u0092\u035d\3\2\2\2\u0094\u035f\3\2\2\2\u0096\u036b")
        buf.write("\3\2\2\2\u0098\u036e\3\2\2\2\u009a\u037a\3\2\2\2\u009c")
        buf.write("\u037e\3\2\2\2\u009e\u0380\3\2\2\2\u00a0\u039e\3\2\2\2")
        buf.write("\u00a2\u03a0\3\2\2\2\u00a4\u03a2\3\2\2\2\u00a6\u03a6\3")
        buf.write("\2\2\2\u00a8\u00ac\5\4\3\2\u00a9\u00ac\5\22\n\2\u00aa")
        buf.write("\u00ac\5\24\13\2\u00ab\u00a8\3\2\2\2\u00ab\u00a9\3\2\2")
        buf.write("\2\u00ab\u00aa\3\2\2\2\u00ac\u00af\3\2\2\2\u00ad\u00ab")
        buf.write("\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00b0\3\2\2\2\u00af")
        buf.write("\u00ad\3\2\2\2\u00b0\u00b1\7\2\2\3\u00b1\3\3\2\2\2\u00b2")
        buf.write("\u00b3\7\3\2\2\u00b3\u00b4\5\6\4\2\u00b4\u00b5\5\b\5\2")
        buf.write("\u00b5\u00b6\7\4\2\2\u00b6\5\3\2\2\2\u00b7\u00b8\5\u00a6")
        buf.write("T\2\u00b8\7\3\2\2\2\u00b9\u00bc\5\n\6\2\u00ba\u00bc\5")
        buf.write("n8\2\u00bb\u00b9\3\2\2\2\u00bb\u00ba\3\2\2\2\u00bc\t\3")
        buf.write("\2\2\2\u00bd\u00bf\5\16\b\2\u00be\u00c0\5\16\b\2\u00bf")
        buf.write("\u00be\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\13\3\2\2\2\u00c1")
        buf.write("\u00c2\t\2\2\2\u00c2\r\3\2\2\2\u00c3\u00c5\5\f\7\2\u00c4")
        buf.write("\u00c3\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00c6\3\2\2\2")
        buf.write("\u00c6\u00c7\7a\2\2\u00c7\17\3\2\2\2\u00c8\u00cb\5\u00a6")
        buf.write("T\2\u00c9\u00ca\7\f\2\2\u00ca\u00cc\5\u00a6T\2\u00cb\u00c9")
        buf.write("\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\21\3\2\2\2\u00cd\u00ce")
        buf.write("\7\r\2\2\u00ce\u00d1\7u\2\2\u00cf\u00d0\7\f\2\2\u00d0")
        buf.write("\u00d2\5\u00a6T\2\u00d1\u00cf\3\2\2\2\u00d1\u00d2\3\2")
        buf.write("\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00f0\7\4\2\2\u00d4\u00d7")
        buf.write("\7\r\2\2\u00d5\u00d8\7\16\2\2\u00d6\u00d8\5\u00a6T\2\u00d7")
        buf.write("\u00d5\3\2\2\2\u00d7\u00d6\3\2\2\2\u00d8\u00db\3\2\2\2")
        buf.write("\u00d9\u00da\7\f\2\2\u00da\u00dc\5\u00a6T\2\u00db\u00d9")
        buf.write("\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd")
        buf.write("\u00de\7\17\2\2\u00de\u00df\7u\2\2\u00df\u00f0\7\4\2\2")
        buf.write("\u00e0\u00e1\7\r\2\2\u00e1\u00e2\7\20\2\2\u00e2\u00e7")
        buf.write("\5\20\t\2\u00e3\u00e4\7\21\2\2\u00e4\u00e6\5\20\t\2\u00e5")
        buf.write("\u00e3\3\2\2\2\u00e6\u00e9\3\2\2\2\u00e7\u00e5\3\2\2\2")
        buf.write("\u00e7\u00e8\3\2\2\2\u00e8\u00ea\3\2\2\2\u00e9\u00e7\3")
        buf.write("\2\2\2\u00ea\u00eb\7\22\2\2\u00eb\u00ec\7\17\2\2\u00ec")
        buf.write("\u00ed\7u\2\2\u00ed\u00ee\7\4\2\2\u00ee\u00f0\3\2\2\2")
        buf.write("\u00ef\u00cd\3\2\2\2\u00ef\u00d4\3\2\2\2\u00ef\u00e0\3")
        buf.write("\2\2\2\u00f0\23\3\2\2\2\u00f1\u00f2\t\3\2\2\u00f2\u00fc")
        buf.write("\5\u00a6T\2\u00f3\u00f4\7\26\2\2\u00f4\u00f9\5\26\f\2")
        buf.write("\u00f5\u00f6\7\21\2\2\u00f6\u00f8\5\26\f\2\u00f7\u00f5")
        buf.write("\3\2\2\2\u00f8\u00fb\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9")
        buf.write("\u00fa\3\2\2\2\u00fa\u00fd\3\2\2\2\u00fb\u00f9\3\2\2\2")
        buf.write("\u00fc\u00f3\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe\3")
        buf.write("\2\2\2\u00fe\u0102\7\20\2\2\u00ff\u0101\5\30\r\2\u0100")
        buf.write("\u00ff\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0100\3\2\2\2")
        buf.write("\u0102\u0103\3\2\2\2\u0103\u0105\3\2\2\2\u0104\u0102\3")
        buf.write("\2\2\2\u0105\u0106\7\22\2\2\u0106\25\3\2\2\2\u0107\u0113")
        buf.write("\5B\"\2\u0108\u0109\7\27\2\2\u0109\u010e\5n8\2\u010a\u010b")
        buf.write("\7\21\2\2\u010b\u010d\5n8\2\u010c\u010a\3\2\2\2\u010d")
        buf.write("\u0110\3\2\2\2\u010e\u010c\3\2\2\2\u010e\u010f\3\2\2\2")
        buf.write("\u010f\u0111\3\2\2\2\u0110\u010e\3\2\2\2\u0111\u0112\7")
        buf.write("\30\2\2\u0112\u0114\3\2\2\2\u0113\u0108\3\2\2\2\u0113")
        buf.write("\u0114\3\2\2\2\u0114\27\3\2\2\2\u0115\u011e\5\32\16\2")
        buf.write("\u0116\u011e\5\34\17\2\u0117\u011e\5\36\20\2\u0118\u011e")
        buf.write("\5 \21\2\u0119\u011e\5\"\22\2\u011a\u011e\5&\24\2\u011b")
        buf.write("\u011e\5,\27\2\u011c\u011e\5\60\31\2\u011d\u0115\3\2\2")
        buf.write("\2\u011d\u0116\3\2\2\2\u011d\u0117\3\2\2\2\u011d\u0118")
        buf.write("\3\2\2\2\u011d\u0119\3\2\2\2\u011d\u011a\3\2\2\2\u011d")
        buf.write("\u011b\3\2\2\2\u011d\u011c\3\2\2\2\u011e\31\3\2\2\2\u011f")
        buf.write("\u0123\5@!\2\u0120\u0122\t\4\2\2\u0121\u0120\3\2\2\2\u0122")
        buf.write("\u0125\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124\3\2\2\2")
        buf.write("\u0124\u0126\3\2\2\2\u0125\u0123\3\2\2\2\u0126\u0129\5")
        buf.write("\u00a6T\2\u0127\u0128\7\13\2\2\u0128\u012a\5n8\2\u0129")
        buf.write("\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012b\3\2\2\2")
        buf.write("\u012b\u012c\7\4\2\2\u012c\33\3\2\2\2\u012d\u012e\7\31")
        buf.write("\2\2\u012e\u012f\5\u00a6T\2\u012f\u0132\7\32\2\2\u0130")
        buf.write("\u0133\7\16\2\2\u0131\u0133\5@!\2\u0132\u0130\3\2\2\2")
        buf.write("\u0132\u0131\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0135\7")
        buf.write("\4\2\2\u0135\35\3\2\2\2\u0136\u0137\7\33\2\2\u0137\u0138")
        buf.write("\5\u00a6T\2\u0138\u0143\7\20\2\2\u0139\u013a\5> \2\u013a")
        buf.write("\u0140\7\4\2\2\u013b\u013c\5> \2\u013c\u013d\7\4\2\2\u013d")
        buf.write("\u013f\3\2\2\2\u013e\u013b\3\2\2\2\u013f\u0142\3\2\2\2")
        buf.write("\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0144\3")
        buf.write("\2\2\2\u0142\u0140\3\2\2\2\u0143\u0139\3\2\2\2\u0143\u0144")
        buf.write("\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\7\22\2\2\u0146")
        buf.write("\37\3\2\2\2\u0147\u0148\7\34\2\2\u0148\u0149\5\62\32\2")
        buf.write("\u0149\u014a\5*\26\2\u014a\u014b\5L\'\2\u014b!\3\2\2\2")
        buf.write("\u014c\u014d\7\35\2\2\u014d\u014f\5\u00a6T\2\u014e\u0150")
        buf.write("\5\62\32\2\u014f\u014e\3\2\2\2\u014f\u0150\3\2\2\2\u0150")
        buf.write("\u0151\3\2\2\2\u0151\u0152\5L\'\2\u0152#\3\2\2\2\u0153")
        buf.write("\u0159\5\u00a6T\2\u0154\u0156\7\27\2\2\u0155\u0157\5r")
        buf.write(":\2\u0156\u0155\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0158")
        buf.write("\3\2\2\2\u0158\u015a\7\30\2\2\u0159\u0154\3\2\2\2\u0159")
        buf.write("\u015a\3\2\2\2\u015a%\3\2\2\2\u015b\u015d\7\36\2\2\u015c")
        buf.write("\u015e\5\u00a6T\2\u015d\u015c\3\2\2\2\u015d\u015e\3\2")
        buf.write("\2\2\u015e\u015f\3\2\2\2\u015f\u0160\5\62\32\2\u0160\u0162")
        buf.write("\5*\26\2\u0161\u0163\5(\25\2\u0162\u0161\3\2\2\2\u0162")
        buf.write("\u0163\3\2\2\2\u0163\u0166\3\2\2\2\u0164\u0167\7\4\2\2")
        buf.write("\u0165\u0167\5L\'\2\u0166\u0164\3\2\2\2\u0166\u0165\3")
        buf.write("\2\2\2\u0167\'\3\2\2\2\u0168\u0169\7\37\2\2\u0169\u016a")
        buf.write("\5\62\32\2\u016a)\3\2\2\2\u016b\u0172\5$\23\2\u016c\u0172")
        buf.write("\5J&\2\u016d\u0172\7l\2\2\u016e\u0172\7q\2\2\u016f\u0172")
        buf.write("\7n\2\2\u0170\u0172\7p\2\2\u0171\u016b\3\2\2\2\u0171\u016c")
        buf.write("\3\2\2\2\u0171\u016d\3\2\2\2\u0171\u016e\3\2\2\2\u0171")
        buf.write("\u016f\3\2\2\2\u0171\u0170\3\2\2\2\u0172\u0175\3\2\2\2")
        buf.write("\u0173\u0171\3\2\2\2\u0173\u0174\3\2\2\2\u0174+\3\2\2")
        buf.write("\2\u0175\u0173\3\2\2\2\u0176\u0177\7 \2\2\u0177\u0178")
        buf.write("\5\u00a6T\2\u0178\u017a\5\66\34\2\u0179\u017b\7h\2\2\u017a")
        buf.write("\u0179\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c\3\2\2\2")
        buf.write("\u017c\u017d\7\4\2\2\u017d-\3\2\2\2\u017e\u017f\5\u00a6")
        buf.write("T\2\u017f/\3\2\2\2\u0180\u0181\7!\2\2\u0181\u0182\5\u00a6")
        buf.write("T\2\u0182\u0184\7\20\2\2\u0183\u0185\5.\30\2\u0184\u0183")
        buf.write("\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u018a\3\2\2\2\u0186")
        buf.write("\u0187\7\21\2\2\u0187\u0189\5.\30\2\u0188\u0186\3\2\2")
        buf.write("\2\u0189\u018c\3\2\2\2\u018a\u0188\3\2\2\2\u018a\u018b")
        buf.write("\3\2\2\2\u018b\u018d\3\2\2\2\u018c\u018a\3\2\2\2\u018d")
        buf.write("\u018e\7\22\2\2\u018e\61\3\2\2\2\u018f\u0198\7\27\2\2")
        buf.write("\u0190\u0195\5\64\33\2\u0191\u0192\7\21\2\2\u0192\u0194")
        buf.write("\5\64\33\2\u0193\u0191\3\2\2\2\u0194\u0197\3\2\2\2\u0195")
        buf.write("\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0199\3\2\2\2")
        buf.write("\u0197\u0195\3\2\2\2\u0198\u0190\3\2\2\2\u0198\u0199\3")
        buf.write("\2\2\2\u0199\u019a\3\2\2\2\u019a\u019b\7\30\2\2\u019b")
        buf.write("\63\3\2\2\2\u019c\u019e\5@!\2\u019d\u019f\5H%\2\u019e")
        buf.write("\u019d\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01a1\3\2\2\2")
        buf.write("\u01a0\u01a2\5\u00a6T\2\u01a1\u01a0\3\2\2\2\u01a1\u01a2")
        buf.write("\3\2\2\2\u01a2\65\3\2\2\2\u01a3\u01ac\7\27\2\2\u01a4\u01a9")
        buf.write("\58\35\2\u01a5\u01a6\7\21\2\2\u01a6\u01a8\58\35\2\u01a7")
        buf.write("\u01a5\3\2\2\2\u01a8\u01ab\3\2\2\2\u01a9\u01a7\3\2\2\2")
        buf.write("\u01a9\u01aa\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab\u01a9\3")
        buf.write("\2\2\2\u01ac\u01a4\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ae")
        buf.write("\3\2\2\2\u01ae\u01af\7\30\2\2\u01af\67\3\2\2\2\u01b0\u01b2")
        buf.write("\5@!\2\u01b1\u01b3\7m\2\2\u01b2\u01b1\3\2\2\2\u01b2\u01b3")
        buf.write("\3\2\2\2\u01b3\u01b5\3\2\2\2\u01b4\u01b6\5\u00a6T\2\u01b5")
        buf.write("\u01b4\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b69\3\2\2\2\u01b7")
        buf.write("\u01c0\7\27\2\2\u01b8\u01bd\5<\37\2\u01b9\u01ba\7\21\2")
        buf.write("\2\u01ba\u01bc\5<\37\2\u01bb\u01b9\3\2\2\2\u01bc\u01bf")
        buf.write("\3\2\2\2\u01bd\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be")
        buf.write("\u01c1\3\2\2\2\u01bf\u01bd\3\2\2\2\u01c0\u01b8\3\2\2\2")
        buf.write("\u01c0\u01c1\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c3\7")
        buf.write("\30\2\2\u01c3;\3\2\2\2\u01c4\u01c6\5@!\2\u01c5\u01c7\5")
        buf.write("H%\2\u01c6\u01c5\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7=\3")
        buf.write("\2\2\2\u01c8\u01ca\5@!\2\u01c9\u01cb\5H%\2\u01ca\u01c9")
        buf.write("\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc")
        buf.write("\u01cd\5\u00a6T\2\u01cd?\3\2\2\2\u01ce\u01cf\b!\1\2\u01cf")
        buf.write("\u01d4\5l\67\2\u01d0\u01d4\5B\"\2\u01d1\u01d4\5D#\2\u01d2")
        buf.write("\u01d4\5F$\2\u01d3\u01ce\3\2\2\2\u01d3\u01d0\3\2\2\2\u01d3")
        buf.write("\u01d1\3\2\2\2\u01d3\u01d2\3\2\2\2\u01d4\u01dd\3\2\2\2")
        buf.write("\u01d5\u01d6\f\4\2\2\u01d6\u01d8\7\"\2\2\u01d7\u01d9\5")
        buf.write("n8\2\u01d8\u01d7\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01da")
        buf.write("\3\2\2\2\u01da\u01dc\7#\2\2\u01db\u01d5\3\2\2\2\u01dc")
        buf.write("\u01df\3\2\2\2\u01dd\u01db\3\2\2\2\u01dd\u01de\3\2\2\2")
        buf.write("\u01deA\3\2\2\2\u01df\u01dd\3\2\2\2\u01e0\u01e5\5\u00a6")
        buf.write("T\2\u01e1\u01e2\7$\2\2\u01e2\u01e4\5\u00a6T\2\u01e3\u01e1")
        buf.write("\3\2\2\2\u01e4\u01e7\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5")
        buf.write("\u01e6\3\2\2\2\u01e6C\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e8")
        buf.write("\u01e9\7%\2\2\u01e9\u01ea\7\27\2\2\u01ea\u01eb\5l\67\2")
        buf.write("\u01eb\u01ec\7&\2\2\u01ec\u01ed\5@!\2\u01ed\u01ee\7\30")
        buf.write("\2\2\u01eeE\3\2\2\2\u01ef\u01f0\7\36\2\2\u01f0\u01f6\5")
        buf.write(":\36\2\u01f1\u01f5\7n\2\2\u01f2\u01f5\7l\2\2\u01f3\u01f5")
        buf.write("\5J&\2\u01f4\u01f1\3\2\2\2\u01f4\u01f2\3\2\2\2\u01f4\u01f3")
        buf.write("\3\2\2\2\u01f5\u01f8\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f6")
        buf.write("\u01f7\3\2\2\2\u01f7\u01fb\3\2\2\2\u01f8\u01f6\3\2\2\2")
        buf.write("\u01f9\u01fa\7\37\2\2\u01fa\u01fc\5:\36\2\u01fb\u01f9")
        buf.write("\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fcG\3\2\2\2\u01fd\u01fe")
        buf.write("\t\5\2\2\u01feI\3\2\2\2\u01ff\u0200\t\6\2\2\u0200K\3\2")
        buf.write("\2\2\u0201\u0205\7\20\2\2\u0202\u0204\5N(\2\u0203\u0202")
        buf.write("\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0203\3\2\2\2\u0205")
        buf.write("\u0206\3\2\2\2\u0206\u0208\3\2\2\2\u0207\u0205\3\2\2\2")
        buf.write("\u0208\u0209\7\22\2\2\u0209M\3\2\2\2\u020a\u0217\5R*\2")
        buf.write("\u020b\u0217\5T+\2\u020c\u0217\5X-\2\u020d\u0217\5L\'")
        buf.write("\2\u020e\u0217\5Z.\2\u020f\u0217\5\\/\2\u0210\u0217\5")
        buf.write("^\60\2\u0211\u0217\5`\61\2\u0212\u0217\5b\62\2\u0213\u0217")
        buf.write("\5d\63\2\u0214\u0217\5f\64\2\u0215\u0217\5V,\2\u0216\u020a")
        buf.write("\3\2\2\2\u0216\u020b\3\2\2\2\u0216\u020c\3\2\2\2\u0216")
        buf.write("\u020d\3\2\2\2\u0216\u020e\3\2\2\2\u0216\u020f\3\2\2\2")
        buf.write("\u0216\u0210\3\2\2\2\u0216\u0211\3\2\2\2\u0216\u0212\3")
        buf.write("\2\2\2\u0216\u0213\3\2\2\2\u0216\u0214\3\2\2\2\u0216\u0215")
        buf.write("\3\2\2\2\u0217O\3\2\2\2\u0218\u0219\5n8\2\u0219\u021a")
        buf.write("\7\4\2\2\u021aQ\3\2\2\2\u021b\u021c\7)\2\2\u021c\u021d")
        buf.write("\7\27\2\2\u021d\u021e\5n8\2\u021e\u021f\7\30\2\2\u021f")
        buf.write("\u0222\5N(\2\u0220\u0221\7*\2\2\u0221\u0223\5N(\2\u0222")
        buf.write("\u0220\3\2\2\2\u0222\u0223\3\2\2\2\u0223S\3\2\2\2\u0224")
        buf.write("\u0225\7+\2\2\u0225\u0226\7\27\2\2\u0226\u0227\5n8\2\u0227")
        buf.write("\u0228\7\30\2\2\u0228\u0229\5N(\2\u0229U\3\2\2\2\u022a")
        buf.write("\u022d\5h\65\2\u022b\u022d\5P)\2\u022c\u022a\3\2\2\2\u022c")
        buf.write("\u022b\3\2\2\2\u022dW\3\2\2\2\u022e\u022f\7\32\2\2\u022f")
        buf.write("\u0232\7\27\2\2\u0230\u0233\5V,\2\u0231\u0233\7\4\2\2")
        buf.write("\u0232\u0230\3\2\2\2\u0232\u0231\3\2\2\2\u0233\u0235\3")
        buf.write("\2\2\2\u0234\u0236\5n8\2\u0235\u0234\3\2\2\2\u0235\u0236")
        buf.write("\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0239\7\4\2\2\u0238")
        buf.write("\u023a\5n8\2\u0239\u0238\3\2\2\2\u0239\u023a\3\2\2\2\u023a")
        buf.write("\u023b\3\2\2\2\u023b\u023c\7\30\2\2\u023c\u023d\5N(\2")
        buf.write("\u023dY\3\2\2\2\u023e\u0240\7,\2\2\u023f\u0241\7u\2\2")
        buf.write("\u0240\u023f\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0242\3")
        buf.write("\2\2\2\u0242\u0243\5|?\2\u0243[\3\2\2\2\u0244\u0245\7")
        buf.write("-\2\2\u0245\u0246\5N(\2\u0246\u0247\7+\2\2\u0247\u0248")
        buf.write("\7\27\2\2\u0248\u0249\5n8\2\u0249\u024a\7\30\2\2\u024a")
        buf.write("\u024b\7\4\2\2\u024b]\3\2\2\2\u024c\u024d\7k\2\2\u024d")
        buf.write("\u024e\7\4\2\2\u024e_\3\2\2\2\u024f\u0250\7i\2\2\u0250")
        buf.write("\u0251\7\4\2\2\u0251a\3\2\2\2\u0252\u0254\7.\2\2\u0253")
        buf.write("\u0255\5n8\2\u0254\u0253\3\2\2\2\u0254\u0255\3\2\2\2\u0255")
        buf.write("\u0256\3\2\2\2\u0256\u0257\7\4\2\2\u0257c\3\2\2\2\u0258")
        buf.write("\u0259\7/\2\2\u0259\u025a\7\4\2\2\u025ae\3\2\2\2\u025b")
        buf.write("\u025c\7\60\2\2\u025c\u025d\5z>\2\u025d\u025e\7\4\2\2")
        buf.write("\u025eg\3\2\2\2\u025f\u0260\7\61\2\2\u0260\u0263\5j\66")
        buf.write("\2\u0261\u0263\5> \2\u0262\u025f\3\2\2\2\u0262\u0261\3")
        buf.write("\2\2\2\u0263\u0266\3\2\2\2\u0264\u0265\7\13\2\2\u0265")
        buf.write("\u0267\5n8\2\u0266\u0264\3\2\2\2\u0266\u0267\3\2\2\2\u0267")
        buf.write("\u0268\3\2\2\2\u0268\u0269\7\4\2\2\u0269i\3\2\2\2\u026a")
        buf.write("\u0271\7\27\2\2\u026b\u026d\5\u00a6T\2\u026c\u026b\3\2")
        buf.write("\2\2\u026c\u026d\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u0270")
        buf.write("\7\21\2\2\u026f\u026c\3\2\2\2\u0270\u0273\3\2\2\2\u0271")
        buf.write("\u026f\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0275\3\2\2\2")
        buf.write("\u0273\u0271\3\2\2\2\u0274\u0276\5\u00a6T\2\u0275\u0274")
        buf.write("\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0277\3\2\2\2\u0277")
        buf.write("\u0278\7\30\2\2\u0278k\3\2\2\2\u0279\u027a\t\7\2\2\u027a")
        buf.write("m\3\2\2\2\u027b\u027c\b8\1\2\u027c\u027d\78\2\2\u027d")
        buf.write("\u028e\5@!\2\u027e\u027f\7\27\2\2\u027f\u0280\5n8\2\u0280")
        buf.write("\u0281\7\30\2\2\u0281\u028e\3\2\2\2\u0282\u0283\t\b\2")
        buf.write("\2\u0283\u028e\5n8\25\u0284\u0285\t\t\2\2\u0285\u028e")
        buf.write("\5n8\24\u0286\u0287\t\n\2\2\u0287\u028e\5n8\23\u0288\u0289")
        buf.write("\7=\2\2\u0289\u028e\5n8\22\u028a\u028b\7\6\2\2\u028b\u028e")
        buf.write("\5n8\21\u028c\u028e\5p9\2\u028d\u027b\3\2\2\2\u028d\u027e")
        buf.write("\3\2\2\2\u028d\u0282\3\2\2\2\u028d\u0284\3\2\2\2\u028d")
        buf.write("\u0286\3\2\2\2\u028d\u0288\3\2\2\2\u028d\u028a\3\2\2\2")
        buf.write("\u028d\u028c\3\2\2\2\u028e\u02ca\3\2\2\2\u028f\u0290\f")
        buf.write("\20\2\2\u0290\u0291\7>\2\2\u0291\u02c9\5n8\21\u0292\u0293")
        buf.write("\f\17\2\2\u0293\u0294\t\13\2\2\u0294\u02c9\5n8\20\u0295")
        buf.write("\u0296\f\16\2\2\u0296\u0297\t\t\2\2\u0297\u02c9\5n8\17")
        buf.write("\u0298\u0299\f\r\2\2\u0299\u029a\t\f\2\2\u029a\u02c9\5")
        buf.write("n8\16\u029b\u029c\f\f\2\2\u029c\u029d\7C\2\2\u029d\u02c9")
        buf.write("\5n8\r\u029e\u029f\f\13\2\2\u029f\u02a0\7\5\2\2\u02a0")
        buf.write("\u02c9\5n8\f\u02a1\u02a2\f\n\2\2\u02a2\u02a3\7D\2\2\u02a3")
        buf.write("\u02c9\5n8\13\u02a4\u02a5\f\t\2\2\u02a5\u02a6\t\r\2\2")
        buf.write("\u02a6\u02c9\5n8\n\u02a7\u02a8\f\b\2\2\u02a8\u02a9\t\16")
        buf.write("\2\2\u02a9\u02c9\5n8\t\u02aa\u02ab\f\7\2\2\u02ab\u02ac")
        buf.write("\7G\2\2\u02ac\u02c9\5n8\b\u02ad\u02ae\f\6\2\2\u02ae\u02af")
        buf.write("\7H\2\2\u02af\u02c9\5n8\7\u02b0\u02b1\f\5\2\2\u02b1\u02b2")
        buf.write("\7I\2\2\u02b2\u02b3\5n8\2\u02b3\u02b4\7J\2\2\u02b4\u02b5")
        buf.write("\5n8\6\u02b5\u02c9\3\2\2\2\u02b6\u02b7\f\4\2\2\u02b7\u02b8")
        buf.write("\t\17\2\2\u02b8\u02c9\5n8\5\u02b9\u02ba\f\33\2\2\u02ba")
        buf.write("\u02c9\t\b\2\2\u02bb\u02bc\f\31\2\2\u02bc\u02bd\7\"\2")
        buf.write("\2\u02bd\u02be\5n8\2\u02be\u02bf\7#\2\2\u02bf\u02c9\3")
        buf.write("\2\2\2\u02c0\u02c1\f\30\2\2\u02c1\u02c2\7\27\2\2\u02c2")
        buf.write("\u02c3\5x=\2\u02c3\u02c4\7\30\2\2\u02c4\u02c9\3\2\2\2")
        buf.write("\u02c5\u02c6\f\27\2\2\u02c6\u02c7\7$\2\2\u02c7\u02c9\5")
        buf.write("\u00a6T\2\u02c8\u028f\3\2\2\2\u02c8\u0292\3\2\2\2\u02c8")
        buf.write("\u0295\3\2\2\2\u02c8\u0298\3\2\2\2\u02c8\u029b\3\2\2\2")
        buf.write("\u02c8\u029e\3\2\2\2\u02c8\u02a1\3\2\2\2\u02c8\u02a4\3")
        buf.write("\2\2\2\u02c8\u02a7\3\2\2\2\u02c8\u02aa\3\2\2\2\u02c8\u02ad")
        buf.write("\3\2\2\2\u02c8\u02b0\3\2\2\2\u02c8\u02b6\3\2\2\2\u02c8")
        buf.write("\u02b9\3\2\2\2\u02c8\u02bb\3\2\2\2\u02c8\u02c0\3\2\2\2")
        buf.write("\u02c8\u02c5\3\2\2\2\u02c9\u02cc\3\2\2\2\u02ca\u02c8\3")
        buf.write("\2\2\2\u02ca\u02cb\3\2\2\2\u02cbo\3\2\2\2\u02cc\u02ca")
        buf.write("\3\2\2\2\u02cd\u02d5\7b\2\2\u02ce\u02d5\5\u00a4S\2\u02cf")
        buf.write("\u02d5\7f\2\2\u02d0\u02d5\7u\2\2\u02d1\u02d5\5\u00a6T")
        buf.write("\2\u02d2\u02d5\5\u00a0Q\2\u02d3\u02d5\5\u00a2R\2\u02d4")
        buf.write("\u02cd\3\2\2\2\u02d4\u02ce\3\2\2\2\u02d4\u02cf\3\2\2\2")
        buf.write("\u02d4\u02d0\3\2\2\2\u02d4\u02d1\3\2\2\2\u02d4\u02d2\3")
        buf.write("\2\2\2\u02d4\u02d3\3\2\2\2\u02d5q\3\2\2\2\u02d6\u02db")
        buf.write("\5n8\2\u02d7\u02d8\7\21\2\2\u02d8\u02da\5n8\2\u02d9\u02d7")
        buf.write("\3\2\2\2\u02da\u02dd\3\2\2\2\u02db\u02d9\3\2\2\2\u02db")
        buf.write("\u02dc\3\2\2\2\u02dcs\3\2\2\2\u02dd\u02db\3\2\2\2\u02de")
        buf.write("\u02e3\5v<\2\u02df\u02e0\7\21\2\2\u02e0\u02e2\5v<\2\u02e1")
        buf.write("\u02df\3\2\2\2\u02e2\u02e5\3\2\2\2\u02e3\u02e1\3\2\2\2")
        buf.write("\u02e3\u02e4\3\2\2\2\u02e4\u02e7\3\2\2\2\u02e5\u02e3\3")
        buf.write("\2\2\2\u02e6\u02e8\7\21\2\2\u02e7\u02e6\3\2\2\2\u02e7")
        buf.write("\u02e8\3\2\2\2\u02e8u\3\2\2\2\u02e9\u02ea\5\u00a6T\2\u02ea")
        buf.write("\u02eb\7J\2\2\u02eb\u02ec\5n8\2\u02ecw\3\2\2\2\u02ed\u02ef")
        buf.write("\7\20\2\2\u02ee\u02f0\5t;\2\u02ef\u02ee\3\2\2\2\u02ef")
        buf.write("\u02f0\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f6\7\22\2")
        buf.write("\2\u02f2\u02f4\5r:\2\u02f3\u02f2\3\2\2\2\u02f3\u02f4\3")
        buf.write("\2\2\2\u02f4\u02f6\3\2\2\2\u02f5\u02ed\3\2\2\2\u02f5\u02f3")
        buf.write("\3\2\2\2\u02f6y\3\2\2\2\u02f7\u02f8\5n8\2\u02f8\u02f9")
        buf.write("\7\27\2\2\u02f9\u02fa\5x=\2\u02fa\u02fb\7\30\2\2\u02fb")
        buf.write("{\3\2\2\2\u02fc\u0300\7\20\2\2\u02fd\u02ff\5~@\2\u02fe")
        buf.write("\u02fd\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2")
        buf.write("\u0300\u0301\3\2\2\2\u0301\u0303\3\2\2\2\u0302\u0300\3")
        buf.write("\2\2\2\u0303\u0304\7\22\2\2\u0304}\3\2\2\2\u0305\u0317")
        buf.write("\5\u00a6T\2\u0306\u0317\5|?\2\u0307\u0317\5\u0080A\2\u0308")
        buf.write("\u0317\5\u0084C\2\u0309\u0317\5\u0086D\2\u030a\u0317\5")
        buf.write("\u008cG\2\u030b\u0317\5\u008eH\2\u030c\u0317\5\u0090I")
        buf.write("\2\u030d\u0317\5\u0094K\2\u030e\u0317\5\u0098M\2\u030f")
        buf.write("\u0317\5\u009aN\2\u0310\u0317\7i\2\2\u0311\u0317\7k\2")
        buf.write("\2\u0312\u0317\5\u009eP\2\u0313\u0317\5\u00a4S\2\u0314")
        buf.write("\u0317\7u\2\2\u0315\u0317\7f\2\2\u0316\u0305\3\2\2\2\u0316")
        buf.write("\u0306\3\2\2\2\u0316\u0307\3\2\2\2\u0316\u0308\3\2\2\2")
        buf.write("\u0316\u0309\3\2\2\2\u0316\u030a\3\2\2\2\u0316\u030b\3")
        buf.write("\2\2\2\u0316\u030c\3\2\2\2\u0316\u030d\3\2\2\2\u0316\u030e")
        buf.write("\3\2\2\2\u0316\u030f\3\2\2\2\u0316\u0310\3\2\2\2\u0316")
        buf.write("\u0311\3\2\2\2\u0316\u0312\3\2\2\2\u0316\u0313\3\2\2\2")
        buf.write("\u0316\u0314\3\2\2\2\u0316\u0315\3\2\2\2\u0317\177\3\2")
        buf.write("\2\2\u0318\u031b\5\u0082B\2\u0319\u031b\5\u009cO\2\u031a")
        buf.write("\u0318\3\2\2\2\u031a\u0319\3\2\2\2\u031b\u0081\3\2\2\2")
        buf.write("\u031c\u0321\7.\2\2\u031d\u0321\7\62\2\2\u031e\u0321\7")
        buf.write("\65\2\2\u031f\u0321\5\u00a6T\2\u0320\u031c\3\2\2\2\u0320")
        buf.write("\u031d\3\2\2\2\u0320\u031e\3\2\2\2\u0320\u031f\3\2\2\2")
        buf.write("\u0321\u032e\3\2\2\2\u0322\u0324\7\27\2\2\u0323\u0325")
        buf.write("\5\u0080A\2\u0324\u0323\3\2\2\2\u0324\u0325\3\2\2\2\u0325")
        buf.write("\u032a\3\2\2\2\u0326\u0327\7\21\2\2\u0327\u0329\5\u0080")
        buf.write("A\2\u0328\u0326\3\2\2\2\u0329\u032c\3\2\2\2\u032a\u0328")
        buf.write("\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u032d\3\2\2\2\u032c")
        buf.write("\u032a\3\2\2\2\u032d\u032f\7\30\2\2\u032e\u0322\3\2\2")
        buf.write("\2\u032e\u032f\3\2\2\2\u032f\u0083\3\2\2\2\u0330\u0331")
        buf.write("\7U\2\2\u0331\u0334\5\u0088E\2\u0332\u0333\7V\2\2\u0333")
        buf.write("\u0335\5\u0080A\2\u0334\u0332\3\2\2\2\u0334\u0335\3\2")
        buf.write("\2\2\u0335\u0085\3\2\2\2\u0336\u0337\5\u0088E\2\u0337")
        buf.write("\u0338\7V\2\2\u0338\u0339\5\u0080A\2\u0339\u0087\3\2\2")
        buf.write("\2\u033a\u0340\5\u00a6T\2\u033b\u033c\7\27\2\2\u033c\u033d")
        buf.write("\5\u008aF\2\u033d\u033e\7\30\2\2\u033e\u0340\3\2\2\2\u033f")
        buf.write("\u033a\3\2\2\2\u033f\u033b\3\2\2\2\u0340\u0089\3\2\2\2")
        buf.write("\u0341\u0346\5\u00a6T\2\u0342\u0343\7\21\2\2\u0343\u0345")
        buf.write("\5\u00a6T\2\u0344\u0342\3\2\2\2\u0345\u0348\3\2\2\2\u0346")
        buf.write("\u0344\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u008b\3\2\2\2")
        buf.write("\u0348\u0346\3\2\2\2\u0349\u034a\7W\2\2\u034a\u034b\5")
        buf.write("\u00a6T\2\u034b\u008d\3\2\2\2\u034c\u034d\5\u00a6T\2\u034d")
        buf.write("\u034e\7J\2\2\u034e\u008f\3\2\2\2\u034f\u0350\7X\2\2\u0350")
        buf.write("\u0354\5\u0080A\2\u0351\u0353\5\u0092J\2\u0352\u0351\3")
        buf.write("\2\2\2\u0353\u0356\3\2\2\2\u0354\u0352\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0091\3\2\2\2\u0356\u0354\3\2\2\2\u0357")
        buf.write("\u0358\7Y\2\2\u0358\u0359\5\u009cO\2\u0359\u035a\5|?\2")
        buf.write("\u035a\u035e\3\2\2\2\u035b\u035c\7Z\2\2\u035c\u035e\5")
        buf.write("|?\2\u035d\u0357\3\2\2\2\u035d\u035b\3\2\2\2\u035e\u0093")
        buf.write("\3\2\2\2\u035f\u0360\7\36\2\2\u0360\u0361\5\u00a6T\2\u0361")
        buf.write("\u0363\7\27\2\2\u0362\u0364\5\u008aF\2\u0363\u0362\3\2")
        buf.write("\2\2\u0363\u0364\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0367")
        buf.write("\7\30\2\2\u0366\u0368\5\u0096L\2\u0367\u0366\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036a\5|?\2\u036a")
        buf.write("\u0095\3\2\2\2\u036b\u036c\7[\2\2\u036c\u036d\5\u008a")
        buf.write("F\2\u036d\u0097\3\2\2\2\u036e\u0371\7\32\2\2\u036f\u0372")
        buf.write("\5|?\2\u0370\u0372\5\u0080A\2\u0371\u036f\3\2\2\2\u0371")
        buf.write("\u0370\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0376\5\u0080")
        buf.write("A\2\u0374\u0377\5|?\2\u0375\u0377\5\u0080A\2\u0376\u0374")
        buf.write("\3\2\2\2\u0376\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378")
        buf.write("\u0379\5|?\2\u0379\u0099\3\2\2\2\u037a\u037b\7)\2\2\u037b")
        buf.write("\u037c\5\u0080A\2\u037c\u037d\5|?\2\u037d\u009b\3\2\2")
        buf.write("\2\u037e\u037f\t\20\2\2\u037f\u009d\3\2\2\2\u0380\u0381")
        buf.write("\7,\2\2\u0381\u0382\5\u00a6T\2\u0382\u0383\5|?\2\u0383")
        buf.write("\u009f\3\2\2\2\u0384\u0386\7\27\2\2\u0385\u0387\5n8\2")
        buf.write("\u0386\u0385\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u038e\3")
        buf.write("\2\2\2\u0388\u038a\7\21\2\2\u0389\u038b\5n8\2\u038a\u0389")
        buf.write("\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038d\3\2\2\2\u038c")
        buf.write("\u0388\3\2\2\2\u038d\u0390\3\2\2\2\u038e\u038c\3\2\2\2")
        buf.write("\u038e\u038f\3\2\2\2\u038f\u0391\3\2\2\2\u0390\u038e\3")
        buf.write("\2\2\2\u0391\u039f\7\30\2\2\u0392\u039b\7\"\2\2\u0393")
        buf.write("\u0398\5n8\2\u0394\u0395\7\21\2\2\u0395\u0397\5n8\2\u0396")
        buf.write("\u0394\3\2\2\2\u0397\u039a\3\2\2\2\u0398\u0396\3\2\2\2")
        buf.write("\u0398\u0399\3\2\2\2\u0399\u039c\3\2\2\2\u039a\u0398\3")
        buf.write("\2\2\2\u039b\u0393\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039d")
        buf.write("\3\2\2\2\u039d\u039f\7#\2\2\u039e\u0384\3\2\2\2\u039e")
        buf.write("\u0392\3\2\2\2\u039f\u00a1\3\2\2\2\u03a0\u03a1\5l\67\2")
        buf.write("\u03a1\u00a3\3\2\2\2\u03a2\u03a4\t\21\2\2\u03a3\u03a5")
        buf.write("\7e\2\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5")
        buf.write("\u00a5\3\2\2\2\u03a6\u03a7\t\22\2\2\u03a7\u00a7\3\2\2")
        buf.write("\2e\u00ab\u00ad\u00bb\u00bf\u00c4\u00cb\u00d1\u00d7\u00db")
        buf.write("\u00e7\u00ef\u00f9\u00fc\u0102\u010e\u0113\u011d\u0123")
        buf.write("\u0129\u0132\u0140\u0143\u014f\u0156\u0159\u015d\u0162")
        buf.write("\u0166\u0171\u0173\u017a\u0184\u018a\u0195\u0198\u019e")
        buf.write("\u01a1\u01a9\u01ac\u01b2\u01b5\u01bd\u01c0\u01c6\u01ca")
        buf.write("\u01d3\u01d8\u01dd\u01e5\u01f4\u01f6\u01fb\u0205\u0216")
        buf.write("\u0222\u022c\u0232\u0235\u0239\u0240\u0254\u0262\u0266")
        buf.write("\u026c\u0271\u0275\u028d\u02c8\u02ca\u02d4\u02db\u02e3")
        buf.write("\u02e7\u02ef\u02f3\u02f5\u0300\u0316\u031a\u0320\u0324")
        buf.write("\u032a\u032e\u0334\u033f\u0346\u0354\u035d\u0363\u0367")
        buf.write("\u0371\u0376\u0386\u038a\u038e\u0398\u039b\u039e\u03a4")
        return buf.getvalue()


class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'^'", "'~'", "'>='", 
                     "'>'", "'<'", "'<='", "'='", "'as'", "'import'", "'*'", 
                     "'from'", "'{'", "','", "'}'", "'contract'", "'interface'", 
                     "'library'", "'is'", "'('", "')'", "'using'", "'for'", 
                     "'struct'", "'constructor'", "'modifier'", "'function'", 
                     "'returns'", "'event'", "'enum'", "'['", "']'", "'.'", 
                     "'mapping'", "'=>'", "'memory'", "'storage'", "'if'", 
                     "'else'", "'while'", "'assembly'", "'do'", "'return'", 
                     "'throw'", "'emit'", "'var'", "'address'", "'bool'", 
                     "'string'", "'byte'", "'++'", "'--'", "'new'", "'+'", 
                     "'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", 
                     "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", 
                     "'&&'", "'||'", "'?'", "':'", "'|='", "'^='", "'&='", 
                     "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", 
                     "'->'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'anonymous'", "'break'", "'constant'", "'continue'", 
                     "'external'", "'indexed'", "'internal'", "'payable'", 
                     "'private'", "'public'", "'pure'", "'view'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "Int", "Uint", "Byte", "Fixed", 
                      "Ufixed", "VersionLiteral", "BooleanLiteral", "DecimalNumber", 
                      "HexNumber", "NumberUnit", "HexLiteral", "ReservedKeyword", 
                      "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", 
                      "ContinueKeyword", "ExternalKeyword", "IndexedKeyword", 
                      "InternalKeyword", "PayableKeyword", "PrivateKeyword", 
                      "PublicKeyword", "PureKeyword", "ViewKeyword", "Identifier", 
                      "StringLiteral", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_contractDefinition = 9
    RULE_inheritanceSpecifier = 10
    RULE_contractPart = 11
    RULE_stateVariableDeclaration = 12
    RULE_usingForDeclaration = 13
    RULE_structDefinition = 14
    RULE_constructorDefinition = 15
    RULE_modifierDefinition = 16
    RULE_modifierInvocation = 17
    RULE_functionDefinition = 18
    RULE_returnParameters = 19
    RULE_modifierList = 20
    RULE_eventDefinition = 21
    RULE_enumValue = 22
    RULE_enumDefinition = 23
    RULE_parameterList = 24
    RULE_parameter = 25
    RULE_eventParameterList = 26
    RULE_eventParameter = 27
    RULE_functionTypeParameterList = 28
    RULE_functionTypeParameter = 29
    RULE_variableDeclaration = 30
    RULE_typeName = 31
    RULE_userDefinedTypeName = 32
    RULE_mapping = 33
    RULE_functionTypeName = 34
    RULE_storageLocation = 35
    RULE_stateMutability = 36
    RULE_block = 37
    RULE_statement = 38
    RULE_expressionStatement = 39
    RULE_ifStatement = 40
    RULE_whileStatement = 41
    RULE_simpleStatement = 42
    RULE_forStatement = 43
    RULE_inlineAssemblyStatement = 44
    RULE_doWhileStatement = 45
    RULE_continueStatement = 46
    RULE_breakStatement = 47
    RULE_returnStatement = 48
    RULE_throwStatement = 49
    RULE_emitStatement = 50
    RULE_variableDeclarationStatement = 51
    RULE_identifierList = 52
    RULE_elementaryTypeName = 53
    RULE_expression = 54
    RULE_primaryExpression = 55
    RULE_expressionList = 56
    RULE_nameValueList = 57
    RULE_nameValue = 58
    RULE_functionCallArguments = 59
    RULE_functionCall = 60
    RULE_assemblyBlock = 61
    RULE_assemblyItem = 62
    RULE_assemblyExpression = 63
    RULE_assemblyCall = 64
    RULE_assemblyLocalDefinition = 65
    RULE_assemblyAssignment = 66
    RULE_assemblyIdentifierOrList = 67
    RULE_assemblyIdentifierList = 68
    RULE_assemblyStackAssignment = 69
    RULE_labelDefinition = 70
    RULE_assemblySwitch = 71
    RULE_assemblyCase = 72
    RULE_assemblyFunctionDefinition = 73
    RULE_assemblyFunctionReturns = 74
    RULE_assemblyFor = 75
    RULE_assemblyIf = 76
    RULE_assemblyLiteral = 77
    RULE_subAssembly = 78
    RULE_tupleExpression = 79
    RULE_elementaryTypeNameExpression = 80
    RULE_numberLiteral = 81
    RULE_identifier = 82

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "usingForDeclaration", 
                   "structDefinition", "constructorDefinition", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mapping", "functionTypeName", "storageLocation", "stateMutability", 
                   "block", "statement", "expressionStatement", "ifStatement", 
                   "whileStatement", "simpleStatement", "forStatement", 
                   "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
                   "breakStatement", "returnStatement", "throwStatement", 
                   "emitStatement", "variableDeclarationStatement", "identifierList", 
                   "elementaryTypeName", "expression", "primaryExpression", 
                   "expressionList", "nameValueList", "nameValue", "functionCallArguments", 
                   "functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
                   "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "elementaryTypeNameExpression", "numberLiteral", 
                   "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    Int=90
    Uint=91
    Byte=92
    Fixed=93
    Ufixed=94
    VersionLiteral=95
    BooleanLiteral=96
    DecimalNumber=97
    HexNumber=98
    NumberUnit=99
    HexLiteral=100
    ReservedKeyword=101
    AnonymousKeyword=102
    BreakKeyword=103
    ConstantKeyword=104
    ContinueKeyword=105
    ExternalKeyword=106
    IndexedKeyword=107
    InternalKeyword=108
    PayableKeyword=109
    PrivateKeyword=110
    PublicKeyword=111
    PureKeyword=112
    ViewKeyword=113
    Identifier=114
    StringLiteral=115
    WS=116
    COMMENT=117
    LINE_COMMENT=118

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class SourceUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__0) | (1 << SolidityParser.T__10) | (1 << SolidityParser.T__16) | (1 << SolidityParser.T__17) | (1 << SolidityParser.T__18))) != 0):
                self.state = 169
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__0]:
                    self.state = 166
                    self.pragmaDirective()
                    pass
                elif token in [SolidityParser.T__10]:
                    self.state = 167
                    self.importDirective()
                    pass
                elif token in [SolidityParser.T__16, SolidityParser.T__17, SolidityParser.T__18]:
                    self.state = 168
                    self.contractDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 174
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self.match(SolidityParser.T__0)
            self.state = 177
            self.pragmaName()
            self.state = 178
            self.pragmaValue()
            self.state = 179
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 183
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 184
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.versionConstraint()
            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0) or _la==SolidityParser.VersionLiteral:
                self.state = 188
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0):
                self.state = 193
                self.versionOperator()


            self.state = 196
            self.match(SolidityParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.identifier()
            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__9:
                self.state = 199
                self.match(SolidityParser.T__9)
                self.state = 200
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 203
                self.match(SolidityParser.T__10)
                self.state = 204
                self.match(SolidityParser.StringLiteral)
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__9:
                    self.state = 205
                    self.match(SolidityParser.T__9)
                    self.state = 206
                    self.identifier()


                self.state = 209
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 210
                self.match(SolidityParser.T__10)
                self.state = 213
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__11]:
                    self.state = 211
                    self.match(SolidityParser.T__11)
                    pass
                elif token in [SolidityParser.T__12, SolidityParser.Identifier]:
                    self.state = 212
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__9:
                    self.state = 215
                    self.match(SolidityParser.T__9)
                    self.state = 216
                    self.identifier()


                self.state = 219
                self.match(SolidityParser.T__12)
                self.state = 220
                self.match(SolidityParser.StringLiteral)
                self.state = 221
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 222
                self.match(SolidityParser.T__10)
                self.state = 223
                self.match(SolidityParser.T__13)
                self.state = 224
                self.importDeclaration()
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 225
                    self.match(SolidityParser.T__14)
                    self.state = 226
                    self.importDeclaration()
                    self.state = 231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 232
                self.match(SolidityParser.T__15)
                self.state = 233
                self.match(SolidityParser.T__12)
                self.state = 234
                self.match(SolidityParser.StringLiteral)
                self.state = 235
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__16) | (1 << SolidityParser.T__17) | (1 << SolidityParser.T__18))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 240
            self.identifier()
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__19:
                self.state = 241
                self.match(SolidityParser.T__19)
                self.state = 242
                self.inheritanceSpecifier()
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 243
                    self.match(SolidityParser.T__14)
                    self.state = 244
                    self.inheritanceSpecifier()
                    self.state = 249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 252
            self.match(SolidityParser.T__13)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__30) | (1 << SolidityParser.T__34) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.Identifier - 90)))) != 0):
                self.state = 253
                self.contractPart()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 259
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InheritanceSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.userDefinedTypeName()
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__20:
                self.state = 262
                self.match(SolidityParser.T__20)
                self.state = 263
                self.expression(0)
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 264
                    self.match(SolidityParser.T__14)
                    self.state = 265
                    self.expression(0)
                    self.state = 270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 271
                self.match(SolidityParser.T__21)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def constructorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ConstructorDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_contractPart)
        try:
            self.state = 283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 275
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 276
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 277
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 278
                self.constructorDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 279
                self.modifierDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 280
                self.functionDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 281
                self.eventDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 282
                self.enumDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateVariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.typeName(0)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityParser.ConstantKeyword - 104)) | (1 << (SolidityParser.InternalKeyword - 104)) | (1 << (SolidityParser.PrivateKeyword - 104)) | (1 << (SolidityParser.PublicKeyword - 104)))) != 0):
                self.state = 286
                _la = self._input.LA(1)
                if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityParser.ConstantKeyword - 104)) | (1 << (SolidityParser.InternalKeyword - 104)) | (1 << (SolidityParser.PrivateKeyword - 104)) | (1 << (SolidityParser.PublicKeyword - 104)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 292
            self.identifier()
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__8:
                self.state = 293
                self.match(SolidityParser.T__8)
                self.state = 294
                self.expression(0)


            self.state = 297
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingForDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(SolidityParser.T__22)
            self.state = 300
            self.identifier()
            self.state = 301
            self.match(SolidityParser.T__23)
            self.state = 304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__11]:
                self.state = 302
                self.match(SolidityParser.T__11)
                pass
            elif token in [SolidityParser.T__12, SolidityParser.T__27, SolidityParser.T__34, SolidityParser.T__46, SolidityParser.T__47, SolidityParser.T__48, SolidityParser.T__49, SolidityParser.T__50, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.Identifier]:
                self.state = 303
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 306
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(SolidityParser.T__24)
            self.state = 309
            self.identifier()
            self.state = 310
            self.match(SolidityParser.T__13)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__34) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.Identifier - 90)))) != 0):
                self.state = 311
                self.variableDeclaration()
                self.state = 312
                self.match(SolidityParser.T__1)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__34) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.Identifier - 90)))) != 0):
                    self.state = 313
                    self.variableDeclaration()
                    self.state = 314
                    self.match(SolidityParser.T__1)
                    self.state = 320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 323
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)




    def constructorDefinition(self):

        localctx = SolidityParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_constructorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(SolidityParser.T__25)
            self.state = 326
            self.parameterList()
            self.state = 327
            self.modifierList()
            self.state = 328
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(SolidityParser.T__26)
            self.state = 331
            self.identifier()
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__20:
                self.state = 332
                self.parameterList()


            self.state = 335
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.identifier()
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__20:
                self.state = 338
                self.match(SolidityParser.T__20)
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.BooleanLiteral - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) != 0):
                    self.state = 339
                    self.expressionList()


                self.state = 342
                self.match(SolidityParser.T__21)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(SolidityParser.T__27)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__12 or _la==SolidityParser.Identifier:
                self.state = 346
                self.identifier()


            self.state = 349
            self.parameterList()
            self.state = 350
            self.modifierList()
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__28:
                self.state = 351
                self.returnParameters()


            self.state = 356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 354
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__13]:
                self.state = 355
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(SolidityParser.T__28)
            self.state = 359
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__12 or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityParser.ConstantKeyword - 104)) | (1 << (SolidityParser.ExternalKeyword - 104)) | (1 << (SolidityParser.InternalKeyword - 104)) | (1 << (SolidityParser.PayableKeyword - 104)) | (1 << (SolidityParser.PrivateKeyword - 104)) | (1 << (SolidityParser.PublicKeyword - 104)) | (1 << (SolidityParser.PureKeyword - 104)) | (1 << (SolidityParser.ViewKeyword - 104)) | (1 << (SolidityParser.Identifier - 104)))) != 0):
                self.state = 367
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__12, SolidityParser.Identifier]:
                    self.state = 361
                    self.modifierInvocation()
                    pass
                elif token in [SolidityParser.ConstantKeyword, SolidityParser.PayableKeyword, SolidityParser.PureKeyword, SolidityParser.ViewKeyword]:
                    self.state = 362
                    self.stateMutability()
                    pass
                elif token in [SolidityParser.ExternalKeyword]:
                    self.state = 363
                    self.match(SolidityParser.ExternalKeyword)
                    pass
                elif token in [SolidityParser.PublicKeyword]:
                    self.state = 364
                    self.match(SolidityParser.PublicKeyword)
                    pass
                elif token in [SolidityParser.InternalKeyword]:
                    self.state = 365
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [SolidityParser.PrivateKeyword]:
                    self.state = 366
                    self.match(SolidityParser.PrivateKeyword)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(SolidityParser.T__29)
            self.state = 373
            self.identifier()
            self.state = 374
            self.eventParameterList()
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.AnonymousKeyword:
                self.state = 375
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 378
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(SolidityParser.T__30)
            self.state = 383
            self.identifier()
            self.state = 384
            self.match(SolidityParser.T__13)
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__12 or _la==SolidityParser.Identifier:
                self.state = 385
                self.enumValue()


            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 388
                self.match(SolidityParser.T__14)
                self.state = 389
                self.enumValue()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 395
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(SolidityParser.T__20)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__34) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.Identifier - 90)))) != 0):
                self.state = 398
                self.parameter()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 399
                    self.match(SolidityParser.T__14)
                    self.state = 400
                    self.parameter()
                    self.state = 405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 408
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.typeName(0)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__36 or _la==SolidityParser.T__37:
                self.state = 411
                self.storageLocation()


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__12 or _la==SolidityParser.Identifier:
                self.state = 414
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(SolidityParser.T__20)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__34) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.Identifier - 90)))) != 0):
                self.state = 418
                self.eventParameter()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 419
                    self.match(SolidityParser.T__14)
                    self.state = 420
                    self.eventParameter()
                    self.state = 425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 428
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.typeName(0)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.IndexedKeyword:
                self.state = 431
                self.match(SolidityParser.IndexedKeyword)


            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__12 or _la==SolidityParser.Identifier:
                self.state = 434
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)




    def functionTypeParameterList(self):

        localctx = SolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(SolidityParser.T__20)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__34) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.Identifier - 90)))) != 0):
                self.state = 438
                self.functionTypeParameter()
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 439
                    self.match(SolidityParser.T__14)
                    self.state = 440
                    self.functionTypeParameter()
                    self.state = 445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 448
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)




    def functionTypeParameter(self):

        localctx = SolidityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.typeName(0)
            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__36 or _la==SolidityParser.T__37:
                self.state = 451
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.typeName(0)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__36 or _la==SolidityParser.T__37:
                self.state = 455
                self.storageLocation()


            self.state = 458
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__46, SolidityParser.T__47, SolidityParser.T__48, SolidityParser.T__49, SolidityParser.T__50, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed]:
                self.state = 461
                self.elementaryTypeName()
                pass
            elif token in [SolidityParser.T__12, SolidityParser.Identifier]:
                self.state = 462
                self.userDefinedTypeName()
                pass
            elif token in [SolidityParser.T__34]:
                self.state = 463
                self.mapping()
                pass
            elif token in [SolidityParser.T__27]:
                self.state = 464
                self.functionTypeName()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 467
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 468
                    self.match(SolidityParser.T__31)
                    self.state = 470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.BooleanLiteral - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) != 0):
                        self.state = 469
                        self.expression(0)


                    self.state = 472
                    self.match(SolidityParser.T__32) 
                self.state = 477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UserDefinedTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.identifier()
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 479
                    self.match(SolidityParser.T__33)
                    self.state = 480
                    self.identifier() 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MappingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(SolidityParser.T__34)
            self.state = 487
            self.match(SolidityParser.T__20)
            self.state = 488
            self.elementaryTypeName()
            self.state = 489
            self.match(SolidityParser.T__35)
            self.state = 490
            self.typeName(0)
            self.state = 491
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(SolidityParser.T__27)
            self.state = 494
            self.functionTypeParameterList()
            self.state = 500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 498
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityParser.InternalKeyword]:
                        self.state = 495
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [SolidityParser.ExternalKeyword]:
                        self.state = 496
                        self.match(SolidityParser.ExternalKeyword)
                        pass
                    elif token in [SolidityParser.ConstantKeyword, SolidityParser.PayableKeyword, SolidityParser.PureKeyword, SolidityParser.ViewKeyword]:
                        self.state = 497
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

            self.state = 505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 503
                self.match(SolidityParser.T__28)
                self.state = 504
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageLocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            _la = self._input.LA(1)
            if not(_la==SolidityParser.T__36 or _la==SolidityParser.T__37):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateMutabilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityParser.ConstantKeyword - 104)) | (1 << (SolidityParser.PayableKeyword - 104)) | (1 << (SolidityParser.PureKeyword - 104)) | (1 << (SolidityParser.ViewKeyword - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(SolidityParser.T__13)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__23) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__34) | (1 << SolidityParser.T__38) | (1 << SolidityParser.T__40) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__42) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__44) | (1 << SolidityParser.T__45) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.BooleanLiteral - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.BreakKeyword - 90)) | (1 << (SolidityParser.ContinueKeyword - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) != 0):
                self.state = 512
                self.statement()
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 518
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_statement)
        try:
            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                self.ifStatement()
                pass
            elif token in [SolidityParser.T__40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.whileStatement()
                pass
            elif token in [SolidityParser.T__23]:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.forStatement()
                pass
            elif token in [SolidityParser.T__13]:
                self.enterOuterAlt(localctx, 4)
                self.state = 523
                self.block()
                pass
            elif token in [SolidityParser.T__41]:
                self.enterOuterAlt(localctx, 5)
                self.state = 524
                self.inlineAssemblyStatement()
                pass
            elif token in [SolidityParser.T__42]:
                self.enterOuterAlt(localctx, 6)
                self.state = 525
                self.doWhileStatement()
                pass
            elif token in [SolidityParser.ContinueKeyword]:
                self.enterOuterAlt(localctx, 7)
                self.state = 526
                self.continueStatement()
                pass
            elif token in [SolidityParser.BreakKeyword]:
                self.enterOuterAlt(localctx, 8)
                self.state = 527
                self.breakStatement()
                pass
            elif token in [SolidityParser.T__43]:
                self.enterOuterAlt(localctx, 9)
                self.state = 528
                self.returnStatement()
                pass
            elif token in [SolidityParser.T__44]:
                self.enterOuterAlt(localctx, 10)
                self.state = 529
                self.throwStatement()
                pass
            elif token in [SolidityParser.T__45]:
                self.enterOuterAlt(localctx, 11)
                self.state = 530
                self.emitStatement()
                pass
            elif token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__20, SolidityParser.T__27, SolidityParser.T__31, SolidityParser.T__34, SolidityParser.T__46, SolidityParser.T__47, SolidityParser.T__48, SolidityParser.T__49, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteral, SolidityParser.Identifier, SolidityParser.StringLiteral]:
                self.enterOuterAlt(localctx, 12)
                self.state = 531
                self.simpleStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.expression(0)
            self.state = 535
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(SolidityParser.T__38)
            self.state = 538
            self.match(SolidityParser.T__20)
            self.state = 539
            self.expression(0)
            self.state = 540
            self.match(SolidityParser.T__21)
            self.state = 541
            self.statement()
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 542
                self.match(SolidityParser.T__39)
                self.state = 543
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(SolidityParser.T__40)
            self.state = 547
            self.match(SolidityParser.T__20)
            self.state = 548
            self.expression(0)
            self.state = 549
            self.match(SolidityParser.T__21)
            self.state = 550
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 552
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 553
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(SolidityParser.T__23)
            self.state = 557
            self.match(SolidityParser.T__20)
            self.state = 560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__20, SolidityParser.T__27, SolidityParser.T__31, SolidityParser.T__34, SolidityParser.T__46, SolidityParser.T__47, SolidityParser.T__48, SolidityParser.T__49, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteral, SolidityParser.Identifier, SolidityParser.StringLiteral]:
                self.state = 558
                self.simpleStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 559
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.BooleanLiteral - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) != 0):
                self.state = 562
                self.expression(0)


            self.state = 565
            self.match(SolidityParser.T__1)
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.BooleanLiteral - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) != 0):
                self.state = 566
                self.expression(0)


            self.state = 569
            self.match(SolidityParser.T__21)
            self.state = 570
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineAssemblyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(SolidityParser.T__41)
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.StringLiteral:
                self.state = 573
                self.match(SolidityParser.StringLiteral)


            self.state = 576
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoWhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(SolidityParser.T__42)
            self.state = 579
            self.statement()
            self.state = 580
            self.match(SolidityParser.T__40)
            self.state = 581
            self.match(SolidityParser.T__20)
            self.state = 582
            self.expression(0)
            self.state = 583
            self.match(SolidityParser.T__21)
            self.state = 584
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(SolidityParser.ContinueKeyword)
            self.state = 587
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(SolidityParser.BreakKeyword)
            self.state = 590
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(SolidityParser.T__43)
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.BooleanLiteral - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) != 0):
                self.state = 593
                self.expression(0)


            self.state = 596
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(SolidityParser.T__44)
            self.state = 599
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(SolidityParser.T__45)
            self.state = 602
            self.functionCall()
            self.state = 603
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 605
                self.match(SolidityParser.T__46)
                self.state = 606
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 607
                self.variableDeclaration()
                pass


            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__8:
                self.state = 610
                self.match(SolidityParser.T__8)
                self.state = 611
                self.expression(0)


            self.state = 614
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(SolidityParser.T__20)
            self.state = 623
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SolidityParser.T__12 or _la==SolidityParser.Identifier:
                        self.state = 617
                        self.identifier()


                    self.state = 620
                    self.match(SolidityParser.T__14) 
                self.state = 625
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__12 or _la==SolidityParser.Identifier:
                self.state = 626
                self.identifier()


            self.state = 629
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementaryTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            _la = self._input.LA(1)
            if not(((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (SolidityParser.T__46 - 47)) | (1 << (SolidityParser.T__47 - 47)) | (1 << (SolidityParser.T__48 - 47)) | (1 << (SolidityParser.T__49 - 47)) | (1 << (SolidityParser.T__50 - 47)) | (1 << (SolidityParser.Int - 47)) | (1 << (SolidityParser.Uint - 47)) | (1 << (SolidityParser.Byte - 47)) | (1 << (SolidityParser.Fixed - 47)) | (1 << (SolidityParser.Ufixed - 47)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 634
                self.match(SolidityParser.T__53)
                self.state = 635
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 636
                self.match(SolidityParser.T__20)
                self.state = 637
                self.expression(0)
                self.state = 638
                self.match(SolidityParser.T__21)
                pass

            elif la_ == 3:
                self.state = 640
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__51 or _la==SolidityParser.T__52):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 641
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 642
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__54 or _la==SolidityParser.T__55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 643
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 644
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__56 or _la==SolidityParser.T__57):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 645
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 646
                self.match(SolidityParser.T__58)
                self.state = 647
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 648
                self.match(SolidityParser.T__3)
                self.state = 649
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 650
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 710
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 653
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 654
                        self.match(SolidityParser.T__59)
                        self.state = 655
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 656
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 657
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__11) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 658
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 659
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 660
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__54 or _la==SolidityParser.T__55):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 661
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 662
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 663
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__62 or _la==SolidityParser.T__63):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 664
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 665
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 666
                        self.match(SolidityParser.T__64)
                        self.state = 667
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 668
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 669
                        self.match(SolidityParser.T__2)
                        self.state = 670
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 671
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 672
                        self.match(SolidityParser.T__65)
                        self.state = 673
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 674
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 675
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 676
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 677
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 678
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__66 or _la==SolidityParser.T__67):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 679
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 680
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 681
                        self.match(SolidityParser.T__68)
                        self.state = 682
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 683
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 684
                        self.match(SolidityParser.T__69)
                        self.state = 685
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 686
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 687
                        self.match(SolidityParser.T__70)
                        self.state = 688
                        self.expression(0)
                        self.state = 689
                        self.match(SolidityParser.T__71)
                        self.state = 690
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 692
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 693
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__8 or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (SolidityParser.T__72 - 73)) | (1 << (SolidityParser.T__73 - 73)) | (1 << (SolidityParser.T__74 - 73)) | (1 << (SolidityParser.T__75 - 73)) | (1 << (SolidityParser.T__76 - 73)) | (1 << (SolidityParser.T__77 - 73)) | (1 << (SolidityParser.T__78 - 73)) | (1 << (SolidityParser.T__79 - 73)) | (1 << (SolidityParser.T__80 - 73)) | (1 << (SolidityParser.T__81 - 73)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 694
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 695
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 696
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__51 or _la==SolidityParser.T__52):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 697
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 698
                        self.match(SolidityParser.T__31)
                        self.state = 699
                        self.expression(0)
                        self.state = 700
                        self.match(SolidityParser.T__32)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 702
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 703
                        self.match(SolidityParser.T__20)
                        self.state = 704
                        self.functionCallArguments()
                        self.state = 705
                        self.match(SolidityParser.T__21)
                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 707
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 708
                        self.match(SolidityParser.T__33)
                        self.state = 709
                        self.identifier()
                        pass

             
                self.state = 714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(SolidityParser.HexLiteral, 0)

        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def elementaryTypeNameExpression(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_primaryExpression)
        try:
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 715
                self.match(SolidityParser.BooleanLiteral)
                pass
            elif token in [SolidityParser.DecimalNumber, SolidityParser.HexNumber]:
                self.enterOuterAlt(localctx, 2)
                self.state = 716
                self.numberLiteral()
                pass
            elif token in [SolidityParser.HexLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 717
                self.match(SolidityParser.HexLiteral)
                pass
            elif token in [SolidityParser.StringLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 718
                self.match(SolidityParser.StringLiteral)
                pass
            elif token in [SolidityParser.T__12, SolidityParser.Identifier]:
                self.enterOuterAlt(localctx, 5)
                self.state = 719
                self.identifier()
                pass
            elif token in [SolidityParser.T__20, SolidityParser.T__31]:
                self.enterOuterAlt(localctx, 6)
                self.state = 720
                self.tupleExpression()
                pass
            elif token in [SolidityParser.T__46, SolidityParser.T__47, SolidityParser.T__48, SolidityParser.T__49, SolidityParser.T__50, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed]:
                self.enterOuterAlt(localctx, 7)
                self.state = 721
                self.elementaryTypeNameExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.expression(0)
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 725
                self.match(SolidityParser.T__14)
                self.state = 726
                self.expression(0)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameValueListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.nameValue()
            self.state = 737
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 733
                    self.match(SolidityParser.T__14)
                    self.state = 734
                    self.nameValue() 
                self.state = 739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__14:
                self.state = 740
                self.match(SolidityParser.T__14)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.identifier()
            self.state = 744
            self.match(SolidityParser.T__71)
            self.state = 745
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.match(SolidityParser.T__13)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__12 or _la==SolidityParser.Identifier:
                    self.state = 748
                    self.nameValueList()


                self.state = 751
                self.match(SolidityParser.T__15)
                pass
            elif token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__20, SolidityParser.T__21, SolidityParser.T__31, SolidityParser.T__46, SolidityParser.T__47, SolidityParser.T__48, SolidityParser.T__49, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteral, SolidityParser.Identifier, SolidityParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.BooleanLiteral - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) != 0):
                    self.state = 752
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.expression(0)
            self.state = 758
            self.match(SolidityParser.T__20)
            self.state = 759
            self.functionCallArguments()
            self.state = 760
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(SolidityParser.T__13)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__23) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__38) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__50))) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (SolidityParser.T__82 - 83)) | (1 << (SolidityParser.T__84 - 83)) | (1 << (SolidityParser.T__85 - 83)) | (1 << (SolidityParser.DecimalNumber - 83)) | (1 << (SolidityParser.HexNumber - 83)) | (1 << (SolidityParser.HexLiteral - 83)) | (1 << (SolidityParser.BreakKeyword - 83)) | (1 << (SolidityParser.ContinueKeyword - 83)) | (1 << (SolidityParser.Identifier - 83)) | (1 << (SolidityParser.StringLiteral - 83)))) != 0):
                self.state = 763
                self.assemblyItem()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 769
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(SolidityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def HexLiteral(self):
            return self.getToken(SolidityParser.HexLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_assemblyItem)
        try:
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 772
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 773
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 774
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 775
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 776
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 777
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 778
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 779
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 780
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 781
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 782
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 783
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 784
                self.subAssembly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 785
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 786
                self.match(SolidityParser.StringLiteral)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 787
                self.match(SolidityParser.HexLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_assemblyExpression)
        try:
            self.state = 792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__12, SolidityParser.T__43, SolidityParser.T__47, SolidityParser.T__50, SolidityParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.assemblyCall()
                pass
            elif token in [SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteral, SolidityParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.assemblyLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__43]:
                self.state = 794
                self.match(SolidityParser.T__43)
                pass
            elif token in [SolidityParser.T__47]:
                self.state = 795
                self.match(SolidityParser.T__47)
                pass
            elif token in [SolidityParser.T__50]:
                self.state = 796
                self.match(SolidityParser.T__50)
                pass
            elif token in [SolidityParser.T__12, SolidityParser.Identifier]:
                self.state = 797
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 800
                self.match(SolidityParser.T__20)
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__50))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteral - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteral - 97)))) != 0):
                    self.state = 801
                    self.assemblyExpression()


                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 804
                    self.match(SolidityParser.T__14)
                    self.state = 805
                    self.assemblyExpression()
                    self.state = 810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 811
                self.match(SolidityParser.T__21)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyLocalDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(SolidityParser.T__82)
            self.state = 815
            self.assemblyIdentifierOrList()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__83:
                self.state = 816
                self.match(SolidityParser.T__83)
                self.state = 817
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.assemblyIdentifierOrList()
            self.state = 821
            self.match(SolidityParser.T__83)
            self.state = 822
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIdentifierOrListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)




    def assemblyIdentifierOrList(self):

        localctx = SolidityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__12, SolidityParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                self.identifier()
                pass
            elif token in [SolidityParser.T__20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.match(SolidityParser.T__20)
                self.state = 826
                self.assemblyIdentifierList()
                self.state = 827
                self.match(SolidityParser.T__21)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.identifier()
            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 832
                self.match(SolidityParser.T__14)
                self.state = 833
                self.identifier()
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyStackAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(SolidityParser.T__84)
            self.state = 840
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.identifier()
            self.state = 843
            self.match(SolidityParser.T__71)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblySwitchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(SolidityParser.T__85)
            self.state = 846
            self.assemblyExpression()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__86 or _la==SolidityParser.T__87:
                self.state = 847
                self.assemblyCase()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyCase)
        try:
            self.state = 859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.match(SolidityParser.T__86)
                self.state = 854
                self.assemblyLiteral()
                self.state = 855
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 857
                self.match(SolidityParser.T__87)
                self.state = 858
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(SolidityParser.T__27)
            self.state = 862
            self.identifier()
            self.state = 863
            self.match(SolidityParser.T__20)
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__12 or _la==SolidityParser.Identifier:
                self.state = 864
                self.assemblyIdentifierList()


            self.state = 867
            self.match(SolidityParser.T__21)
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__88:
                self.state = 868
                self.assemblyFunctionReturns()


            self.state = 871
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyFunctionReturnsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(SolidityParser.T__88)
            self.state = 874
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyForContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(SolidityParser.T__23)
            self.state = 879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__13]:
                self.state = 877
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__12, SolidityParser.T__43, SolidityParser.T__47, SolidityParser.T__50, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteral, SolidityParser.Identifier, SolidityParser.StringLiteral]:
                self.state = 878
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 881
            self.assemblyExpression()
            self.state = 884
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__13]:
                self.state = 882
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__12, SolidityParser.T__43, SolidityParser.T__47, SolidityParser.T__50, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteral, SolidityParser.Identifier, SolidityParser.StringLiteral]:
                self.state = 883
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 886
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(SolidityParser.T__38)
            self.state = 889
            self.assemblyExpression()
            self.state = 890
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def HexLiteral(self):
            return self.getToken(SolidityParser.HexLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteral - 97)) | (1 << (SolidityParser.StringLiteral - 97)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubAssemblyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)




    def subAssembly(self):

        localctx = SolidityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(SolidityParser.T__41)
            self.state = 895
            self.identifier()
            self.state = 896
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 898
                self.match(SolidityParser.T__20)

                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.BooleanLiteral - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) != 0):
                    self.state = 899
                    self.expression(0)


                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 902
                    self.match(SolidityParser.T__14)
                    self.state = 904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.BooleanLiteral - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) != 0):
                        self.state = 903
                        self.expression(0)


                    self.state = 910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 911
                self.match(SolidityParser.T__21)
                pass
            elif token in [SolidityParser.T__31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.match(SolidityParser.T__31)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.Int - 90)) | (1 << (SolidityParser.Uint - 90)) | (1 << (SolidityParser.Byte - 90)) | (1 << (SolidityParser.Fixed - 90)) | (1 << (SolidityParser.Ufixed - 90)) | (1 << (SolidityParser.BooleanLiteral - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteral - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteral - 90)))) != 0):
                    self.state = 913
                    self.expression(0)
                    self.state = 918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SolidityParser.T__14:
                        self.state = 914
                        self.match(SolidityParser.T__14)
                        self.state = 915
                        self.expression(0)
                        self.state = 920
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 923
                self.match(SolidityParser.T__32)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementaryTypeNameExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeNameExpression" ):
                listener.enterElementaryTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeNameExpression" ):
                listener.exitElementaryTypeNameExpression(self)




    def elementaryTypeNameExpression(self):

        localctx = SolidityParser.ElementaryTypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_elementaryTypeNameExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.elementaryTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            _la = self._input.LA(1)
            if not(_la==SolidityParser.DecimalNumber or _la==SolidityParser.HexNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 929
                self.match(SolidityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            _la = self._input.LA(1)
            if not(_la==SolidityParser.T__12 or _la==SolidityParser.Identifier):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[31] = self.typeName_sempred
        self._predicates[54] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 21)
         




