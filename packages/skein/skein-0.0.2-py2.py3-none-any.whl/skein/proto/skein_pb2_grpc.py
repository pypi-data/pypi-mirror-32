from __future__ import absolute_import# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import skein_pb2 as skein__pb2


class DaemonStub(object):
  """Daemon only definitions

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ping = channel.unary_unary(
        '/skein.Daemon/ping',
        request_serializer=skein__pb2.Empty.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )
    self.getStatus = channel.unary_unary(
        '/skein.Daemon/getStatus',
        request_serializer=skein__pb2.Application.SerializeToString,
        response_deserializer=skein__pb2.ApplicationReport.FromString,
        )
    self.getApplications = channel.unary_unary(
        '/skein.Daemon/getApplications',
        request_serializer=skein__pb2.ApplicationsRequest.SerializeToString,
        response_deserializer=skein__pb2.ApplicationsResponse.FromString,
        )
    self.submit = channel.unary_unary(
        '/skein.Daemon/submit',
        request_serializer=skein__pb2.Job.SerializeToString,
        response_deserializer=skein__pb2.Application.FromString,
        )
    self.waitForStart = channel.unary_unary(
        '/skein.Daemon/waitForStart',
        request_serializer=skein__pb2.Application.SerializeToString,
        response_deserializer=skein__pb2.ApplicationReport.FromString,
        )
    self.kill = channel.unary_unary(
        '/skein.Daemon/kill',
        request_serializer=skein__pb2.Application.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )


class DaemonServicer(object):
  """Daemon only definitions

  """

  def ping(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getApplications(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def submit(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitForStart(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def kill(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DaemonServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ping': grpc.unary_unary_rpc_method_handler(
          servicer.ping,
          request_deserializer=skein__pb2.Empty.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
      'getStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getStatus,
          request_deserializer=skein__pb2.Application.FromString,
          response_serializer=skein__pb2.ApplicationReport.SerializeToString,
      ),
      'getApplications': grpc.unary_unary_rpc_method_handler(
          servicer.getApplications,
          request_deserializer=skein__pb2.ApplicationsRequest.FromString,
          response_serializer=skein__pb2.ApplicationsResponse.SerializeToString,
      ),
      'submit': grpc.unary_unary_rpc_method_handler(
          servicer.submit,
          request_deserializer=skein__pb2.Job.FromString,
          response_serializer=skein__pb2.Application.SerializeToString,
      ),
      'waitForStart': grpc.unary_unary_rpc_method_handler(
          servicer.waitForStart,
          request_deserializer=skein__pb2.Application.FromString,
          response_serializer=skein__pb2.ApplicationReport.SerializeToString,
      ),
      'kill': grpc.unary_unary_rpc_method_handler(
          servicer.kill,
          request_deserializer=skein__pb2.Application.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'skein.Daemon', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MasterStub(object):
  """Master only definitions

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.keystoreGet = channel.unary_unary(
        '/skein.Master/keystoreGet',
        request_serializer=skein__pb2.GetKeyRequest.SerializeToString,
        response_deserializer=skein__pb2.GetKeyResponse.FromString,
        )
    self.keystoreSet = channel.unary_unary(
        '/skein.Master/keystoreSet',
        request_serializer=skein__pb2.SetKeyRequest.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )
    self.keystore = channel.unary_unary(
        '/skein.Master/keystore',
        request_serializer=skein__pb2.Empty.SerializeToString,
        response_deserializer=skein__pb2.KeystoreResponse.FromString,
        )
    self.getService = channel.unary_unary(
        '/skein.Master/getService',
        request_serializer=skein__pb2.ServiceRequest.SerializeToString,
        response_deserializer=skein__pb2.Service.FromString,
        )
    self.getJob = channel.unary_unary(
        '/skein.Master/getJob',
        request_serializer=skein__pb2.Empty.SerializeToString,
        response_deserializer=skein__pb2.Job.FromString,
        )


class MasterServicer(object):
  """Master only definitions

  """

  def keystoreGet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def keystoreSet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def keystore(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getService(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getJob(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MasterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'keystoreGet': grpc.unary_unary_rpc_method_handler(
          servicer.keystoreGet,
          request_deserializer=skein__pb2.GetKeyRequest.FromString,
          response_serializer=skein__pb2.GetKeyResponse.SerializeToString,
      ),
      'keystoreSet': grpc.unary_unary_rpc_method_handler(
          servicer.keystoreSet,
          request_deserializer=skein__pb2.SetKeyRequest.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
      'keystore': grpc.unary_unary_rpc_method_handler(
          servicer.keystore,
          request_deserializer=skein__pb2.Empty.FromString,
          response_serializer=skein__pb2.KeystoreResponse.SerializeToString,
      ),
      'getService': grpc.unary_unary_rpc_method_handler(
          servicer.getService,
          request_deserializer=skein__pb2.ServiceRequest.FromString,
          response_serializer=skein__pb2.Service.SerializeToString,
      ),
      'getJob': grpc.unary_unary_rpc_method_handler(
          servicer.getJob,
          request_deserializer=skein__pb2.Empty.FromString,
          response_serializer=skein__pb2.Job.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'skein.Master', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
