{
  "src/components/ExampleComponent.react.js": {
    "description": "ExampleComponent is an example component.\r\nIt takes a property, `label`, and\r\ndisplays it.\r\nIt renders an input with the property `value`\r\nwhich is editable by the user.",
    "displayName": "ExampleComponent",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this compnent in Dash callbacks"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A label that will be printed when this component is rendered."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value displayed in the input"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\r\nproperties change"
      }
    }
  },
  "src/components/Wordcloud.react.js": {
    "description": "",
    "displayName": "Wordcloud",
    "methods": [
      {
        "name": "drawWordcloud",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this compnent in Dash callbacks"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "// TODO: comment needs to be updated. \r\nWidth of the canvas\r\nDefault: 1024",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "options": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "list": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "array"
          }
        },
        "required": false,
        "description": "List of words/text to paint on the canvas in a 2-d array, \r\nin the form of [word, size], e.g. [['foo', 12], ['bar', 6]].\r\nDefault: Les Misérables",
        "defaultValue": {
          "value": "[\r\n    ['Les Misérables', 30], ['Victor Hugo', 20], ['Jean Valjean', 15],\r\n    ['Javert', 15], ['Fantine', 15], ['Cosette', 15],\r\n    ['Éponine', 12], ['Marius', 12], ['Enjolras', 12],\r\n    ['Thénardiers', 10], ['Gavroche', 10], ['Bishop Myriel', 10],\r\n    ['Patron-Minette', 10], ['God', 10], ['ABC Café', 10],\r\n    ['paris', 8], ['Digne', 8], ['Elephant of the Bastille', 8],\r\n    ['silverware', 5], ['Bagne of Toulon', 5], ['loaf of bread', 5],\r\n    ['Rue Plumet', 5], ['revolution', 5], ['barricade', 5],\r\n    ['sewers', 4], ['Fex urbis lex orbis', 4]\r\n]",
          "computed": false
        }
      },
      "hover": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback to call when the cursor enters or \r\nleaves a region occupied by a word.\r\nThe callback will take arguments callback(item, dimension, event),\r\nwhere event is the original mousemove event.\r\nDefault: hover function with text frame and word frequency tooltip",
        "defaultValue": {
          "value": "function(item, dimension, event) {\r\n    var el = document.getElementById('wcLabel');\r\n    if (!item) {\r\n      el.setAttribute('hidden', true);\r\n  \r\n      return;\r\n    }\r\n  \r\n    el.removeAttribute('hidden');\r\n  \r\n    el.style.left = dimension.x + event.srcElement.offsetLeft + 'px';\r\n    el.style.top = dimension.y + event.srcElement.offsetTop + 'px';\r\n    el.style.width = dimension.w + 'px';\r\n    el.style.height = dimension.h + 'px';\r\n  \r\n    this.hoverDimension = dimension;\r\n\r\n\r\n    if(item.length === 2){\r\n    document.getElementById('wcSpan').setAttribute(\r\n      'data-l10n-args', JSON.stringify({ word: item[0], count: item[1] }));\r\n    document.getElementById('wcSpan').innerHTML =item[0]+':' + item[1];\r\n    } else {\r\n        document.getElementById('wcSpan').setAttribute(\r\n            'data-l10n-args', \r\n            JSON.stringify({ word: item[0], count: item[1], events: item[2] }));\r\n          document.getElementById('wcSpan').innerHTML =item[0]+': ' + item[1] + ' words ' + item[2] + ' events';\r\n    }\r\n  }",
          "computed": false
        }
      },
      "click": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback to call when the user clicks on a word.\r\nThe callback will take arguments callback(item, dimension, event),\r\nwhere event is the original click event.\r\nDefault: null",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      }
    }
  }
}