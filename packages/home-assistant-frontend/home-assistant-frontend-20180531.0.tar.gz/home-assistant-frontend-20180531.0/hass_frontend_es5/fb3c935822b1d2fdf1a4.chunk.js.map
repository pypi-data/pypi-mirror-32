{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-input/paper-textarea.js","webpack:///./node_modules/@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js","webpack:///./node_modules/@polymer/app-storage/app-storage-behavior.js"],"names":["Object","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_7__","a","_template","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_8__","_templateObject","is","behaviors","_paper_input_behavior_js__WEBPACK_IMPORTED_MODULE_3__","_polymer_iron_form_element_behavior_iron_form_element_behavior_js__WEBPACK_IMPORTED_MODULE_2__","properties","_ariaLabelledBy","observer","type","String","_ariaDescribedBy","rows","Number","value","maxRows","selectionStart","this","$","input","textarea","start","selectionEnd","end","_ariaLabelledByChanged","ariaLabelledBy","_focusableElement","setAttribute","_ariaDescribedByChanged","ariaDescribedBy","inputElement","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_4__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_5__","_polymer_iron_validatable_behavior_iron_validatable_behavior_js__WEBPACK_IMPORTED_MODULE_3__","_polymer_iron_behaviors_iron_control_state_js__WEBPACK_IMPORTED_MODULE_1__","notify","bindValue","autocomplete","autofocus","Boolean","inputmode","placeholder","readonly","required","minlength","maxlength","label","listeners","attached","navigator","userAgent","match","style","marginLeft","validate","valid","validity","hasValidator","call","invalid","fire","_bindValueChanged","_valueChanged","mirror","innerHTML","_valueForMirror","_onInput","event","eventPath","_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_6__","b","path","target","_constrain","tokens","_tokens","length","slice","push","join","replace","split","_updateCached","__webpack_require__","SPLICES_RX","LENGTH_RX","NUMBER_RX","AppStorageBehavior","data","zeroValue","sequentialTransactions","log","observers","created","__initialized","__syncingToMemory","__initializingStoredValue","__transactionQueueAdvances","Promise","resolve","ready","_initializeStoredValue","isNew","transactionsComplete","saveValue","args","reset","destroy","initializeStoredValue","_getStoredValue","then","_log","_setStoredValue","syncToMemory","set","bind","getStoredValue","storagePath","setStoredValue","memoryPathToStoragePath","storagePathToMemoryPath","operation","_group","_groupEnd","valueIsEmpty","Array","isArray","prototype","isPrototypeOf","keys","_enqueueTransaction","transaction","result","catch","error","_error","console","apply","arguments","group","groupEnd","initializingStoredValue","e","__dataChanged","change","__pathCanBeIgnored","__normalizeMemoryPath","indexSplices","__pathIsSplices","__parentPath","get","parts","parentPath","currentPath","normalizedPath","i","test","indexOf","__pathRefersToArray","__pathTailToIndex","tail","pop","window","parseInt"],"mappings":"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","file":"fb3c935822b1d2fdf1a4.chunk.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js';\nimport { IronFormElementBehavior } from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport { PaperInputBehavior } from './paper-input-behavior.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float\\$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate\\$=\"[[autoValidate]]\" disabled\\$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden\\$=\"[[!label]]\" aria-hidden=\"true\" for\\$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id\\$=\"[[_inputId]]\" aria-labelledby\\$=\"[[_ariaLabelledBy]]\" aria-describedby\\$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator\\$=\"[[validator]]\" disabled\\$=\"[[disabled]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" name\\$=\"[[name]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\" autocapitalize\\$=\"[[autocapitalize]]\" rows\\$=\"[[rows]]\" max-rows\\$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n`,\n\n  is: 'paper-textarea',\n\n  behaviors: [\n    PaperInputBehavior,\n    IronFormElementBehavior,\n  ],\n\n  properties: {\n    _ariaLabelledBy: {\n      observer: '_ariaLabelledByChanged',\n      type: String,\n    },\n\n    _ariaDescribedBy: {\n      observer: '_ariaDescribedByChanged',\n      type: String,\n    },\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {\n      type: Number,\n      value: 1,\n    },\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {\n      type: Number,\n      value: 0,\n    },\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.input.textarea.selectionStart;\n  },\n\n  set selectionStart(start) {\n    this.$.input.textarea.selectionStart = start;\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.input.textarea.selectionEnd;\n  },\n\n  set selectionEnd(end) {\n    this.$.input.textarea.selectionEnd = end;\n  },\n\n  _ariaLabelledByChanged: function(ariaLabelledBy) {\n    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);\n  },\n\n  _ariaDescribedByChanged: function(ariaDescribedBy) {\n    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);\n  },\n\n  get _focusableElement() {\n    return this.inputElement.textarea;\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n`iron-autogrow-textarea` is an element containing a textarea that grows in height as more\nlines of input are entered. Unless an explicit height or the `maxRows` property is set, it will\nnever scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n@group Iron Elements\n@hero hero.svg\n@demo demo/index.html\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport { IronControlState } from '@polymer/iron-behaviors/iron-control-state.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport { IronValidatableBehavior } from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { dom } from '@polymer/polymer/lib/legacy/polymer.dom.js';\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        width: 400px;\n        border: 1px solid;\n        padding: 2px;\n        -moz-appearance: textarea;\n        -webkit-appearance: textarea;\n        overflow: hidden;\n      }\n\n      .mirror-text {\n        visibility: hidden;\n        word-wrap: break-word;\n        @apply --iron-autogrow-textarea;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n\n      textarea {\n        position: relative;\n        outline: none;\n        border: none;\n        resize: none;\n        background: inherit;\n        color: inherit;\n        /* see comments in template */\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        font-family: inherit;\n        line-height: inherit;\n        text-align: inherit;\n        @apply --iron-autogrow-textarea;\n      }\n\n      textarea::-webkit-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea::-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-ms-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n    </style>\n\n    <!-- the mirror sizes the input/textarea so it grows with typing -->\n    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->\n    <div id=\"mirror\" class=\"mirror-text\" aria-hidden=\"true\">&nbsp;</div>\n\n    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->\n    <div class=\"textarea-container fit\">\n      <textarea id=\"textarea\" name\\$=\"[[name]]\" aria-label\\$=\"[[label]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" disabled\\$=\"[[disabled]]\" rows\\$=\"[[rows]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\"></textarea>\n    </div>\n`,\n\n  is: 'iron-autogrow-textarea',\n  behaviors: [IronValidatableBehavior, IronControlState],\n\n  properties: {\n    /**\n     * Use this property instead of `bind-value` for two-way data binding.\n     * @type {string|number}\n     */\n    value: {observer: '_valueChanged', type: String, notify: true},\n\n    /**\n     * This property is deprecated, and just mirrors `value`. Use `value`\n     * instead.\n     * @type {string|number}\n     */\n    bindValue: {observer: '_bindValueChanged', type: String, notify: true},\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {type: Number, value: 1, observer: '_updateCached'},\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {type: Number, value: 0, observer: '_updateCached'},\n\n    /**\n     * Bound to the textarea's `autocomplete` attribute.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * Bound to the textarea's `autofocus` attribute.\n     */\n    autofocus: {type: Boolean, value: false},\n\n    /**\n     * Bound to the textarea's `inputmode` attribute.\n     */\n    inputmode: {type: String},\n\n    /**\n     * Bound to the textarea's `placeholder` attribute.\n     */\n    placeholder: {type: String},\n\n    /**\n     * Bound to the textarea's `readonly` attribute.\n     */\n    readonly: {type: String},\n\n    /**\n     * Set to true to mark the textarea as required.\n     */\n    required: {type: Boolean},\n\n    /**\n     * The minimum length of the input value.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * Bound to the textarea's `aria-label` attribute.\n     */\n    label: {type: String}\n\n  },\n\n  listeners: {'input': '_onInput'},\n\n  /**\n   * Returns the underlying textarea.\n   * @return {!HTMLTextAreaElement}\n   */\n  get textarea() {\n    return this.$.textarea;\n  },\n\n  /**\n   * Returns textarea's selection start.\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.textarea.selectionStart;\n  },\n\n  /**\n   * Returns textarea's selection end.\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.textarea.selectionEnd;\n  },\n\n  /**\n   * Sets the textarea's selection start.\n   */\n  set selectionStart(value) {\n    this.$.textarea.selectionStart = value;\n  },\n\n  /**\n   * Sets the textarea's selection end.\n   */\n  set selectionEnd(value) {\n    this.$.textarea.selectionEnd = value;\n  },\n\n  attached: function() {\n    /* iOS has an arbitrary left margin of 3px that isn't present\n     * in any other browser, and means that the paper-textarea's cursor\n     * overlaps the label.\n     * See https://github.com/PolymerElements/paper-input/issues/468.\n     */\n    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/);\n    if (IS_IOS) {\n      this.$.textarea.style.marginLeft = '-3px';\n    }\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, if it exists; otherwise, the `textarea`'s validity\n   * is used.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    // Use the nested input's native validity.\n    var valid = this.$.textarea.validity.valid;\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.value === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.value);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _bindValueChanged: function(bindValue) {\n    this.value = bindValue;\n  },\n\n  _valueChanged: function(value) {\n    var textarea = this.textarea;\n    if (!textarea) {\n      return;\n    }\n\n    // If the bindValue changed manually, then we need to also update\n    // the underlying textarea's value. Otherwise this change was probably\n    // generated from the _onInput handler, and the two values are already\n    // the same.\n    if (textarea.value !== value) {\n      textarea.value = !(value || value === 0) ? '' : value;\n    }\n\n    this.bindValue = value;\n    this.$.mirror.innerHTML = this._valueForMirror();\n\n    // Manually notify because we don't want to notify until after setting\n    // value.\n    this.fire('bind-value-changed', {value: this.bindValue});\n  },\n\n  _onInput: function(event) {\n    var eventPath = dom(event).path;\n    this.value = eventPath ? eventPath[0].value : event.target.value;\n  },\n\n  _constrain: function(tokens) {\n    var _tokens;\n    tokens = tokens || [''];\n    // Enforce the min and max heights for a multiline input to avoid\n    // measurement\n    if (this.maxRows > 0 && tokens.length > this.maxRows) {\n      _tokens = tokens.slice(0, this.maxRows);\n    } else {\n      _tokens = tokens.slice(0);\n    }\n    while (this.rows > 0 && _tokens.length < this.rows) {\n      _tokens.push('');\n    }\n    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.\n    return _tokens.join('<br/>') + '&#160;';\n  },\n\n  _valueForMirror: function() {\n    var input = this.textarea;\n    if (!input) {\n      return;\n    }\n    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')\n                                               .replace(/\"/gm, '&quot;')\n                                               .replace(/'/gm, '&#39;')\n                                               .replace(/</gm, '&lt;')\n                                               .replace(/>/gm, '&gt;')\n                                               .split('\\n') :\n                                           [''];\n    return this._constrain(this.tokens);\n  },\n\n  _updateCached: function() {\n    this.$.mirror.innerHTML = this._constrain(this.tokens);\n  }\n});\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nvar SPLICES_RX = /\\.splices$/;\nvar LENGTH_RX = /\\.length$/;\nvar NUMBER_RX = /\\.?#?([0-9]+)$/;\n\n/**\n * AppStorageBehavior is an abstract behavior that makes it easy to\n * synchronize in-memory data and a persistent storage system, such as\n * the browser's IndexedDB, or a remote database like Firebase.\n *\n * For examples of how to use this behavior to write your own app storage\n * elements see `<app-localstorage-document>` here, or check out\n * [polymerfire](https://github.com/Firebase/polymerfire) and\n * [app-pouchdb](https://github.com/PolymerElements/app-pouchdb).\n *\n * @polymerBehavior\n */\nexport const AppStorageBehavior = {\n  properties: {\n    /**\n     * The data to synchronize.\n     */\n    data: {\n      type: Object,\n      notify: true,\n      value: function() {\n        return this.zeroValue;\n      }\n    },\n\n    /**\n     * If this is true transactions will happen one after the other,\n     * never in parallel.\n     *\n     * Specifically, no transaction will begin until every previously\n     * enqueued transaction by this element has completed.\n     *\n     * If it is false, new transactions will be executed as they are\n     * received.\n     */\n    sequentialTransactions: {type: Boolean, value: false},\n\n    /**\n     * When true, will perform detailed logging.\n     */\n    log: {type: Boolean, value: false}\n  },\n\n  observers: ['__dataChanged(data.*)'],\n\n  created: function() {\n    this.__initialized = false;\n    this.__syncingToMemory = false;\n    this.__initializingStoredValue = null;\n    this.__transactionQueueAdvances = Promise.resolve();\n  },\n\n  ready: function() {\n    this._initializeStoredValue();\n  },\n\n  /**\n   * Override this getter to return true if the value has never been\n   * persisted to storage.\n   *\n   * @return {boolean}\n   */\n  get isNew() {\n    return true;\n  },\n\n  /**\n   * A promise that will resolve once all queued transactions\n   * have completed.\n   *\n   * This field is updated as new transactions are enqueued, so it will\n   * only wait for transactions which were enqueued when the field\n   * was accessed.\n   *\n   * This promise never rejects.\n   *\n   * @return {Promise}\n   */\n  get transactionsComplete() {\n    return this.__transactionQueueAdvances;\n  },\n\n  /**\n   * Override this getter to define the default value to use when\n   * there's no data stored.\n   *\n   * @return {*}\n   */\n  get zeroValue() {\n    return undefined;\n  },\n\n  /**\n   * Override this method.\n   *\n   * If the data value represented by this storage instance is new, this\n   * method generates an attempt to write the value to storage.\n   *\n   *\n   * @param {*} args\n   * @return {Promise} a Promise that settles only once the write has.\n   */\n  saveValue: function(args) {\n    return Promise.resolve();\n  },\n\n  /**\n   * Optional. Override this method to clear out the mapping of this\n   * storage object and a logical location within storage.\n   *\n   * If this method is supported, after it's called, isNew() should be\n   * true.\n   */\n  reset: function() {},\n\n  /**\n   * Remove the data from storage.\n   *\n   * @return {Promise} A promise that settles once the destruction is\n   *   complete.\n   */\n  destroy: function() {\n    this.data = this.zeroValue;\n    return this.saveValue();\n  },\n\n  /**\n   * Perform the initial sync between storage and memory. This method\n   * is called automatically while the element is being initialized.\n   * Implementations may override it.\n   *\n   * If an implementation intends to call this method, it should instead\n   * call _initializeStoredValue, which provides reentrancy protection.\n   *\n   * @return {Promise} A promise that settles once this process is\n   *     complete.\n   */\n  initializeStoredValue: function() {\n    if (this.isNew) {\n      return Promise.resolve();\n    }\n\n    // If this is not a \"new\" model, then we should attempt\n    // to read an initial value from storage:\n    return this._getStoredValue('data').then(function(data) {\n      this._log('Got stored value!', data, this.data);\n      if (data == null) {\n        return this._setStoredValue('data', this.data || this.zeroValue);\n      } else {\n        this.syncToMemory(function() {\n          this.set('data', data);\n        });\n      }\n    }.bind(this));\n  },\n\n  /**\n   * Override this method to implement reading a value from storage.\n   *\n   *\n   * @param {string} storagePath The path (through storage) of the value to\n   *   create, relative to the root of storage associated with this instance.\n   * @return {Promise} A promise that resolves with the canonical value stored\n   *   at the provided path when the transaction has completed. _If there is no\n   *   such value at the provided path through storage, then the promise will\n   *   resolve to `undefined`._ The promise will be rejected if the transaction\n   *   fails for any reason.\n   */\n  getStoredValue: function(storagePath) {\n    return Promise.resolve();\n  },\n\n  /**\n   * Override this method to implement creating and updating\n   * stored values.\n   *\n   *\n   * @param {string} storagePath The path of the value to update, relative\n   *   to the root storage path configured for this instance.\n   * @param {*} value The updated in-memory value to apply to the stored value\n   *   at the provided path.\n   * @return {Promise} A promise that resolves with the canonical value stored\n   *   at the provided path when the transaction has completed. The promise\n   *   will be rejected if the transaction fails for any reason.\n   */\n  setStoredValue: function(storagePath, value) {\n    return Promise.resolve(value);\n  },\n\n  /**\n   * Maps a Polymer databinding path to the corresponding path in the\n   * storage system. Override to define a custom mapping.\n   *\n   * The inverse of storagePathToMemoryPath.\n   *\n   * @param {string} path An in-memory path through a storage object.\n   * @return {string} The provided path mapped to the equivalent location in\n   *   storage. This mapped version of the path is suitable for use with the\n   *   CRUD operations on both memory and storage.\n   */\n  memoryPathToStoragePath: function(path) {\n    return path;\n  },\n\n  /**\n   * Maps a storage path to the corresponding Polymer databinding path.\n   * Override to define a custom mapping.\n   *\n   * The inverse of memoryPathToStoragePath.\n   *\n   * @param {string} path The storage path through a storage object.\n   * @return {string} The provided path through storage mapped to the\n   *   equivalent Polymer path through the in-memory representation of storage.\n   */\n  storagePathToMemoryPath: function(path) {\n    return path;\n  },\n\n  /**\n   * Enables performing transformations on the in-memory representation of\n   * storage without activating observers that will cause those\n   * transformations to be re-applied to the storage backend. This is useful\n   * for preventing redundant (or cyclical) application of transformations.\n   *\n   * @param {Function} operation A function that will perform the desired\n   *   transformation. It will be called synchronously, when it is safe to\n   *   apply the transformation.\n   */\n  syncToMemory: function(operation) {\n    if (this.__syncingToMemory) {\n      return;\n    }\n\n    this._group('Sync to memory.');\n\n    this.__syncingToMemory = true;\n    operation.call(this);\n    this.__syncingToMemory = false;\n\n    this._groupEnd('Sync to memory.');\n  },\n\n  /**\n   * A convenience method. Returns true iff value is null, undefined,\n   * an empty array, or an object with no keys.\n   */\n  valueIsEmpty: function(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else if (Object.prototype.isPrototypeOf(value)) {\n      return Object.keys(value).length === 0;\n    } else {\n      return value == null;\n    }\n  },\n\n  /**\n   * Like `getStoredValue` but called with a Polymer path rather than\n   * a storage path.\n   *\n   * @param {string} path The Polymer path to get.\n   * @return {Promise} A Promise of the value stored at that path.\n   */\n  _getStoredValue: function(path) {\n    return this.getStoredValue(this.memoryPathToStoragePath(path));\n  },\n\n  /**\n   * Like `setStoredValue` but called with a Polymer path rather than\n   * a storage path.\n   *\n   * @param {string} path The Polymer path to update.\n   * @param {*} value The updated in-memory value to apply to the stored value\n   *   at the provided path.\n   * @return {Promise} A promise that resolves with the canonical value stored\n   *   at the provided path when the transaction has completed. The promise\n   *   will be rejected if the transaction fails for any reason.\n   */\n  _setStoredValue: function(path, value) {\n    return this.setStoredValue(this.memoryPathToStoragePath(path), value);\n  },\n\n  /**\n   * Enqueues the given function in the transaction queue.\n   *\n   * The transaction queue allows for optional parallelism/sequentiality\n   * via the `sequentialTransactions` boolean property, as well as giving\n   * the user a convenient way to wait for all pending transactions to\n   * finish.\n   *\n   * The given function may be called immediately or after an arbitrary\n   * delay. Its `this` context will be bound to the element.\n   *\n   * If the transaction performs any asynchronous operations it must\n   * return a promise.\n   *\n   * @param {Function} transaction A function implementing the transaction.\n   * @return {Promise} A promise that resolves once the transaction has\n   *   finished. This promise will never reject.\n   */\n  _enqueueTransaction: function(transaction) {\n    if (this.sequentialTransactions) {\n      transaction = transaction.bind(this);\n    } else {\n      var result = transaction.call(this);\n      transaction = function() {\n        return result;\n      };\n    }\n\n    return this.__transactionQueueAdvances =\n               this.__transactionQueueAdvances.then(transaction)\n                   .catch(function(error) {\n                     this._error('Error performing queued transaction.', error);\n                   }.bind(this));\n  },\n\n  /**\n   * A wrapper around `console.log`.\n   */\n  _log: function() {\n    if (this.log) {\n      console.log.apply(console, arguments);\n    }\n  },\n\n  /**\n   * A wrapper around `console.error`.\n   */\n  _error: function() {\n    if (this.log) {\n      console.error.apply(console, arguments);\n    }\n  },\n\n  /**\n   * A wrapper around `console.group`.\n   */\n  _group: function() {\n    if (this.log) {\n      console.group.apply(console, arguments);\n    }\n  },\n\n  /**\n   * A wrapper around `console.groupEnd`.\n   */\n  _groupEnd: function() {\n    if (this.log) {\n      console.groupEnd.apply(console, arguments);\n    }\n  },\n\n  /**\n   * A reentrancy-save wrapper around `this.initializeStoredValue`.\n   * Prefer calling this method over that one.\n   *\n   * @return {Promise} The result of calling `initializeStoredValue`,\n   *   or `undefined` if called while initializing.\n   */\n  _initializeStoredValue: function() {\n    if (this.__initializingStoredValue) {\n      return;\n    }\n\n    this._group('Initializing stored value.');\n\n    var initializingStoredValue = this.__initializingStoredValue =\n        this.initializeStoredValue()\n            .then(function() {\n              this.__initialized = true;\n              this.__initializingStoredValue = null;\n              this._groupEnd('Initializing stored value.');\n            }.bind(this))\n            .catch(function(e) {\n              this.__initializingStoredValue = null;\n              this._groupEnd('Initializing stored value.');\n            }.bind(this));\n\n    return this._enqueueTransaction(function() {\n      return initializingStoredValue;\n    });\n  },\n\n  __dataChanged: function(change) {\n    if (this.isNew || this.__syncingToMemory || !this.__initialized ||\n        this.__pathCanBeIgnored(change.path)) {\n      return;\n    }\n\n    var path = this.__normalizeMemoryPath(change.path);\n    var value = change.value;\n    var indexSplices = value && value.indexSplices;\n\n    this._enqueueTransaction(function() {\n      this._log('Setting', path + ':', indexSplices || value);\n\n      if (indexSplices && this.__pathIsSplices(path)) {\n        path = this.__parentPath(path);\n        value = this.get(path);\n      }\n\n      return this._setStoredValue(path, value);\n    });\n  },\n\n  __normalizeMemoryPath: function(path) {\n    var parts = path.split('.');\n    var parentPath = [];\n    var currentPath = [];\n    var normalizedPath = [];\n    var index;\n\n    for (var i = 0; i < parts.length; ++i) {\n      currentPath.push(parts[i]);\n      if (/^#/.test(parts[i])) {\n        normalizedPath.push(\n            this.get(parentPath).indexOf(this.get(currentPath)));\n      } else {\n        normalizedPath.push(parts[i]);\n      }\n      parentPath.push(parts[i]);\n    }\n\n    return normalizedPath.join('.');\n  },\n\n  __parentPath: function(path) {\n    var parentPath = path.split('.');\n    return parentPath.slice(0, parentPath.length - 1).join('.');\n  },\n\n  __pathCanBeIgnored: function(path) {\n    return LENGTH_RX.test(path) &&\n        Array.isArray(this.get(this.__parentPath(path)));\n  },\n\n  __pathIsSplices: function(path) {\n    return SPLICES_RX.test(path) &&\n        Array.isArray(this.get(this.__parentPath(path)));\n  },\n\n  __pathRefersToArray: function(path) {\n    return (SPLICES_RX.test(path) || LENGTH_RX.test(path)) &&\n        Array.isArray(this.get(this.__parentPath(path)));\n  },\n\n  __pathTailToIndex: function(path) {\n    var tail = path.split('.').pop();\n    return window.parseInt(tail.replace(NUMBER_RX, '$1'), 10);\n  }\n};\n"],"sourceRoot":""}