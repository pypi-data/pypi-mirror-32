'''
Author: Daniel Dowsett 05/2018
'''
import os
import subprocess


place_names = ('hundred', 'thousand', 'million', 'billion', 'trillion', 'somethings')
extension = 'mp3'

path_to_mathtraq = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')

class Digit():
    """
    Stores filenames of audio files for the different ways a 
    digit can be expressed, depending on its position
    E.g.    .single -> "three"
            .teens  -> "thirteen"
            .tens   -> "thirty"
    """
    def __init__(self, value):
        self.single =  os.path.join(path_to_mathtraq, 'sounds', 'digits', str(value), 'single.' + extension)
        self.teens =  os.path.join(path_to_mathtraq, 'sounds',  'digits', str(value), 'teens.' + extension)
        if not value == 0 and not value == 1:
            self.tens =  os.path.join(path_to_mathtraq, 'sounds', 'digits', str(value), 'tens.' + extension)


#maps keys to the full pathnames to sound files
audio_segments = {
    '0': Digit(0),
    '1': Digit(1),
    '2': Digit(2),
    '3': Digit(3),
    '4': Digit(4),
    '5': Digit(5),
    '6': Digit(6),
    '7': Digit(7),
    '8': Digit(8),
    '9': Digit(9),

    '+': path_to_mathtraq + '/sounds/operators/addition.' + extension,
    '-': path_to_mathtraq + '/sounds/operators/subtraction.' + extension,
    '*': path_to_mathtraq + '/sounds/operators/multiplication.' + extension,
    '**': path_to_mathtraq + '/sounds/operators/power_of.' + extension,
    '/': path_to_mathtraq + '/sounds/operators/division.' + extension,

    'hundred': path_to_mathtraq + '/sounds/place_values/hundred.' + extension,
    'thousand': path_to_mathtraq + '/sounds/place_values/thousand.' + extension,
    'million': path_to_mathtraq + '/sounds/place_values/million.' + extension,
    'billion': path_to_mathtraq + '/sounds/place_values/billion.' + extension,
    'trillion': path_to_mathtraq + '/sounds/place_values/trillion.' + extension,
    
    '=': path_to_mathtraq + '/sounds/misc/equals.' + extension,
    'and': path_to_mathtraq + '/sounds/misc/and.' + extension,
    'decimal': path_to_mathtraq + '/sounds/misc/decimal.' + extension,
    'negative': path_to_mathtraq + '/sounds/misc/negative.' + extension,
    'undefined': path_to_mathtraq + '/sounds/misc/undefined.' + extension,
    'somethings': path_to_mathtraq + '/sounds/misc/somethings.' + extension,
    '500ms_silence': path_to_mathtraq + '/sounds/misc/500ms_silence.' + extension
}


def tokens_to_audio(tokens):
    """
    Takes a list of tokens of the kind generated by 
    numbertokeniser and returns an ordered list
    of the corresponding audio files
    """
    audios = list()
    for token in tokens:
        #we don't want commas, and numbertokeniser
        #optionally generates them
        if token == ',':
            continue
        #digits
        if '.' in token:
            key, pos = token.split('.')
            digit = audio_segments[key]
            if pos == 'single':
                audios.append(digit.single)
            elif pos == 'teens':
                audios.append(digit.teens)
            elif pos == 'tens':
                audios.append(digit.tens)
        #all the other crap
        else:
            audios.append(audio_segments[token])
    return audios


def create_silence_file(ms_length, file_name, silently = False):
        """
        Create a temporary file that contains ms_length ms of silence
        rounded down to the nearest 500ms but with a minimum of 500ms
        """
        silence_file = tokens_to_audio(['500ms_silence'])
        times_to_concat = int(ms_length / 500) or 1
        if silently:
            current_command = [path_to_mathtraq + '/bin/mp3cat', '-f', '-q', '-o', file_name]
        else:
            current_command = [path_to_mathtraq + '/bin/mp3cat', '-f', '-o', file_name]
        current_command.extend([silence_file] * int(times_to_concat))
        subprocess.run(current_command)

def create_audio_by_concatenation(files_to_concat, output_file, silently=False):
    if silently:
        current_command = [path_to_mathtraq + '/bin/mp3cat', '-f', '-q', '-o', output_file]
    else:
        current_command = [path_to_mathtraq + '/bin/mp3cat', '-f', '-o', output_file]
    current_command.extend(files_to_concat)
    subprocess.run(current_command)