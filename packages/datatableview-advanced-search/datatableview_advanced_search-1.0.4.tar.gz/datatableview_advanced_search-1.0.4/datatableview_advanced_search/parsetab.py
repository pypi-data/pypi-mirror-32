
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = u'leftANDleftORrightNOTAND COMMA COMPARE DATE DOUBLE_QUOTE_WORD FLOAT IN INT LBRACK LPAREN NOT OR RBRACK RPAREN SINGLE_QUOTE_WORD WORDexpression : LPAREN expression RPARENexpression : variable COMPARE valueexpression : variable IN listlist : LBRACK list_vals RBRACKlist_vals : value COMMA value\n                     | list_vals COMMA valueexpression : NOT expressionexpression : expression AND expressionexpression : expression OR expressionvalue : variable\n                 | number\n                 | DATEvariable : WORD\n                    | SINGLE_QUOTE_WORD\n                    | DOUBLE_QUOTE_WORDnumber : INT\n                  | FLOAT'
    
_lr_action_items = {u'AND':([1,2,6,7,8,9,14,15,16,17,18,19,20,21,23,24,27,],[-14,-15,-13,12,-7,12,-1,-16,-17,-11,-2,-12,-10,-3,-8,-9,-4,]),u'COMPARE':([1,2,5,6,],[-14,-15,10,-13,]),u'FLOAT':([10,22,28,29,],[16,16,16,16,]),u'WORD':([0,3,4,10,12,13,22,28,29,],[6,6,6,6,6,6,6,6,6,]),u'SINGLE_QUOTE_WORD':([0,3,4,10,12,13,22,28,29,],[1,1,1,1,1,1,1,1,1,]),u'INT':([10,22,28,29,],[15,15,15,15,]),u'RBRACK':([1,2,6,15,16,17,19,20,25,30,31,],[-14,-15,-13,-16,-17,-11,-12,-10,27,-6,-5,]),u'LBRACK':([11,],[22,]),u'DOUBLE_QUOTE_WORD':([0,3,4,10,12,13,22,28,29,],[2,2,2,2,2,2,2,2,2,]),u'DATE':([10,22,28,29,],[19,19,19,19,]),u'COMMA':([1,2,6,15,16,17,19,20,25,26,30,31,],[-14,-15,-13,-16,-17,-11,-12,-10,28,29,-6,-5,]),u'LPAREN':([0,3,4,12,13,],[4,4,4,4,4,]),u'IN':([1,2,5,6,],[-14,-15,11,-13,]),u'NOT':([0,3,4,12,13,],[3,3,3,3,3,]),u'RPAREN':([1,2,6,8,9,14,15,16,17,18,19,20,21,23,24,27,],[-14,-15,-13,-7,14,-1,-16,-17,-11,-2,-12,-10,-3,-8,-9,-4,]),u'OR':([1,2,6,7,8,9,14,15,16,17,18,19,20,21,23,24,27,],[-14,-15,-13,13,-7,13,-1,-16,-17,-11,-2,-12,-10,-3,13,-9,-4,]),'$end':([1,2,6,7,8,14,15,16,17,18,19,20,21,23,24,27,],[-14,-15,-13,0,-7,-1,-16,-17,-11,-2,-12,-10,-3,-8,-9,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {u'list_vals':([22,],[25,]),u'list':([11,],[21,]),u'number':([10,22,28,29,],[17,17,17,17,]),u'value':([10,22,28,29,],[18,26,30,31,]),u'variable':([0,3,4,10,12,13,22,28,29,],[5,5,5,20,5,5,20,20,20,]),u'expression':([0,3,4,12,13,],[7,8,9,23,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  (u'expression -> LPAREN expression RPAREN',u'expression',3,'p_expression_paren','parser.py',40),
  (u'expression -> variable COMPARE value',u'expression',3,'p_expression_compare','parser.py',45),
  (u'expression -> variable IN list',u'expression',3,'p_expression_in','parser.py',66),
  (u'list -> LBRACK list_vals RBRACK',u'list',3,'p_list','parser.py',72),
  (u'list_vals -> value COMMA value',u'list_vals',3,'p_list_vals','parser.py',77),
  (u'list_vals -> list_vals COMMA value',u'list_vals',3,'p_list_vals','parser.py',78),
  (u'expression -> NOT expression',u'expression',2,'p_expression_not','parser.py',92),
  (u'expression -> expression AND expression',u'expression',3,'p_expression_and','parser.py',97),
  (u'expression -> expression OR expression',u'expression',3,'p_expression_or','parser.py',102),
  (u'value -> variable',u'value',1,'p_value','parser.py',114),
  (u'value -> number',u'value',1,'p_value','parser.py',115),
  (u'value -> DATE',u'value',1,'p_value','parser.py',116),
  (u'variable -> WORD',u'variable',1,'p_variable','parser.py',121),
  (u'variable -> SINGLE_QUOTE_WORD',u'variable',1,'p_variable','parser.py',122),
  (u'variable -> DOUBLE_QUOTE_WORD',u'variable',1,'p_variable','parser.py',123),
  (u'number -> INT',u'number',1,'p_number','parser.py',128),
  (u'number -> FLOAT',u'number',1,'p_number','parser.py',129),
]
