# coding: utf-8

"""
    DmsApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pdf4me.model.document import Document  # noqa: F401,E501
from pdf4me.model.image_action import ImageAction  # noqa: F401,E501
from pdf4me.model.notification import Notification  # noqa: F401,E501


class CreateImages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document': 'Document',
        'image_action': 'ImageAction',
        'notification': 'Notification'
    }

    attribute_map = {
        'document': 'document',
        'image_action': 'imageAction',
        'notification': 'notification'
    }

    def __init__(self, document=None, image_action=None, notification=None):  # noqa: E501
        """CreateImages - a model defined in Swagger"""  # noqa: E501

        self._document = None
        self._image_action = None
        self._notification = None
        self.discriminator = None

        if document is not None:
            self.document = document
        if image_action is not None:
            self.image_action = image_action
        if notification is not None:
            self.notification = notification

    @property
    def document(self):
        """Gets the document of this CreateImages.  # noqa: E501

        Stamped Document  # noqa: E501

        :return: The document of this CreateImages.  # noqa: E501
        :rtype: Document
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this CreateImages.

        Stamped Document  # noqa: E501

        :param document: The document of this CreateImages.  # noqa: E501
        :type: Document
        """

        self._document = document

    @property
    def image_action(self):
        """Gets the image_action of this CreateImages.  # noqa: E501

        MrcAction configuration  # noqa: E501

        :return: The image_action of this CreateImages.  # noqa: E501
        :rtype: ImageAction
        """
        return self._image_action

    @image_action.setter
    def image_action(self, image_action):
        """Sets the image_action of this CreateImages.

        MrcAction configuration  # noqa: E501

        :param image_action: The image_action of this CreateImages.  # noqa: E501
        :type: ImageAction
        """

        self._image_action = image_action

    @property
    def notification(self):
        """Gets the notification of this CreateImages.  # noqa: E501

        Set Notification  # noqa: E501

        :return: The notification of this CreateImages.  # noqa: E501
        :rtype: Notification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this CreateImages.

        Set Notification  # noqa: E501

        :param notification: The notification of this CreateImages.  # noqa: E501
        :type: Notification
        """

        self._notification = notification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateImages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
