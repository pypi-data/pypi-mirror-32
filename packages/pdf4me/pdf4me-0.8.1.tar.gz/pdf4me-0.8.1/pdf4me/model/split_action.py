# coding: utf-8

"""
    DmsApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pdf4me.model.key_value_pair_string_string import KeyValuePairStringString  # noqa: F401,E501


class SplitAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'split_after_page': 'int',
        'split_sequence': 'list[int]',
        'recurring_split_after_page': 'int',
        'custom_properties': 'list[KeyValuePairStringString]'
    }

    attribute_map = {
        'split_after_page': 'splitAfterPage',
        'split_sequence': 'splitSequence',
        'recurring_split_after_page': 'recurringSplitAfterPage',
        'custom_properties': 'customProperties'
    }

    def __init__(self, split_after_page=None, split_sequence=None, recurring_split_after_page=None, custom_properties=None):  # noqa: E501
        """SplitAction - a model defined in Swagger"""  # noqa: E501

        self._split_after_page = None
        self._split_sequence = None
        self._recurring_split_after_page = None
        self._custom_properties = None
        self.discriminator = None

        if split_after_page is not None:
            self.split_after_page = split_after_page
        if split_sequence is not None:
            self.split_sequence = split_sequence
        if recurring_split_after_page is not None:
            self.recurring_split_after_page = recurring_split_after_page
        if custom_properties is not None:
            self.custom_properties = custom_properties

    @property
    def split_after_page(self):
        """Gets the split_after_page of this SplitAction.  # noqa: E501


        :return: The split_after_page of this SplitAction.  # noqa: E501
        :rtype: int
        """
        return self._split_after_page

    @split_after_page.setter
    def split_after_page(self, split_after_page):
        """Sets the split_after_page of this SplitAction.


        :param split_after_page: The split_after_page of this SplitAction.  # noqa: E501
        :type: int
        """

        self._split_after_page = split_after_page

    @property
    def split_sequence(self):
        """Gets the split_sequence of this SplitAction.  # noqa: E501


        :return: The split_sequence of this SplitAction.  # noqa: E501
        :rtype: list[int]
        """
        return self._split_sequence

    @split_sequence.setter
    def split_sequence(self, split_sequence):
        """Sets the split_sequence of this SplitAction.


        :param split_sequence: The split_sequence of this SplitAction.  # noqa: E501
        :type: list[int]
        """

        self._split_sequence = split_sequence

    @property
    def recurring_split_after_page(self):
        """Gets the recurring_split_after_page of this SplitAction.  # noqa: E501


        :return: The recurring_split_after_page of this SplitAction.  # noqa: E501
        :rtype: int
        """
        return self._recurring_split_after_page

    @recurring_split_after_page.setter
    def recurring_split_after_page(self, recurring_split_after_page):
        """Sets the recurring_split_after_page of this SplitAction.


        :param recurring_split_after_page: The recurring_split_after_page of this SplitAction.  # noqa: E501
        :type: int
        """

        self._recurring_split_after_page = recurring_split_after_page

    @property
    def custom_properties(self):
        """Gets the custom_properties of this SplitAction.  # noqa: E501


        :return: The custom_properties of this SplitAction.  # noqa: E501
        :rtype: list[KeyValuePairStringString]
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this SplitAction.


        :param custom_properties: The custom_properties of this SplitAction.  # noqa: E501
        :type: list[KeyValuePairStringString]
        """

        self._custom_properties = custom_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SplitAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
