# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_md5distro')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_md5distro')
    _md5distro = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_md5distro', [dirname(__file__)])
        except ImportError:
            import _md5distro
            return _md5distro
        try:
            _mod = imp.load_module('_md5distro', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _md5distro = swig_import_helper()
    del swig_import_helper
else:
    import _md5distro
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class MD5_CTX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MD5_CTX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MD5_CTX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lo"] = _md5distro.MD5_CTX_lo_set
    __swig_getmethods__["lo"] = _md5distro.MD5_CTX_lo_get
    if _newclass:
        lo = _swig_property(_md5distro.MD5_CTX_lo_get, _md5distro.MD5_CTX_lo_set)
    __swig_setmethods__["hi"] = _md5distro.MD5_CTX_hi_set
    __swig_getmethods__["hi"] = _md5distro.MD5_CTX_hi_get
    if _newclass:
        hi = _swig_property(_md5distro.MD5_CTX_hi_get, _md5distro.MD5_CTX_hi_set)
    __swig_setmethods__["a"] = _md5distro.MD5_CTX_a_set
    __swig_getmethods__["a"] = _md5distro.MD5_CTX_a_get
    if _newclass:
        a = _swig_property(_md5distro.MD5_CTX_a_get, _md5distro.MD5_CTX_a_set)
    __swig_setmethods__["b"] = _md5distro.MD5_CTX_b_set
    __swig_getmethods__["b"] = _md5distro.MD5_CTX_b_get
    if _newclass:
        b = _swig_property(_md5distro.MD5_CTX_b_get, _md5distro.MD5_CTX_b_set)
    __swig_setmethods__["c"] = _md5distro.MD5_CTX_c_set
    __swig_getmethods__["c"] = _md5distro.MD5_CTX_c_get
    if _newclass:
        c = _swig_property(_md5distro.MD5_CTX_c_get, _md5distro.MD5_CTX_c_set)
    __swig_setmethods__["d"] = _md5distro.MD5_CTX_d_set
    __swig_getmethods__["d"] = _md5distro.MD5_CTX_d_get
    if _newclass:
        d = _swig_property(_md5distro.MD5_CTX_d_get, _md5distro.MD5_CTX_d_set)
    __swig_setmethods__["buffer"] = _md5distro.MD5_CTX_buffer_set
    __swig_getmethods__["buffer"] = _md5distro.MD5_CTX_buffer_get
    if _newclass:
        buffer = _swig_property(_md5distro.MD5_CTX_buffer_get, _md5distro.MD5_CTX_buffer_set)
    __swig_setmethods__["block"] = _md5distro.MD5_CTX_block_set
    __swig_getmethods__["block"] = _md5distro.MD5_CTX_block_get
    if _newclass:
        block = _swig_property(_md5distro.MD5_CTX_block_get, _md5distro.MD5_CTX_block_set)

    def __init__(self):
        this = _md5distro.new_MD5_CTX()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _md5distro.delete_MD5_CTX
    __del__ = lambda self: None
MD5_CTX_swigregister = _md5distro.MD5_CTX_swigregister
MD5_CTX_swigregister(MD5_CTX)


def MD5_Init():
    return _md5distro.MD5_Init()
MD5_Init = _md5distro.MD5_Init

def MD5_Update(data, size):
    return _md5distro.MD5_Update(data, size)
MD5_Update = _md5distro.MD5_Update

def MD5_Final():
    return _md5distro.MD5_Final()
MD5_Final = _md5distro.MD5_Final

def getdigest(position):
    return _md5distro.getdigest(position)
getdigest = _md5distro.getdigest

def get_lo():
    return _md5distro.get_lo()
get_lo = _md5distro.get_lo

def set_lo(data):
    return _md5distro.set_lo(data)
set_lo = _md5distro.set_lo

def get_hi():
    return _md5distro.get_hi()
get_hi = _md5distro.get_hi

def set_hi(data):
    return _md5distro.set_hi(data)
set_hi = _md5distro.set_hi

def get_a():
    return _md5distro.get_a()
get_a = _md5distro.get_a

def set_a(data):
    return _md5distro.set_a(data)
set_a = _md5distro.set_a

def get_b():
    return _md5distro.get_b()
get_b = _md5distro.get_b

def set_b(data):
    return _md5distro.set_b(data)
set_b = _md5distro.set_b

def get_c():
    return _md5distro.get_c()
get_c = _md5distro.get_c

def set_c(data):
    return _md5distro.set_c(data)
set_c = _md5distro.set_c

def get_d():
    return _md5distro.get_d()
get_d = _md5distro.get_d

def set_d(data):
    return _md5distro.set_d(data)
set_d = _md5distro.set_d

def get_buffer(position):
    return _md5distro.get_buffer(position)
get_buffer = _md5distro.get_buffer

def set_buffer(position, data):
    return _md5distro.set_buffer(position, data)
set_buffer = _md5distro.set_buffer

def get_block(position):
    return _md5distro.get_block(position)
get_block = _md5distro.get_block

def set_block(position, data):
    return _md5distro.set_block(position, data)
set_block = _md5distro.set_block
# This file is compatible with both classic and new-style classes.


