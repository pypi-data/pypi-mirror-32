---
- name: "provision beaker systems"
  bkr_server:
    recipesets: "{{ res.recipesets }}"
    state: present
    # these values have defaults set in the bkr_server module
    # if omitted, or they are not required
    whiteboard: "{{ res.whiteboard | default('Provisioned by LinchPin') }}"
    job_group: "{{ res.job_group | default(omit) }}"
    cancel_message: "{{ res.cancel_message | default(omit) }}"
    max_attempts: "{{ res.max_attempts | default(omit) }}"
    attempt_wait_time: "{{ attempt_wait_time | default(omit) }}"
  with_items: "{{ res_defs['resource_definitions'] }}"
  # loop over res_defs even though there should be only one for beaker
  loop_control:
    loop_var: res
  register: bkr
  ignore_errors: true


- name: "set bkr_rsets"
  set_fact:
      bkr_rsets: "{{ bkr_rsets | default([]) }} + {{ rd.recipesets }}"
  with_items: "{{ res_defs['resource_definitions'] }}"
  loop_control:
    loop_var: rd

- name: "set bkr_names"
  set_fact:
      bkr_names: "{{ bkr_names | default([]) }} + {{ [{'name': brs['name']}] }}"
  with_items: "{{ bkr_rsets }}"
  loop_control:
    loop_var: brs

- block:
  - name: debug bkr ids
    debug:
      msg: "{{ bkr.results }}"
  - name: "set bkr ids from results"
    set_fact:
      bkr_ids: "{{ bkr_ids | default({}) | combine(result['ids']) }}"
    with_items: "{{ bkr.results }}"
    loop_control:
      loop_var: result

  - name: "count bkr_ids"
    set_fact:
        bkr_id_count: "{{ (bkr_ids | length, 'count', 'id') }}"

  - name: "set bkr_hosts from results"
    set_fact:
      bkr_hosts: "{{ bkr_hosts | default([]) }} + {{ bh['hosts'] }}"
    with_items: "{{ bkr.results }}"
    loop_control:
      loop_var: bh

  - name: "count bkr_hosts"
    set_fact:
      bkr_host_count: "{{ (bkr_hosts | length, 'count', 'distro') }}"

  - name: "set unique value based upon count"
    set_fact:
      combine_keys: "{{ combine_keys | default([]) }} + [{{ cks }}]"
    with_items:
      - "{{ bkr_id_count }}"
      - "{{ bkr_host_count }}"
    loop_control:
      loop_var: cks

  # take the first item sorted, get the last value out of the triple tuple
  - name: "set unique value based upon count"
    set_fact:
      combine_key: "{{ combine_keys | sort(reverse=True) | first | last }}"

  - name: "set bkr_host_values to an empty list"
    set_fact:
      bkr_host_values: []

  - name: "combine bkr_hosts and bkr_names"
    set_fact:
      bkr_host_values: "{{ bkr_hosts | combine_hosts_names(bkr_names) }}"

  - name: "split id and url into separate components"
    set_fact:
      bkr_id_values: "{{ bkr_id_values | default([]) + [{ 'id': bids.key, 'url': bids.value }] }}"
    with_dict: "{{ bkr_ids }}"
    loop_control:
      loop_var: bids

  - name: "combine bkr_id_values with bkr_hosts"
    set_fact:
      tmp_hosts: "{{ bhv | combine(bkr_id_values | selectattr('id', 'match', '^' + bhv.id + '$') | first) }}"
    with_items: "{{ bkr_host_values }}"
    register: tmp_info
    loop_control:
      loop_var: bhv

  - name: "Set topology_outputs_beaker_server to the current job(s) data"
    set_fact:
      topology_outputs_beaker_server: "{{ tmp_info.results | map(attribute='ansible_facts.tmp_hosts') | list }}"

  - name: "Add beaker job info to the rundb"
    rundb:
      conn_str: "{{ rundb_conn }}"
      operation: update
      table: "{{ target }}"
      key: "outputs"
      value: "[{{ {'bkr_id_values': bkr_id_values} }}]"
      run_id: "{{ rundb_id }}"
    when: not generate_resources

  - name: "fetch beaker details"
    bkr_info:
      ids: "{{ bkr_ids }}"
      # pull provision params from the first (should be only) result
      provision_params: "{{ bkr.results[0].provision_params }}"
    register: _topo_out_bkr_server

  - name: "set topology_outputs_beaker_server using id"
    set_fact:
      tmp_topo_bkr_srvc: "{{ ttbs | combine(_topo_out_bkr_server['hosts'] | selectattr('id', 'match', '^' + ttbs.id + '$') | first) }}"
    with_items: "{{ topology_outputs_beaker_server }}"
    when:
      - state == 'present'
      - combine_key == 'id'
    register: tmp_bkr
    loop_control:
      loop_var: ttbs

  - name: "Set topology_outputs_beaker_server to the current job(s) data"
    set_fact:
      topology_outputs_beaker_server: "{{ tmp_bkr.results | map_results('ansible_facts', 'tmp_topo_bkr_srvc') }}"
    when:
      - state == 'present'
      - combine_key == 'id'

  - name: "set topology_outputs_beaker_server using distro"
    set_fact:
      tmp_topo_bkr_srvc: "{{ ttbs | combine(_topo_out_bkr_server['hosts'] | selectattr('distro', 'match', '^' + ttbs.distro + '$') | first) }}"
    when:
      - state == 'present'
      - combine_key == 'distro'
    with_items: "{{ topology_outputs_beaker_server }}"
    register: tmp_bkr
    loop_control:
      loop_var: ttbs

  - name: "Set topology_outputs_beaker_server to the current job(s) data"
    set_fact:
      topology_outputs_beaker_server: "{{ tmp_bkr.results | map_results('ansible_facts', 'tmp_topo_bkr_srvc') }}"
    when:
      - state == 'present'
      - combine_key == 'distro'
