// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scanner/sink_args.proto

#ifndef PROTOBUF_scanner_2fsink_5fargs_2eproto__INCLUDED
#define PROTOBUF_scanner_2fsink_5fargs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_scanner_2fsink_5fargs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsColumnSinkArgsImpl();
void InitDefaultsColumnSinkArgs();
inline void InitDefaults() {
  InitDefaultsColumnSinkArgs();
}
}  // namespace protobuf_scanner_2fsink_5fargs_2eproto
namespace scanner {
namespace proto {
class ColumnSinkArgs;
class ColumnSinkArgsDefaultTypeInternal;
extern ColumnSinkArgsDefaultTypeInternal _ColumnSinkArgs_default_instance_;
}  // namespace proto
}  // namespace scanner
namespace scanner {
namespace proto {

// ===================================================================

class ColumnSinkArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:scanner.proto.ColumnSinkArgs) */ {
 public:
  ColumnSinkArgs();
  virtual ~ColumnSinkArgs();

  ColumnSinkArgs(const ColumnSinkArgs& from);

  inline ColumnSinkArgs& operator=(const ColumnSinkArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ColumnSinkArgs(ColumnSinkArgs&& from) noexcept
    : ColumnSinkArgs() {
    *this = ::std::move(from);
  }

  inline ColumnSinkArgs& operator=(ColumnSinkArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnSinkArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnSinkArgs* internal_default_instance() {
    return reinterpret_cast<const ColumnSinkArgs*>(
               &_ColumnSinkArgs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ColumnSinkArgs* other);
  friend void swap(ColumnSinkArgs& a, ColumnSinkArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ColumnSinkArgs* New() const PROTOBUF_FINAL { return New(NULL); }

  ColumnSinkArgs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ColumnSinkArgs& from);
  void MergeFrom(const ColumnSinkArgs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ColumnSinkArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string storage_type = 1;
  void clear_storage_type();
  static const int kStorageTypeFieldNumber = 1;
  const ::std::string& storage_type() const;
  void set_storage_type(const ::std::string& value);
  #if LANG_CXX11
  void set_storage_type(::std::string&& value);
  #endif
  void set_storage_type(const char* value);
  void set_storage_type(const char* value, size_t size);
  ::std::string* mutable_storage_type();
  ::std::string* release_storage_type();
  void set_allocated_storage_type(::std::string* storage_type);

  // string bucket = 2;
  void clear_bucket();
  static const int kBucketFieldNumber = 2;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_bucket(::std::string&& value);
  #endif
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // string region = 3;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // string endpoint = 4;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 4;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // @@protoc_insertion_point(class_scope:scanner.proto.ColumnSinkArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr storage_type_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  mutable int _cached_size_;
  friend struct ::protobuf_scanner_2fsink_5fargs_2eproto::TableStruct;
  friend void ::protobuf_scanner_2fsink_5fargs_2eproto::InitDefaultsColumnSinkArgsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ColumnSinkArgs

// string storage_type = 1;
inline void ColumnSinkArgs::clear_storage_type() {
  storage_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnSinkArgs::storage_type() const {
  // @@protoc_insertion_point(field_get:scanner.proto.ColumnSinkArgs.storage_type)
  return storage_type_.GetNoArena();
}
inline void ColumnSinkArgs::set_storage_type(const ::std::string& value) {
  
  storage_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:scanner.proto.ColumnSinkArgs.storage_type)
}
#if LANG_CXX11
inline void ColumnSinkArgs::set_storage_type(::std::string&& value) {
  
  storage_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:scanner.proto.ColumnSinkArgs.storage_type)
}
#endif
inline void ColumnSinkArgs::set_storage_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  storage_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:scanner.proto.ColumnSinkArgs.storage_type)
}
inline void ColumnSinkArgs::set_storage_type(const char* value, size_t size) {
  
  storage_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:scanner.proto.ColumnSinkArgs.storage_type)
}
inline ::std::string* ColumnSinkArgs::mutable_storage_type() {
  
  // @@protoc_insertion_point(field_mutable:scanner.proto.ColumnSinkArgs.storage_type)
  return storage_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnSinkArgs::release_storage_type() {
  // @@protoc_insertion_point(field_release:scanner.proto.ColumnSinkArgs.storage_type)
  
  return storage_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnSinkArgs::set_allocated_storage_type(::std::string* storage_type) {
  if (storage_type != NULL) {
    
  } else {
    
  }
  storage_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_type);
  // @@protoc_insertion_point(field_set_allocated:scanner.proto.ColumnSinkArgs.storage_type)
}

// string bucket = 2;
inline void ColumnSinkArgs::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnSinkArgs::bucket() const {
  // @@protoc_insertion_point(field_get:scanner.proto.ColumnSinkArgs.bucket)
  return bucket_.GetNoArena();
}
inline void ColumnSinkArgs::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:scanner.proto.ColumnSinkArgs.bucket)
}
#if LANG_CXX11
inline void ColumnSinkArgs::set_bucket(::std::string&& value) {
  
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:scanner.proto.ColumnSinkArgs.bucket)
}
#endif
inline void ColumnSinkArgs::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:scanner.proto.ColumnSinkArgs.bucket)
}
inline void ColumnSinkArgs::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:scanner.proto.ColumnSinkArgs.bucket)
}
inline ::std::string* ColumnSinkArgs::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:scanner.proto.ColumnSinkArgs.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnSinkArgs::release_bucket() {
  // @@protoc_insertion_point(field_release:scanner.proto.ColumnSinkArgs.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnSinkArgs::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:scanner.proto.ColumnSinkArgs.bucket)
}

// string region = 3;
inline void ColumnSinkArgs::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnSinkArgs::region() const {
  // @@protoc_insertion_point(field_get:scanner.proto.ColumnSinkArgs.region)
  return region_.GetNoArena();
}
inline void ColumnSinkArgs::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:scanner.proto.ColumnSinkArgs.region)
}
#if LANG_CXX11
inline void ColumnSinkArgs::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:scanner.proto.ColumnSinkArgs.region)
}
#endif
inline void ColumnSinkArgs::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:scanner.proto.ColumnSinkArgs.region)
}
inline void ColumnSinkArgs::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:scanner.proto.ColumnSinkArgs.region)
}
inline ::std::string* ColumnSinkArgs::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:scanner.proto.ColumnSinkArgs.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnSinkArgs::release_region() {
  // @@protoc_insertion_point(field_release:scanner.proto.ColumnSinkArgs.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnSinkArgs::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:scanner.proto.ColumnSinkArgs.region)
}

// string endpoint = 4;
inline void ColumnSinkArgs::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnSinkArgs::endpoint() const {
  // @@protoc_insertion_point(field_get:scanner.proto.ColumnSinkArgs.endpoint)
  return endpoint_.GetNoArena();
}
inline void ColumnSinkArgs::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:scanner.proto.ColumnSinkArgs.endpoint)
}
#if LANG_CXX11
inline void ColumnSinkArgs::set_endpoint(::std::string&& value) {
  
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:scanner.proto.ColumnSinkArgs.endpoint)
}
#endif
inline void ColumnSinkArgs::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:scanner.proto.ColumnSinkArgs.endpoint)
}
inline void ColumnSinkArgs::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:scanner.proto.ColumnSinkArgs.endpoint)
}
inline ::std::string* ColumnSinkArgs::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:scanner.proto.ColumnSinkArgs.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnSinkArgs::release_endpoint() {
  // @@protoc_insertion_point(field_release:scanner.proto.ColumnSinkArgs.endpoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnSinkArgs::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:scanner.proto.ColumnSinkArgs.endpoint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace scanner

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_scanner_2fsink_5fargs_2eproto__INCLUDED
