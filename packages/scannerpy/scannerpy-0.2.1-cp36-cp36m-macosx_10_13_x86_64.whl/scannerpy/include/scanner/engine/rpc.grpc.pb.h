// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scanner/engine/rpc.proto
#ifndef GRPC_scanner_2fengine_2frpc_2eproto__INCLUDED
#define GRPC_scanner_2fengine_2frpc_2eproto__INCLUDED

#include "scanner/engine/rpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace scanner {
namespace proto {

class Master final {
 public:
  static constexpr char const* service_full_name() {
    return "scanner.proto.Master";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // List table info
    virtual ::grpc::Status ListTables(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::ListTablesResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::ListTablesResult>> AsyncListTables(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::ListTablesResult>>(AsyncListTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::ListTablesResult>> PrepareAsyncListTables(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::ListTablesResult>>(PrepareAsyncListTablesRaw(context, request, cq));
    }
    // Get table info
    virtual ::grpc::Status GetTables(::grpc::ClientContext* context, const ::scanner::proto::GetTablesParams& request, ::scanner::proto::GetTablesResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetTablesResult>> AsyncGetTables(::grpc::ClientContext* context, const ::scanner::proto::GetTablesParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetTablesResult>>(AsyncGetTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetTablesResult>> PrepareAsyncGetTables(::grpc::ClientContext* context, const ::scanner::proto::GetTablesParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetTablesResult>>(PrepareAsyncGetTablesRaw(context, request, cq));
    }
    // Delete table in the database
    virtual ::grpc::Status DeleteTables(::grpc::ClientContext* context, const ::scanner::proto::DeleteTablesParams& request, ::scanner::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> AsyncDeleteTables(::grpc::ClientContext* context, const ::scanner::proto::DeleteTablesParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(AsyncDeleteTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> PrepareAsyncDeleteTables(::grpc::ClientContext* context, const ::scanner::proto::DeleteTablesParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(PrepareAsyncDeleteTablesRaw(context, request, cq));
    }
    virtual ::grpc::Status NewTable(::grpc::ClientContext* context, const ::scanner::proto::NewTableParams& request, ::scanner::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> AsyncNewTable(::grpc::ClientContext* context, const ::scanner::proto::NewTableParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(AsyncNewTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> PrepareAsyncNewTable(::grpc::ClientContext* context, const ::scanner::proto::NewTableParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(PrepareAsyncNewTableRaw(context, request, cq));
    }
    virtual ::grpc::Status GetVideoMetadata(::grpc::ClientContext* context, const ::scanner::proto::GetVideoMetadataParams& request, ::scanner::proto::GetVideoMetadataResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetVideoMetadataResult>> AsyncGetVideoMetadata(::grpc::ClientContext* context, const ::scanner::proto::GetVideoMetadataParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetVideoMetadataResult>>(AsyncGetVideoMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetVideoMetadataResult>> PrepareAsyncGetVideoMetadata(::grpc::ClientContext* context, const ::scanner::proto::GetVideoMetadataParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetVideoMetadataResult>>(PrepareAsyncGetVideoMetadataRaw(context, request, cq));
    }
    // / Worker registration methods
    // Called after a new worker spawns to register with the master
    virtual ::grpc::Status RegisterWorker(::grpc::ClientContext* context, const ::scanner::proto::WorkerParams& request, ::scanner::proto::Registration* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Registration>> AsyncRegisterWorker(::grpc::ClientContext* context, const ::scanner::proto::WorkerParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Registration>>(AsyncRegisterWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Registration>> PrepareAsyncRegisterWorker(::grpc::ClientContext* context, const ::scanner::proto::WorkerParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Registration>>(PrepareAsyncRegisterWorkerRaw(context, request, cq));
    }
    // Called when a worker is removed
    virtual ::grpc::Status UnregisterWorker(::grpc::ClientContext* context, const ::scanner::proto::UnregisterWorkerRequest& request, ::scanner::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> AsyncUnregisterWorker(::grpc::ClientContext* context, const ::scanner::proto::UnregisterWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(AsyncUnregisterWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> PrepareAsyncUnregisterWorker(::grpc::ClientContext* context, const ::scanner::proto::UnregisterWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(PrepareAsyncUnregisterWorkerRaw(context, request, cq));
    }
    virtual ::grpc::Status ActiveWorkers(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::RegisteredWorkers* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::RegisteredWorkers>> AsyncActiveWorkers(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::RegisteredWorkers>>(AsyncActiveWorkersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::RegisteredWorkers>> PrepareAsyncActiveWorkers(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::RegisteredWorkers>>(PrepareAsyncActiveWorkersRaw(context, request, cq));
    }
    // Ingest videos into the system
    virtual ::grpc::Status IngestVideos(::grpc::ClientContext* context, const ::scanner::proto::IngestParameters& request, ::scanner::proto::IngestResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::IngestResult>> AsyncIngestVideos(::grpc::ClientContext* context, const ::scanner::proto::IngestParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::IngestResult>>(AsyncIngestVideosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::IngestResult>> PrepareAsyncIngestVideos(::grpc::ClientContext* context, const ::scanner::proto::IngestParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::IngestResult>>(PrepareAsyncIngestVideosRaw(context, request, cq));
    }
    virtual ::grpc::Status GetJobStatus(::grpc::ClientContext* context, const ::scanner::proto::GetJobStatusRequest& request, ::scanner::proto::GetJobStatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetJobStatusReply>> AsyncGetJobStatus(::grpc::ClientContext* context, const ::scanner::proto::GetJobStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetJobStatusReply>>(AsyncGetJobStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetJobStatusReply>> PrepareAsyncGetJobStatus(::grpc::ClientContext* context, const ::scanner::proto::GetJobStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetJobStatusReply>>(PrepareAsyncGetJobStatusRaw(context, request, cq));
    }
    // Register new methods
    virtual ::grpc::Status LoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::scanner::proto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> AsyncLoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(AsyncLoadOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> PrepareAsyncLoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(PrepareAsyncLoadOpRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOpInfo(::grpc::ClientContext* context, const ::scanner::proto::OpInfoArgs& request, ::scanner::proto::OpInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::OpInfo>> AsyncGetOpInfo(::grpc::ClientContext* context, const ::scanner::proto::OpInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::OpInfo>>(AsyncGetOpInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::OpInfo>> PrepareAsyncGetOpInfo(::grpc::ClientContext* context, const ::scanner::proto::OpInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::OpInfo>>(PrepareAsyncGetOpInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSourceInfo(::grpc::ClientContext* context, const ::scanner::proto::SourceInfoArgs& request, ::scanner::proto::SourceInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SourceInfo>> AsyncGetSourceInfo(::grpc::ClientContext* context, const ::scanner::proto::SourceInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SourceInfo>>(AsyncGetSourceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SourceInfo>> PrepareAsyncGetSourceInfo(::grpc::ClientContext* context, const ::scanner::proto::SourceInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SourceInfo>>(PrepareAsyncGetSourceInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSinkInfo(::grpc::ClientContext* context, const ::scanner::proto::SinkInfoArgs& request, ::scanner::proto::SinkInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SinkInfo>> AsyncGetSinkInfo(::grpc::ClientContext* context, const ::scanner::proto::SinkInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SinkInfo>>(AsyncGetSinkInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SinkInfo>> PrepareAsyncGetSinkInfo(::grpc::ClientContext* context, const ::scanner::proto::SinkInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SinkInfo>>(PrepareAsyncGetSinkInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEnumeratorInfo(::grpc::ClientContext* context, const ::scanner::proto::EnumeratorInfoArgs& request, ::scanner::proto::EnumeratorInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::EnumeratorInfo>> AsyncGetEnumeratorInfo(::grpc::ClientContext* context, const ::scanner::proto::EnumeratorInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::EnumeratorInfo>>(AsyncGetEnumeratorInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::EnumeratorInfo>> PrepareAsyncGetEnumeratorInfo(::grpc::ClientContext* context, const ::scanner::proto::EnumeratorInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::EnumeratorInfo>>(PrepareAsyncGetEnumeratorInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::scanner::proto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> AsyncRegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(AsyncRegisterOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> PrepareAsyncRegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(PrepareAsyncRegisterOpRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::scanner::proto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> AsyncRegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(AsyncRegisterPythonKernelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> PrepareAsyncRegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(PrepareAsyncRegisterPythonKernelRaw(context, request, cq));
    }
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> AsyncPing(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> PrepareAsyncPing(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> AsyncShutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status PokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> AsyncPokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(AsyncPokeWatchdogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> PrepareAsyncPokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(PrepareAsyncPokeWatchdogRaw(context, request, cq));
    }
    // Internal
    virtual ::grpc::Status NextWork(::grpc::ClientContext* context, const ::scanner::proto::NextWorkRequest& request, ::scanner::proto::NextWorkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NextWorkReply>> AsyncNextWork(::grpc::ClientContext* context, const ::scanner::proto::NextWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NextWorkReply>>(AsyncNextWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NextWorkReply>> PrepareAsyncNextWork(::grpc::ClientContext* context, const ::scanner::proto::NextWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NextWorkReply>>(PrepareAsyncNextWorkRaw(context, request, cq));
    }
    virtual ::grpc::Status FinishedWork(::grpc::ClientContext* context, const ::scanner::proto::FinishedWorkRequest& request, ::scanner::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> AsyncFinishedWork(::grpc::ClientContext* context, const ::scanner::proto::FinishedWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(AsyncFinishedWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> PrepareAsyncFinishedWork(::grpc::ClientContext* context, const ::scanner::proto::FinishedWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(PrepareAsyncFinishedWorkRaw(context, request, cq));
    }
    virtual ::grpc::Status FinishedJob(::grpc::ClientContext* context, const ::scanner::proto::FinishedJobRequest& request, ::scanner::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> AsyncFinishedJob(::grpc::ClientContext* context, const ::scanner::proto::FinishedJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(AsyncFinishedJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> PrepareAsyncFinishedJob(::grpc::ClientContext* context, const ::scanner::proto::FinishedJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(PrepareAsyncFinishedJobRaw(context, request, cq));
    }
    virtual ::grpc::Status NewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::scanner::proto::NewJobReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NewJobReply>> AsyncNewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NewJobReply>>(AsyncNewJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NewJobReply>> PrepareAsyncNewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NewJobReply>>(PrepareAsyncNewJobRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::ListTablesResult>* AsyncListTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::ListTablesResult>* PrepareAsyncListTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetTablesResult>* AsyncGetTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::GetTablesParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetTablesResult>* PrepareAsyncGetTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::GetTablesParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* AsyncDeleteTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::DeleteTablesParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* PrepareAsyncDeleteTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::DeleteTablesParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* AsyncNewTableRaw(::grpc::ClientContext* context, const ::scanner::proto::NewTableParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* PrepareAsyncNewTableRaw(::grpc::ClientContext* context, const ::scanner::proto::NewTableParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetVideoMetadataResult>* AsyncGetVideoMetadataRaw(::grpc::ClientContext* context, const ::scanner::proto::GetVideoMetadataParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetVideoMetadataResult>* PrepareAsyncGetVideoMetadataRaw(::grpc::ClientContext* context, const ::scanner::proto::GetVideoMetadataParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Registration>* AsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::scanner::proto::WorkerParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Registration>* PrepareAsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::scanner::proto::WorkerParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* AsyncUnregisterWorkerRaw(::grpc::ClientContext* context, const ::scanner::proto::UnregisterWorkerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* PrepareAsyncUnregisterWorkerRaw(::grpc::ClientContext* context, const ::scanner::proto::UnregisterWorkerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::RegisteredWorkers>* AsyncActiveWorkersRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::RegisteredWorkers>* PrepareAsyncActiveWorkersRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::IngestResult>* AsyncIngestVideosRaw(::grpc::ClientContext* context, const ::scanner::proto::IngestParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::IngestResult>* PrepareAsyncIngestVideosRaw(::grpc::ClientContext* context, const ::scanner::proto::IngestParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetJobStatusReply>* AsyncGetJobStatusRaw(::grpc::ClientContext* context, const ::scanner::proto::GetJobStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::GetJobStatusReply>* PrepareAsyncGetJobStatusRaw(::grpc::ClientContext* context, const ::scanner::proto::GetJobStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* AsyncLoadOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* PrepareAsyncLoadOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::OpInfo>* AsyncGetOpInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::OpInfoArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::OpInfo>* PrepareAsyncGetOpInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::OpInfoArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SourceInfo>* AsyncGetSourceInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::SourceInfoArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SourceInfo>* PrepareAsyncGetSourceInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::SourceInfoArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SinkInfo>* AsyncGetSinkInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::SinkInfoArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::SinkInfo>* PrepareAsyncGetSinkInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::SinkInfoArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::EnumeratorInfo>* AsyncGetEnumeratorInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::EnumeratorInfoArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::EnumeratorInfo>* PrepareAsyncGetEnumeratorInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::EnumeratorInfoArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* AsyncRegisterOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* PrepareAsyncRegisterOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* AsyncRegisterPythonKernelRaw(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* PrepareAsyncRegisterPythonKernelRaw(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* AsyncPingRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* AsyncPokeWatchdogRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* PrepareAsyncPokeWatchdogRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NextWorkReply>* AsyncNextWorkRaw(::grpc::ClientContext* context, const ::scanner::proto::NextWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NextWorkReply>* PrepareAsyncNextWorkRaw(::grpc::ClientContext* context, const ::scanner::proto::NextWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* AsyncFinishedWorkRaw(::grpc::ClientContext* context, const ::scanner::proto::FinishedWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* PrepareAsyncFinishedWorkRaw(::grpc::ClientContext* context, const ::scanner::proto::FinishedWorkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* AsyncFinishedJobRaw(::grpc::ClientContext* context, const ::scanner::proto::FinishedJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* PrepareAsyncFinishedJobRaw(::grpc::ClientContext* context, const ::scanner::proto::FinishedJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NewJobReply>* AsyncNewJobRaw(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::NewJobReply>* PrepareAsyncNewJobRaw(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListTables(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::ListTablesResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::ListTablesResult>> AsyncListTables(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::ListTablesResult>>(AsyncListTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::ListTablesResult>> PrepareAsyncListTables(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::ListTablesResult>>(PrepareAsyncListTablesRaw(context, request, cq));
    }
    ::grpc::Status GetTables(::grpc::ClientContext* context, const ::scanner::proto::GetTablesParams& request, ::scanner::proto::GetTablesResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetTablesResult>> AsyncGetTables(::grpc::ClientContext* context, const ::scanner::proto::GetTablesParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetTablesResult>>(AsyncGetTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetTablesResult>> PrepareAsyncGetTables(::grpc::ClientContext* context, const ::scanner::proto::GetTablesParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetTablesResult>>(PrepareAsyncGetTablesRaw(context, request, cq));
    }
    ::grpc::Status DeleteTables(::grpc::ClientContext* context, const ::scanner::proto::DeleteTablesParams& request, ::scanner::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> AsyncDeleteTables(::grpc::ClientContext* context, const ::scanner::proto::DeleteTablesParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(AsyncDeleteTablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> PrepareAsyncDeleteTables(::grpc::ClientContext* context, const ::scanner::proto::DeleteTablesParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(PrepareAsyncDeleteTablesRaw(context, request, cq));
    }
    ::grpc::Status NewTable(::grpc::ClientContext* context, const ::scanner::proto::NewTableParams& request, ::scanner::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> AsyncNewTable(::grpc::ClientContext* context, const ::scanner::proto::NewTableParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(AsyncNewTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> PrepareAsyncNewTable(::grpc::ClientContext* context, const ::scanner::proto::NewTableParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(PrepareAsyncNewTableRaw(context, request, cq));
    }
    ::grpc::Status GetVideoMetadata(::grpc::ClientContext* context, const ::scanner::proto::GetVideoMetadataParams& request, ::scanner::proto::GetVideoMetadataResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetVideoMetadataResult>> AsyncGetVideoMetadata(::grpc::ClientContext* context, const ::scanner::proto::GetVideoMetadataParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetVideoMetadataResult>>(AsyncGetVideoMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetVideoMetadataResult>> PrepareAsyncGetVideoMetadata(::grpc::ClientContext* context, const ::scanner::proto::GetVideoMetadataParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetVideoMetadataResult>>(PrepareAsyncGetVideoMetadataRaw(context, request, cq));
    }
    ::grpc::Status RegisterWorker(::grpc::ClientContext* context, const ::scanner::proto::WorkerParams& request, ::scanner::proto::Registration* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Registration>> AsyncRegisterWorker(::grpc::ClientContext* context, const ::scanner::proto::WorkerParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Registration>>(AsyncRegisterWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Registration>> PrepareAsyncRegisterWorker(::grpc::ClientContext* context, const ::scanner::proto::WorkerParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Registration>>(PrepareAsyncRegisterWorkerRaw(context, request, cq));
    }
    ::grpc::Status UnregisterWorker(::grpc::ClientContext* context, const ::scanner::proto::UnregisterWorkerRequest& request, ::scanner::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> AsyncUnregisterWorker(::grpc::ClientContext* context, const ::scanner::proto::UnregisterWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(AsyncUnregisterWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> PrepareAsyncUnregisterWorker(::grpc::ClientContext* context, const ::scanner::proto::UnregisterWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(PrepareAsyncUnregisterWorkerRaw(context, request, cq));
    }
    ::grpc::Status ActiveWorkers(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::RegisteredWorkers* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::RegisteredWorkers>> AsyncActiveWorkers(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::RegisteredWorkers>>(AsyncActiveWorkersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::RegisteredWorkers>> PrepareAsyncActiveWorkers(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::RegisteredWorkers>>(PrepareAsyncActiveWorkersRaw(context, request, cq));
    }
    ::grpc::Status IngestVideos(::grpc::ClientContext* context, const ::scanner::proto::IngestParameters& request, ::scanner::proto::IngestResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::IngestResult>> AsyncIngestVideos(::grpc::ClientContext* context, const ::scanner::proto::IngestParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::IngestResult>>(AsyncIngestVideosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::IngestResult>> PrepareAsyncIngestVideos(::grpc::ClientContext* context, const ::scanner::proto::IngestParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::IngestResult>>(PrepareAsyncIngestVideosRaw(context, request, cq));
    }
    ::grpc::Status GetJobStatus(::grpc::ClientContext* context, const ::scanner::proto::GetJobStatusRequest& request, ::scanner::proto::GetJobStatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetJobStatusReply>> AsyncGetJobStatus(::grpc::ClientContext* context, const ::scanner::proto::GetJobStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetJobStatusReply>>(AsyncGetJobStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetJobStatusReply>> PrepareAsyncGetJobStatus(::grpc::ClientContext* context, const ::scanner::proto::GetJobStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetJobStatusReply>>(PrepareAsyncGetJobStatusRaw(context, request, cq));
    }
    ::grpc::Status LoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::scanner::proto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> AsyncLoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(AsyncLoadOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> PrepareAsyncLoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(PrepareAsyncLoadOpRaw(context, request, cq));
    }
    ::grpc::Status GetOpInfo(::grpc::ClientContext* context, const ::scanner::proto::OpInfoArgs& request, ::scanner::proto::OpInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::OpInfo>> AsyncGetOpInfo(::grpc::ClientContext* context, const ::scanner::proto::OpInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::OpInfo>>(AsyncGetOpInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::OpInfo>> PrepareAsyncGetOpInfo(::grpc::ClientContext* context, const ::scanner::proto::OpInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::OpInfo>>(PrepareAsyncGetOpInfoRaw(context, request, cq));
    }
    ::grpc::Status GetSourceInfo(::grpc::ClientContext* context, const ::scanner::proto::SourceInfoArgs& request, ::scanner::proto::SourceInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::SourceInfo>> AsyncGetSourceInfo(::grpc::ClientContext* context, const ::scanner::proto::SourceInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::SourceInfo>>(AsyncGetSourceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::SourceInfo>> PrepareAsyncGetSourceInfo(::grpc::ClientContext* context, const ::scanner::proto::SourceInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::SourceInfo>>(PrepareAsyncGetSourceInfoRaw(context, request, cq));
    }
    ::grpc::Status GetSinkInfo(::grpc::ClientContext* context, const ::scanner::proto::SinkInfoArgs& request, ::scanner::proto::SinkInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::SinkInfo>> AsyncGetSinkInfo(::grpc::ClientContext* context, const ::scanner::proto::SinkInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::SinkInfo>>(AsyncGetSinkInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::SinkInfo>> PrepareAsyncGetSinkInfo(::grpc::ClientContext* context, const ::scanner::proto::SinkInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::SinkInfo>>(PrepareAsyncGetSinkInfoRaw(context, request, cq));
    }
    ::grpc::Status GetEnumeratorInfo(::grpc::ClientContext* context, const ::scanner::proto::EnumeratorInfoArgs& request, ::scanner::proto::EnumeratorInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::EnumeratorInfo>> AsyncGetEnumeratorInfo(::grpc::ClientContext* context, const ::scanner::proto::EnumeratorInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::EnumeratorInfo>>(AsyncGetEnumeratorInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::EnumeratorInfo>> PrepareAsyncGetEnumeratorInfo(::grpc::ClientContext* context, const ::scanner::proto::EnumeratorInfoArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::EnumeratorInfo>>(PrepareAsyncGetEnumeratorInfoRaw(context, request, cq));
    }
    ::grpc::Status RegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::scanner::proto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> AsyncRegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(AsyncRegisterOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> PrepareAsyncRegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(PrepareAsyncRegisterOpRaw(context, request, cq));
    }
    ::grpc::Status RegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::scanner::proto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> AsyncRegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(AsyncRegisterPythonKernelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> PrepareAsyncRegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(PrepareAsyncRegisterPythonKernelRaw(context, request, cq));
    }
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> AsyncPing(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> PrepareAsyncPing(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> AsyncShutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status PokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> AsyncPokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(AsyncPokeWatchdogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> PrepareAsyncPokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(PrepareAsyncPokeWatchdogRaw(context, request, cq));
    }
    ::grpc::Status NextWork(::grpc::ClientContext* context, const ::scanner::proto::NextWorkRequest& request, ::scanner::proto::NextWorkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::NextWorkReply>> AsyncNextWork(::grpc::ClientContext* context, const ::scanner::proto::NextWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::NextWorkReply>>(AsyncNextWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::NextWorkReply>> PrepareAsyncNextWork(::grpc::ClientContext* context, const ::scanner::proto::NextWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::NextWorkReply>>(PrepareAsyncNextWorkRaw(context, request, cq));
    }
    ::grpc::Status FinishedWork(::grpc::ClientContext* context, const ::scanner::proto::FinishedWorkRequest& request, ::scanner::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> AsyncFinishedWork(::grpc::ClientContext* context, const ::scanner::proto::FinishedWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(AsyncFinishedWorkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> PrepareAsyncFinishedWork(::grpc::ClientContext* context, const ::scanner::proto::FinishedWorkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(PrepareAsyncFinishedWorkRaw(context, request, cq));
    }
    ::grpc::Status FinishedJob(::grpc::ClientContext* context, const ::scanner::proto::FinishedJobRequest& request, ::scanner::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> AsyncFinishedJob(::grpc::ClientContext* context, const ::scanner::proto::FinishedJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(AsyncFinishedJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> PrepareAsyncFinishedJob(::grpc::ClientContext* context, const ::scanner::proto::FinishedJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(PrepareAsyncFinishedJobRaw(context, request, cq));
    }
    ::grpc::Status NewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::scanner::proto::NewJobReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::NewJobReply>> AsyncNewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::NewJobReply>>(AsyncNewJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::NewJobReply>> PrepareAsyncNewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::NewJobReply>>(PrepareAsyncNewJobRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::ListTablesResult>* AsyncListTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::ListTablesResult>* PrepareAsyncListTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetTablesResult>* AsyncGetTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::GetTablesParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetTablesResult>* PrepareAsyncGetTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::GetTablesParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* AsyncDeleteTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::DeleteTablesParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* PrepareAsyncDeleteTablesRaw(::grpc::ClientContext* context, const ::scanner::proto::DeleteTablesParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* AsyncNewTableRaw(::grpc::ClientContext* context, const ::scanner::proto::NewTableParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* PrepareAsyncNewTableRaw(::grpc::ClientContext* context, const ::scanner::proto::NewTableParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetVideoMetadataResult>* AsyncGetVideoMetadataRaw(::grpc::ClientContext* context, const ::scanner::proto::GetVideoMetadataParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetVideoMetadataResult>* PrepareAsyncGetVideoMetadataRaw(::grpc::ClientContext* context, const ::scanner::proto::GetVideoMetadataParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Registration>* AsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::scanner::proto::WorkerParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Registration>* PrepareAsyncRegisterWorkerRaw(::grpc::ClientContext* context, const ::scanner::proto::WorkerParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* AsyncUnregisterWorkerRaw(::grpc::ClientContext* context, const ::scanner::proto::UnregisterWorkerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* PrepareAsyncUnregisterWorkerRaw(::grpc::ClientContext* context, const ::scanner::proto::UnregisterWorkerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::RegisteredWorkers>* AsyncActiveWorkersRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::RegisteredWorkers>* PrepareAsyncActiveWorkersRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::IngestResult>* AsyncIngestVideosRaw(::grpc::ClientContext* context, const ::scanner::proto::IngestParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::IngestResult>* PrepareAsyncIngestVideosRaw(::grpc::ClientContext* context, const ::scanner::proto::IngestParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetJobStatusReply>* AsyncGetJobStatusRaw(::grpc::ClientContext* context, const ::scanner::proto::GetJobStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::GetJobStatusReply>* PrepareAsyncGetJobStatusRaw(::grpc::ClientContext* context, const ::scanner::proto::GetJobStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* AsyncLoadOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* PrepareAsyncLoadOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::OpInfo>* AsyncGetOpInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::OpInfoArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::OpInfo>* PrepareAsyncGetOpInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::OpInfoArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::SourceInfo>* AsyncGetSourceInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::SourceInfoArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::SourceInfo>* PrepareAsyncGetSourceInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::SourceInfoArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::SinkInfo>* AsyncGetSinkInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::SinkInfoArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::SinkInfo>* PrepareAsyncGetSinkInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::SinkInfoArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::EnumeratorInfo>* AsyncGetEnumeratorInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::EnumeratorInfoArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::EnumeratorInfo>* PrepareAsyncGetEnumeratorInfoRaw(::grpc::ClientContext* context, const ::scanner::proto::EnumeratorInfoArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* AsyncRegisterOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* PrepareAsyncRegisterOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* AsyncRegisterPythonKernelRaw(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* PrepareAsyncRegisterPythonKernelRaw(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* AsyncPingRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* AsyncPokeWatchdogRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* PrepareAsyncPokeWatchdogRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::NextWorkReply>* AsyncNextWorkRaw(::grpc::ClientContext* context, const ::scanner::proto::NextWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::NextWorkReply>* PrepareAsyncNextWorkRaw(::grpc::ClientContext* context, const ::scanner::proto::NextWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* AsyncFinishedWorkRaw(::grpc::ClientContext* context, const ::scanner::proto::FinishedWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* PrepareAsyncFinishedWorkRaw(::grpc::ClientContext* context, const ::scanner::proto::FinishedWorkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* AsyncFinishedJobRaw(::grpc::ClientContext* context, const ::scanner::proto::FinishedJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* PrepareAsyncFinishedJobRaw(::grpc::ClientContext* context, const ::scanner::proto::FinishedJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::NewJobReply>* AsyncNewJobRaw(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::NewJobReply>* PrepareAsyncNewJobRaw(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListTables_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTables_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTables_;
    const ::grpc::internal::RpcMethod rpcmethod_NewTable_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVideoMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterWorker_;
    const ::grpc::internal::RpcMethod rpcmethod_UnregisterWorker_;
    const ::grpc::internal::RpcMethod rpcmethod_ActiveWorkers_;
    const ::grpc::internal::RpcMethod rpcmethod_IngestVideos_;
    const ::grpc::internal::RpcMethod rpcmethod_GetJobStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadOp_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOpInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSourceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSinkInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEnumeratorInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterOp_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterPythonKernel_;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::internal::RpcMethod rpcmethod_PokeWatchdog_;
    const ::grpc::internal::RpcMethod rpcmethod_NextWork_;
    const ::grpc::internal::RpcMethod rpcmethod_FinishedWork_;
    const ::grpc::internal::RpcMethod rpcmethod_FinishedJob_;
    const ::grpc::internal::RpcMethod rpcmethod_NewJob_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // List table info
    virtual ::grpc::Status ListTables(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::ListTablesResult* response);
    // Get table info
    virtual ::grpc::Status GetTables(::grpc::ServerContext* context, const ::scanner::proto::GetTablesParams* request, ::scanner::proto::GetTablesResult* response);
    // Delete table in the database
    virtual ::grpc::Status DeleteTables(::grpc::ServerContext* context, const ::scanner::proto::DeleteTablesParams* request, ::scanner::proto::Empty* response);
    virtual ::grpc::Status NewTable(::grpc::ServerContext* context, const ::scanner::proto::NewTableParams* request, ::scanner::proto::Empty* response);
    virtual ::grpc::Status GetVideoMetadata(::grpc::ServerContext* context, const ::scanner::proto::GetVideoMetadataParams* request, ::scanner::proto::GetVideoMetadataResult* response);
    // / Worker registration methods
    // Called after a new worker spawns to register with the master
    virtual ::grpc::Status RegisterWorker(::grpc::ServerContext* context, const ::scanner::proto::WorkerParams* request, ::scanner::proto::Registration* response);
    // Called when a worker is removed
    virtual ::grpc::Status UnregisterWorker(::grpc::ServerContext* context, const ::scanner::proto::UnregisterWorkerRequest* request, ::scanner::proto::Empty* response);
    virtual ::grpc::Status ActiveWorkers(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::RegisteredWorkers* response);
    // Ingest videos into the system
    virtual ::grpc::Status IngestVideos(::grpc::ServerContext* context, const ::scanner::proto::IngestParameters* request, ::scanner::proto::IngestResult* response);
    virtual ::grpc::Status GetJobStatus(::grpc::ServerContext* context, const ::scanner::proto::GetJobStatusRequest* request, ::scanner::proto::GetJobStatusReply* response);
    // Register new methods
    virtual ::grpc::Status LoadOp(::grpc::ServerContext* context, const ::scanner::proto::OpPath* request, ::scanner::proto::Result* response);
    virtual ::grpc::Status GetOpInfo(::grpc::ServerContext* context, const ::scanner::proto::OpInfoArgs* request, ::scanner::proto::OpInfo* response);
    virtual ::grpc::Status GetSourceInfo(::grpc::ServerContext* context, const ::scanner::proto::SourceInfoArgs* request, ::scanner::proto::SourceInfo* response);
    virtual ::grpc::Status GetSinkInfo(::grpc::ServerContext* context, const ::scanner::proto::SinkInfoArgs* request, ::scanner::proto::SinkInfo* response);
    virtual ::grpc::Status GetEnumeratorInfo(::grpc::ServerContext* context, const ::scanner::proto::EnumeratorInfoArgs* request, ::scanner::proto::EnumeratorInfo* response);
    virtual ::grpc::Status RegisterOp(::grpc::ServerContext* context, const ::scanner::proto::OpRegistration* request, ::scanner::proto::Result* response);
    virtual ::grpc::Status RegisterPythonKernel(::grpc::ServerContext* context, const ::scanner::proto::PythonKernelRegistration* request, ::scanner::proto::Result* response);
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response);
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Result* response);
    virtual ::grpc::Status PokeWatchdog(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response);
    // Internal
    virtual ::grpc::Status NextWork(::grpc::ServerContext* context, const ::scanner::proto::NextWorkRequest* request, ::scanner::proto::NextWorkReply* response);
    virtual ::grpc::Status FinishedWork(::grpc::ServerContext* context, const ::scanner::proto::FinishedWorkRequest* request, ::scanner::proto::Empty* response);
    virtual ::grpc::Status FinishedJob(::grpc::ServerContext* context, const ::scanner::proto::FinishedJobRequest* request, ::scanner::proto::Empty* response);
    virtual ::grpc::Status NewJob(::grpc::ServerContext* context, const ::scanner::proto::BulkJobParameters* request, ::scanner::proto::NewJobReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListTables() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTables(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::ListTablesResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTables(::grpc::ServerContext* context, ::scanner::proto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::ListTablesResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTables() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTables(::grpc::ServerContext* context, const ::scanner::proto::GetTablesParams* request, ::scanner::proto::GetTablesResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTables(::grpc::ServerContext* context, ::scanner::proto::GetTablesParams* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::GetTablesResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteTables() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTables(::grpc::ServerContext* context, const ::scanner::proto::DeleteTablesParams* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTables(::grpc::ServerContext* context, ::scanner::proto::DeleteTablesParams* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewTable() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_NewTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewTable(::grpc::ServerContext* context, const ::scanner::proto::NewTableParams* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewTable(::grpc::ServerContext* context, ::scanner::proto::NewTableParams* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVideoMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVideoMetadata() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetVideoMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVideoMetadata(::grpc::ServerContext* context, const ::scanner::proto::GetVideoMetadataParams* request, ::scanner::proto::GetVideoMetadataResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVideoMetadata(::grpc::ServerContext* context, ::scanner::proto::GetVideoMetadataParams* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::GetVideoMetadataResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* context, const ::scanner::proto::WorkerParams* request, ::scanner::proto::Registration* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterWorker(::grpc::ServerContext* context, ::scanner::proto::WorkerParams* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Registration>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnregisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UnregisterWorker() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UnregisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterWorker(::grpc::ServerContext* context, const ::scanner::proto::UnregisterWorkerRequest* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterWorker(::grpc::ServerContext* context, ::scanner::proto::UnregisterWorkerRequest* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ActiveWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ActiveWorkers() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ActiveWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActiveWorkers(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::RegisteredWorkers* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActiveWorkers(::grpc::ServerContext* context, ::scanner::proto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::RegisteredWorkers>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IngestVideos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IngestVideos() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_IngestVideos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IngestVideos(::grpc::ServerContext* context, const ::scanner::proto::IngestParameters* request, ::scanner::proto::IngestResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIngestVideos(::grpc::ServerContext* context, ::scanner::proto::IngestParameters* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::IngestResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetJobStatus() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJobStatus(::grpc::ServerContext* context, const ::scanner::proto::GetJobStatusRequest* request, ::scanner::proto::GetJobStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJobStatus(::grpc::ServerContext* context, ::scanner::proto::GetJobStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::GetJobStatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoadOp() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_LoadOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadOp(::grpc::ServerContext* context, const ::scanner::proto::OpPath* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadOp(::grpc::ServerContext* context, ::scanner::proto::OpPath* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOpInfo() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetOpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOpInfo(::grpc::ServerContext* context, const ::scanner::proto::OpInfoArgs* request, ::scanner::proto::OpInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOpInfo(::grpc::ServerContext* context, ::scanner::proto::OpInfoArgs* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::OpInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSourceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSourceInfo() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetSourceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSourceInfo(::grpc::ServerContext* context, const ::scanner::proto::SourceInfoArgs* request, ::scanner::proto::SourceInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSourceInfo(::grpc::ServerContext* context, ::scanner::proto::SourceInfoArgs* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::SourceInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSinkInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSinkInfo() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetSinkInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSinkInfo(::grpc::ServerContext* context, const ::scanner::proto::SinkInfoArgs* request, ::scanner::proto::SinkInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSinkInfo(::grpc::ServerContext* context, ::scanner::proto::SinkInfoArgs* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::SinkInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEnumeratorInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetEnumeratorInfo() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetEnumeratorInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnumeratorInfo(::grpc::ServerContext* context, const ::scanner::proto::EnumeratorInfoArgs* request, ::scanner::proto::EnumeratorInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnumeratorInfo(::grpc::ServerContext* context, ::scanner::proto::EnumeratorInfoArgs* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::EnumeratorInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterOp() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_RegisterOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterOp(::grpc::ServerContext* context, const ::scanner::proto::OpRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterOp(::grpc::ServerContext* context, ::scanner::proto::OpRegistration* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterPythonKernel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterPythonKernel() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_RegisterPythonKernel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPythonKernel(::grpc::ServerContext* context, const ::scanner::proto::PythonKernelRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPythonKernel(::grpc::ServerContext* context, ::scanner::proto::PythonKernelRegistration* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::scanner::proto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::scanner::proto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PokeWatchdog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PokeWatchdog() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_PokeWatchdog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PokeWatchdog(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPokeWatchdog(::grpc::ServerContext* context, ::scanner::proto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NextWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NextWork() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_NextWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextWork(::grpc::ServerContext* context, const ::scanner::proto::NextWorkRequest* request, ::scanner::proto::NextWorkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNextWork(::grpc::ServerContext* context, ::scanner::proto::NextWorkRequest* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::NextWorkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FinishedWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FinishedWork() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_FinishedWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishedWork(::grpc::ServerContext* context, const ::scanner::proto::FinishedWorkRequest* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishedWork(::grpc::ServerContext* context, ::scanner::proto::FinishedWorkRequest* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FinishedJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FinishedJob() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_FinishedJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishedJob(::grpc::ServerContext* context, const ::scanner::proto::FinishedJobRequest* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishedJob(::grpc::ServerContext* context, ::scanner::proto::FinishedJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewJob() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_NewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewJob(::grpc::ServerContext* context, const ::scanner::proto::BulkJobParameters* request, ::scanner::proto::NewJobReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewJob(::grpc::ServerContext* context, ::scanner::proto::BulkJobParameters* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::NewJobReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListTables<WithAsyncMethod_GetTables<WithAsyncMethod_DeleteTables<WithAsyncMethod_NewTable<WithAsyncMethod_GetVideoMetadata<WithAsyncMethod_RegisterWorker<WithAsyncMethod_UnregisterWorker<WithAsyncMethod_ActiveWorkers<WithAsyncMethod_IngestVideos<WithAsyncMethod_GetJobStatus<WithAsyncMethod_LoadOp<WithAsyncMethod_GetOpInfo<WithAsyncMethod_GetSourceInfo<WithAsyncMethod_GetSinkInfo<WithAsyncMethod_GetEnumeratorInfo<WithAsyncMethod_RegisterOp<WithAsyncMethod_RegisterPythonKernel<WithAsyncMethod_Ping<WithAsyncMethod_Shutdown<WithAsyncMethod_PokeWatchdog<WithAsyncMethod_NextWork<WithAsyncMethod_FinishedWork<WithAsyncMethod_FinishedJob<WithAsyncMethod_NewJob<Service > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListTables() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTables(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::ListTablesResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTables() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTables(::grpc::ServerContext* context, const ::scanner::proto::GetTablesParams* request, ::scanner::proto::GetTablesResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteTables() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTables(::grpc::ServerContext* context, const ::scanner::proto::DeleteTablesParams* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewTable() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_NewTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewTable(::grpc::ServerContext* context, const ::scanner::proto::NewTableParams* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVideoMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVideoMetadata() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetVideoMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVideoMetadata(::grpc::ServerContext* context, const ::scanner::proto::GetVideoMetadataParams* request, ::scanner::proto::GetVideoMetadataResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* context, const ::scanner::proto::WorkerParams* request, ::scanner::proto::Registration* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnregisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UnregisterWorker() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UnregisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterWorker(::grpc::ServerContext* context, const ::scanner::proto::UnregisterWorkerRequest* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ActiveWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ActiveWorkers() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ActiveWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActiveWorkers(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::RegisteredWorkers* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IngestVideos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IngestVideos() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_IngestVideos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IngestVideos(::grpc::ServerContext* context, const ::scanner::proto::IngestParameters* request, ::scanner::proto::IngestResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetJobStatus() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJobStatus(::grpc::ServerContext* context, const ::scanner::proto::GetJobStatusRequest* request, ::scanner::proto::GetJobStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoadOp() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_LoadOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadOp(::grpc::ServerContext* context, const ::scanner::proto::OpPath* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOpInfo() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetOpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOpInfo(::grpc::ServerContext* context, const ::scanner::proto::OpInfoArgs* request, ::scanner::proto::OpInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSourceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSourceInfo() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetSourceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSourceInfo(::grpc::ServerContext* context, const ::scanner::proto::SourceInfoArgs* request, ::scanner::proto::SourceInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSinkInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSinkInfo() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetSinkInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSinkInfo(::grpc::ServerContext* context, const ::scanner::proto::SinkInfoArgs* request, ::scanner::proto::SinkInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEnumeratorInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetEnumeratorInfo() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetEnumeratorInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnumeratorInfo(::grpc::ServerContext* context, const ::scanner::proto::EnumeratorInfoArgs* request, ::scanner::proto::EnumeratorInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterOp() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_RegisterOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterOp(::grpc::ServerContext* context, const ::scanner::proto::OpRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterPythonKernel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterPythonKernel() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_RegisterPythonKernel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPythonKernel(::grpc::ServerContext* context, const ::scanner::proto::PythonKernelRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PokeWatchdog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PokeWatchdog() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_PokeWatchdog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PokeWatchdog(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NextWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NextWork() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_NextWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextWork(::grpc::ServerContext* context, const ::scanner::proto::NextWorkRequest* request, ::scanner::proto::NextWorkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FinishedWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FinishedWork() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_FinishedWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishedWork(::grpc::ServerContext* context, const ::scanner::proto::FinishedWorkRequest* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FinishedJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FinishedJob() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_FinishedJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishedJob(::grpc::ServerContext* context, const ::scanner::proto::FinishedJobRequest* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewJob() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_NewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewJob(::grpc::ServerContext* context, const ::scanner::proto::BulkJobParameters* request, ::scanner::proto::NewJobReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListTables() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::Empty, ::scanner::proto::ListTablesResult>(std::bind(&WithStreamedUnaryMethod_ListTables<BaseClass>::StreamedListTables, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTables(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::ListTablesResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::Empty,::scanner::proto::ListTablesResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTables() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::GetTablesParams, ::scanner::proto::GetTablesResult>(std::bind(&WithStreamedUnaryMethod_GetTables<BaseClass>::StreamedGetTables, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTables(::grpc::ServerContext* context, const ::scanner::proto::GetTablesParams* request, ::scanner::proto::GetTablesResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::GetTablesParams,::scanner::proto::GetTablesResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteTables() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::DeleteTablesParams, ::scanner::proto::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteTables<BaseClass>::StreamedDeleteTables, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteTables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTables(::grpc::ServerContext* context, const ::scanner::proto::DeleteTablesParams* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::DeleteTablesParams,::scanner::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewTable() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::NewTableParams, ::scanner::proto::Empty>(std::bind(&WithStreamedUnaryMethod_NewTable<BaseClass>::StreamedNewTable, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewTable(::grpc::ServerContext* context, const ::scanner::proto::NewTableParams* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::NewTableParams,::scanner::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVideoMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetVideoMetadata() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::GetVideoMetadataParams, ::scanner::proto::GetVideoMetadataResult>(std::bind(&WithStreamedUnaryMethod_GetVideoMetadata<BaseClass>::StreamedGetVideoMetadata, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetVideoMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVideoMetadata(::grpc::ServerContext* context, const ::scanner::proto::GetVideoMetadataParams* request, ::scanner::proto::GetVideoMetadataResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVideoMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::GetVideoMetadataParams,::scanner::proto::GetVideoMetadataResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterWorker() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::WorkerParams, ::scanner::proto::Registration>(std::bind(&WithStreamedUnaryMethod_RegisterWorker<BaseClass>::StreamedRegisterWorker, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterWorker(::grpc::ServerContext* context, const ::scanner::proto::WorkerParams* request, ::scanner::proto::Registration* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::WorkerParams,::scanner::proto::Registration>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnregisterWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UnregisterWorker() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::UnregisterWorkerRequest, ::scanner::proto::Empty>(std::bind(&WithStreamedUnaryMethod_UnregisterWorker<BaseClass>::StreamedUnregisterWorker, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UnregisterWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnregisterWorker(::grpc::ServerContext* context, const ::scanner::proto::UnregisterWorkerRequest* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnregisterWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::UnregisterWorkerRequest,::scanner::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ActiveWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ActiveWorkers() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::Empty, ::scanner::proto::RegisteredWorkers>(std::bind(&WithStreamedUnaryMethod_ActiveWorkers<BaseClass>::StreamedActiveWorkers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ActiveWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ActiveWorkers(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::RegisteredWorkers* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedActiveWorkers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::Empty,::scanner::proto::RegisteredWorkers>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IngestVideos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IngestVideos() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::IngestParameters, ::scanner::proto::IngestResult>(std::bind(&WithStreamedUnaryMethod_IngestVideos<BaseClass>::StreamedIngestVideos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IngestVideos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IngestVideos(::grpc::ServerContext* context, const ::scanner::proto::IngestParameters* request, ::scanner::proto::IngestResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIngestVideos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::IngestParameters,::scanner::proto::IngestResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetJobStatus() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::GetJobStatusRequest, ::scanner::proto::GetJobStatusReply>(std::bind(&WithStreamedUnaryMethod_GetJobStatus<BaseClass>::StreamedGetJobStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetJobStatus(::grpc::ServerContext* context, const ::scanner::proto::GetJobStatusRequest* request, ::scanner::proto::GetJobStatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetJobStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::GetJobStatusRequest,::scanner::proto::GetJobStatusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoadOp() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::OpPath, ::scanner::proto::Result>(std::bind(&WithStreamedUnaryMethod_LoadOp<BaseClass>::StreamedLoadOp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoadOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadOp(::grpc::ServerContext* context, const ::scanner::proto::OpPath* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::OpPath,::scanner::proto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOpInfo() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::OpInfoArgs, ::scanner::proto::OpInfo>(std::bind(&WithStreamedUnaryMethod_GetOpInfo<BaseClass>::StreamedGetOpInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOpInfo(::grpc::ServerContext* context, const ::scanner::proto::OpInfoArgs* request, ::scanner::proto::OpInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOpInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::OpInfoArgs,::scanner::proto::OpInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSourceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSourceInfo() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::SourceInfoArgs, ::scanner::proto::SourceInfo>(std::bind(&WithStreamedUnaryMethod_GetSourceInfo<BaseClass>::StreamedGetSourceInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSourceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSourceInfo(::grpc::ServerContext* context, const ::scanner::proto::SourceInfoArgs* request, ::scanner::proto::SourceInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSourceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::SourceInfoArgs,::scanner::proto::SourceInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSinkInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSinkInfo() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::SinkInfoArgs, ::scanner::proto::SinkInfo>(std::bind(&WithStreamedUnaryMethod_GetSinkInfo<BaseClass>::StreamedGetSinkInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSinkInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSinkInfo(::grpc::ServerContext* context, const ::scanner::proto::SinkInfoArgs* request, ::scanner::proto::SinkInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSinkInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::SinkInfoArgs,::scanner::proto::SinkInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEnumeratorInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetEnumeratorInfo() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::EnumeratorInfoArgs, ::scanner::proto::EnumeratorInfo>(std::bind(&WithStreamedUnaryMethod_GetEnumeratorInfo<BaseClass>::StreamedGetEnumeratorInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetEnumeratorInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEnumeratorInfo(::grpc::ServerContext* context, const ::scanner::proto::EnumeratorInfoArgs* request, ::scanner::proto::EnumeratorInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEnumeratorInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::EnumeratorInfoArgs,::scanner::proto::EnumeratorInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterOp() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::OpRegistration, ::scanner::proto::Result>(std::bind(&WithStreamedUnaryMethod_RegisterOp<BaseClass>::StreamedRegisterOp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterOp(::grpc::ServerContext* context, const ::scanner::proto::OpRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::OpRegistration,::scanner::proto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterPythonKernel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterPythonKernel() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::PythonKernelRegistration, ::scanner::proto::Result>(std::bind(&WithStreamedUnaryMethod_RegisterPythonKernel<BaseClass>::StreamedRegisterPythonKernel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterPythonKernel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterPythonKernel(::grpc::ServerContext* context, const ::scanner::proto::PythonKernelRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterPythonKernel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::PythonKernelRegistration,::scanner::proto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::Empty, ::scanner::proto::Empty>(std::bind(&WithStreamedUnaryMethod_Ping<BaseClass>::StreamedPing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::Empty,::scanner::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::Empty, ::scanner::proto::Result>(std::bind(&WithStreamedUnaryMethod_Shutdown<BaseClass>::StreamedShutdown, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::Empty,::scanner::proto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PokeWatchdog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PokeWatchdog() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::Empty, ::scanner::proto::Empty>(std::bind(&WithStreamedUnaryMethod_PokeWatchdog<BaseClass>::StreamedPokeWatchdog, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PokeWatchdog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PokeWatchdog(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPokeWatchdog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::Empty,::scanner::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NextWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NextWork() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::NextWorkRequest, ::scanner::proto::NextWorkReply>(std::bind(&WithStreamedUnaryMethod_NextWork<BaseClass>::StreamedNextWork, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NextWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NextWork(::grpc::ServerContext* context, const ::scanner::proto::NextWorkRequest* request, ::scanner::proto::NextWorkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNextWork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::NextWorkRequest,::scanner::proto::NextWorkReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FinishedWork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FinishedWork() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::FinishedWorkRequest, ::scanner::proto::Empty>(std::bind(&WithStreamedUnaryMethod_FinishedWork<BaseClass>::StreamedFinishedWork, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FinishedWork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FinishedWork(::grpc::ServerContext* context, const ::scanner::proto::FinishedWorkRequest* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinishedWork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::FinishedWorkRequest,::scanner::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FinishedJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FinishedJob() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::FinishedJobRequest, ::scanner::proto::Empty>(std::bind(&WithStreamedUnaryMethod_FinishedJob<BaseClass>::StreamedFinishedJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FinishedJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FinishedJob(::grpc::ServerContext* context, const ::scanner::proto::FinishedJobRequest* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinishedJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::FinishedJobRequest,::scanner::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewJob() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::BulkJobParameters, ::scanner::proto::NewJobReply>(std::bind(&WithStreamedUnaryMethod_NewJob<BaseClass>::StreamedNewJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewJob(::grpc::ServerContext* context, const ::scanner::proto::BulkJobParameters* request, ::scanner::proto::NewJobReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::BulkJobParameters,::scanner::proto::NewJobReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListTables<WithStreamedUnaryMethod_GetTables<WithStreamedUnaryMethod_DeleteTables<WithStreamedUnaryMethod_NewTable<WithStreamedUnaryMethod_GetVideoMetadata<WithStreamedUnaryMethod_RegisterWorker<WithStreamedUnaryMethod_UnregisterWorker<WithStreamedUnaryMethod_ActiveWorkers<WithStreamedUnaryMethod_IngestVideos<WithStreamedUnaryMethod_GetJobStatus<WithStreamedUnaryMethod_LoadOp<WithStreamedUnaryMethod_GetOpInfo<WithStreamedUnaryMethod_GetSourceInfo<WithStreamedUnaryMethod_GetSinkInfo<WithStreamedUnaryMethod_GetEnumeratorInfo<WithStreamedUnaryMethod_RegisterOp<WithStreamedUnaryMethod_RegisterPythonKernel<WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_PokeWatchdog<WithStreamedUnaryMethod_NextWork<WithStreamedUnaryMethod_FinishedWork<WithStreamedUnaryMethod_FinishedJob<WithStreamedUnaryMethod_NewJob<Service > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListTables<WithStreamedUnaryMethod_GetTables<WithStreamedUnaryMethod_DeleteTables<WithStreamedUnaryMethod_NewTable<WithStreamedUnaryMethod_GetVideoMetadata<WithStreamedUnaryMethod_RegisterWorker<WithStreamedUnaryMethod_UnregisterWorker<WithStreamedUnaryMethod_ActiveWorkers<WithStreamedUnaryMethod_IngestVideos<WithStreamedUnaryMethod_GetJobStatus<WithStreamedUnaryMethod_LoadOp<WithStreamedUnaryMethod_GetOpInfo<WithStreamedUnaryMethod_GetSourceInfo<WithStreamedUnaryMethod_GetSinkInfo<WithStreamedUnaryMethod_GetEnumeratorInfo<WithStreamedUnaryMethod_RegisterOp<WithStreamedUnaryMethod_RegisterPythonKernel<WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_PokeWatchdog<WithStreamedUnaryMethod_NextWork<WithStreamedUnaryMethod_FinishedWork<WithStreamedUnaryMethod_FinishedJob<WithStreamedUnaryMethod_NewJob<Service > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};
// / Database metadata methods

class Worker final {
 public:
  static constexpr char const* service_full_name() {
    return "scanner.proto.Worker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::scanner::proto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> AsyncNewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(AsyncNewJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> PrepareAsyncNewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(PrepareAsyncNewJobRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::scanner::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> AsyncLoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(AsyncLoadOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> PrepareAsyncLoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(PrepareAsyncLoadOpRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::scanner::proto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> AsyncRegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(AsyncRegisterOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> PrepareAsyncRegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(PrepareAsyncRegisterOpRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::scanner::proto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> AsyncRegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(AsyncRegisterPythonKernelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> PrepareAsyncRegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(PrepareAsyncRegisterPythonKernelRaw(context, request, cq));
    }
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> AsyncShutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status PokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> AsyncPokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(AsyncPokeWatchdogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> PrepareAsyncPokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(PrepareAsyncPokeWatchdogRaw(context, request, cq));
    }
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> AsyncPing(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>> PrepareAsyncPing(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>>(PrepareAsyncPingRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* AsyncNewJobRaw(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* PrepareAsyncNewJobRaw(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* AsyncLoadOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* PrepareAsyncLoadOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* AsyncRegisterOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* PrepareAsyncRegisterOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* AsyncRegisterPythonKernelRaw(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* PrepareAsyncRegisterPythonKernelRaw(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Result>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* AsyncPokeWatchdogRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* PrepareAsyncPokeWatchdogRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* AsyncPingRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scanner::proto::Empty>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::scanner::proto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> AsyncNewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(AsyncNewJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> PrepareAsyncNewJob(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(PrepareAsyncNewJobRaw(context, request, cq));
    }
    ::grpc::Status LoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::scanner::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> AsyncLoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(AsyncLoadOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> PrepareAsyncLoadOp(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(PrepareAsyncLoadOpRaw(context, request, cq));
    }
    ::grpc::Status RegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::scanner::proto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> AsyncRegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(AsyncRegisterOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> PrepareAsyncRegisterOp(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(PrepareAsyncRegisterOpRaw(context, request, cq));
    }
    ::grpc::Status RegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::scanner::proto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> AsyncRegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(AsyncRegisterPythonKernelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> PrepareAsyncRegisterPythonKernel(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(PrepareAsyncRegisterPythonKernelRaw(context, request, cq));
    }
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> AsyncShutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status PokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> AsyncPokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(AsyncPokeWatchdogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> PrepareAsyncPokeWatchdog(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(PrepareAsyncPokeWatchdogRaw(context, request, cq));
    }
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::scanner::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> AsyncPing(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>> PrepareAsyncPing(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>>(PrepareAsyncPingRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* AsyncNewJobRaw(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* PrepareAsyncNewJobRaw(::grpc::ClientContext* context, const ::scanner::proto::BulkJobParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* AsyncLoadOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* PrepareAsyncLoadOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* AsyncRegisterOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* PrepareAsyncRegisterOpRaw(::grpc::ClientContext* context, const ::scanner::proto::OpRegistration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* AsyncRegisterPythonKernelRaw(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* PrepareAsyncRegisterPythonKernelRaw(::grpc::ClientContext* context, const ::scanner::proto::PythonKernelRegistration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Result>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* AsyncPokeWatchdogRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* PrepareAsyncPokeWatchdogRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* AsyncPingRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scanner::proto::Empty>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::scanner::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NewJob_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadOp_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterOp_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterPythonKernel_;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::internal::RpcMethod rpcmethod_PokeWatchdog_;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NewJob(::grpc::ServerContext* context, const ::scanner::proto::BulkJobParameters* request, ::scanner::proto::Result* response);
    virtual ::grpc::Status LoadOp(::grpc::ServerContext* context, const ::scanner::proto::OpPath* request, ::scanner::proto::Empty* response);
    virtual ::grpc::Status RegisterOp(::grpc::ServerContext* context, const ::scanner::proto::OpRegistration* request, ::scanner::proto::Result* response);
    virtual ::grpc::Status RegisterPythonKernel(::grpc::ServerContext* context, const ::scanner::proto::PythonKernelRegistration* request, ::scanner::proto::Result* response);
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Result* response);
    virtual ::grpc::Status PokeWatchdog(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response);
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewJob() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewJob(::grpc::ServerContext* context, const ::scanner::proto::BulkJobParameters* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewJob(::grpc::ServerContext* context, ::scanner::proto::BulkJobParameters* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoadOp() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoadOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadOp(::grpc::ServerContext* context, const ::scanner::proto::OpPath* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadOp(::grpc::ServerContext* context, ::scanner::proto::OpPath* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterOp() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RegisterOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterOp(::grpc::ServerContext* context, const ::scanner::proto::OpRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterOp(::grpc::ServerContext* context, ::scanner::proto::OpRegistration* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterPythonKernel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterPythonKernel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RegisterPythonKernel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPythonKernel(::grpc::ServerContext* context, const ::scanner::proto::PythonKernelRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPythonKernel(::grpc::ServerContext* context, ::scanner::proto::PythonKernelRegistration* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::scanner::proto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PokeWatchdog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PokeWatchdog() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PokeWatchdog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PokeWatchdog(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPokeWatchdog(::grpc::ServerContext* context, ::scanner::proto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::scanner::proto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::scanner::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NewJob<WithAsyncMethod_LoadOp<WithAsyncMethod_RegisterOp<WithAsyncMethod_RegisterPythonKernel<WithAsyncMethod_Shutdown<WithAsyncMethod_PokeWatchdog<WithAsyncMethod_Ping<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_NewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewJob() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewJob(::grpc::ServerContext* context, const ::scanner::proto::BulkJobParameters* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoadOp() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoadOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadOp(::grpc::ServerContext* context, const ::scanner::proto::OpPath* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterOp() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RegisterOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterOp(::grpc::ServerContext* context, const ::scanner::proto::OpRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterPythonKernel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterPythonKernel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RegisterPythonKernel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPythonKernel(::grpc::ServerContext* context, const ::scanner::proto::PythonKernelRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PokeWatchdog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PokeWatchdog() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PokeWatchdog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PokeWatchdog(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewJob() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::BulkJobParameters, ::scanner::proto::Result>(std::bind(&WithStreamedUnaryMethod_NewJob<BaseClass>::StreamedNewJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewJob(::grpc::ServerContext* context, const ::scanner::proto::BulkJobParameters* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::BulkJobParameters,::scanner::proto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoadOp() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::OpPath, ::scanner::proto::Empty>(std::bind(&WithStreamedUnaryMethod_LoadOp<BaseClass>::StreamedLoadOp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoadOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadOp(::grpc::ServerContext* context, const ::scanner::proto::OpPath* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::OpPath,::scanner::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterOp() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::OpRegistration, ::scanner::proto::Result>(std::bind(&WithStreamedUnaryMethod_RegisterOp<BaseClass>::StreamedRegisterOp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterOp(::grpc::ServerContext* context, const ::scanner::proto::OpRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::OpRegistration,::scanner::proto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterPythonKernel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterPythonKernel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::PythonKernelRegistration, ::scanner::proto::Result>(std::bind(&WithStreamedUnaryMethod_RegisterPythonKernel<BaseClass>::StreamedRegisterPythonKernel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterPythonKernel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterPythonKernel(::grpc::ServerContext* context, const ::scanner::proto::PythonKernelRegistration* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterPythonKernel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::PythonKernelRegistration,::scanner::proto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::Empty, ::scanner::proto::Result>(std::bind(&WithStreamedUnaryMethod_Shutdown<BaseClass>::StreamedShutdown, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Result* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::Empty,::scanner::proto::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PokeWatchdog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PokeWatchdog() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::Empty, ::scanner::proto::Empty>(std::bind(&WithStreamedUnaryMethod_PokeWatchdog<BaseClass>::StreamedPokeWatchdog, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PokeWatchdog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PokeWatchdog(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPokeWatchdog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::Empty,::scanner::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::scanner::proto::Empty, ::scanner::proto::Empty>(std::bind(&WithStreamedUnaryMethod_Ping<BaseClass>::StreamedPing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::scanner::proto::Empty* request, ::scanner::proto::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scanner::proto::Empty,::scanner::proto::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NewJob<WithStreamedUnaryMethod_LoadOp<WithStreamedUnaryMethod_RegisterOp<WithStreamedUnaryMethod_RegisterPythonKernel<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_PokeWatchdog<WithStreamedUnaryMethod_Ping<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NewJob<WithStreamedUnaryMethod_LoadOp<WithStreamedUnaryMethod_RegisterOp<WithStreamedUnaryMethod_RegisterPythonKernel<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_PokeWatchdog<WithStreamedUnaryMethod_Ping<Service > > > > > > > StreamedService;
};

}  // namespace proto
}  // namespace scanner


#endif  // GRPC_scanner_2fengine_2frpc_2eproto__INCLUDED
