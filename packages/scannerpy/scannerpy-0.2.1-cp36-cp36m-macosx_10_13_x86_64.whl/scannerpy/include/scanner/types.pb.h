// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scanner/types.proto

#ifndef PROTOBUF_scanner_2ftypes_2eproto__INCLUDED
#define PROTOBUF_scanner_2ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_scanner_2ftypes_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFrameImpl();
void InitDefaultsFrame();
void InitDefaultsBoundingBoxImpl();
void InitDefaultsBoundingBox();
void InitDefaultsPointImpl();
void InitDefaultsPoint();
void InitDefaultsNetDescriptorImpl();
void InitDefaultsNetDescriptor();
inline void InitDefaults() {
  InitDefaultsFrame();
  InitDefaultsBoundingBox();
  InitDefaultsPoint();
  InitDefaultsNetDescriptor();
}
}  // namespace protobuf_scanner_2ftypes_2eproto
namespace scanner {
namespace proto {
class BoundingBox;
class BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class NetDescriptor;
class NetDescriptorDefaultTypeInternal;
extern NetDescriptorDefaultTypeInternal _NetDescriptor_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
}  // namespace proto
}  // namespace scanner
namespace scanner {
namespace proto {

// ===================================================================

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:scanner.proto.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const PROTOBUF_FINAL { return New(NULL); }

  Frame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 buffer = 1;
  void clear_buffer();
  static const int kBufferFieldNumber = 1;
  ::google::protobuf::int64 buffer() const;
  void set_buffer(::google::protobuf::int64 value);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:scanner.proto.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 buffer_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_scanner_2ftypes_2eproto::TableStruct;
  friend void ::protobuf_scanner_2ftypes_2eproto::InitDefaultsFrameImpl();
};
// -------------------------------------------------------------------

class BoundingBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:scanner.proto.BoundingBox) */ {
 public:
  BoundingBox();
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BoundingBox* other);
  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const PROTOBUF_FINAL { return New(NULL); }

  BoundingBox* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BoundingBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x1 = 1;
  void clear_x1();
  static const int kX1FieldNumber = 1;
  float x1() const;
  void set_x1(float value);

  // float y1 = 2;
  void clear_y1();
  static const int kY1FieldNumber = 2;
  float y1() const;
  void set_y1(float value);

  // float x2 = 3;
  void clear_x2();
  static const int kX2FieldNumber = 3;
  float x2() const;
  void set_x2(float value);

  // float y2 = 4;
  void clear_y2();
  static const int kY2FieldNumber = 4;
  float y2() const;
  void set_y2(float value);

  // float score = 5;
  void clear_score();
  static const int kScoreFieldNumber = 5;
  float score() const;
  void set_score(float value);

  // int32 track_id = 6;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 6;
  ::google::protobuf::int32 track_id() const;
  void set_track_id(::google::protobuf::int32 value);

  // double track_score = 7;
  void clear_track_score();
  static const int kTrackScoreFieldNumber = 7;
  double track_score() const;
  void set_track_score(double value);

  // int32 label = 8;
  void clear_label();
  static const int kLabelFieldNumber = 8;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:scanner.proto.BoundingBox)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x1_;
  float y1_;
  float x2_;
  float y2_;
  float score_;
  ::google::protobuf::int32 track_id_;
  double track_score_;
  ::google::protobuf::int32 label_;
  mutable int _cached_size_;
  friend struct ::protobuf_scanner_2ftypes_2eproto::TableStruct;
  friend void ::protobuf_scanner_2ftypes_2eproto::InitDefaultsBoundingBoxImpl();
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:scanner.proto.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float score = 3;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:scanner.proto.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float score_;
  mutable int _cached_size_;
  friend struct ::protobuf_scanner_2ftypes_2eproto::TableStruct;
  friend void ::protobuf_scanner_2ftypes_2eproto::InitDefaultsPointImpl();
};
// -------------------------------------------------------------------

class NetDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:scanner.proto.NetDescriptor) */ {
 public:
  NetDescriptor();
  virtual ~NetDescriptor();

  NetDescriptor(const NetDescriptor& from);

  inline NetDescriptor& operator=(const NetDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetDescriptor(NetDescriptor&& from) noexcept
    : NetDescriptor() {
    *this = ::std::move(from);
  }

  inline NetDescriptor& operator=(NetDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetDescriptor* internal_default_instance() {
    return reinterpret_cast<const NetDescriptor*>(
               &_NetDescriptor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(NetDescriptor* other);
  friend void swap(NetDescriptor& a, NetDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetDescriptor* New() const PROTOBUF_FINAL { return New(NULL); }

  NetDescriptor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetDescriptor& from);
  void MergeFrom(const NetDescriptor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input_layer_names = 3;
  int input_layer_names_size() const;
  void clear_input_layer_names();
  static const int kInputLayerNamesFieldNumber = 3;
  const ::std::string& input_layer_names(int index) const;
  ::std::string* mutable_input_layer_names(int index);
  void set_input_layer_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input_layer_names(int index, ::std::string&& value);
  #endif
  void set_input_layer_names(int index, const char* value);
  void set_input_layer_names(int index, const char* value, size_t size);
  ::std::string* add_input_layer_names();
  void add_input_layer_names(const ::std::string& value);
  #if LANG_CXX11
  void add_input_layer_names(::std::string&& value);
  #endif
  void add_input_layer_names(const char* value);
  void add_input_layer_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input_layer_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input_layer_names();

  // repeated string output_layer_names = 4;
  int output_layer_names_size() const;
  void clear_output_layer_names();
  static const int kOutputLayerNamesFieldNumber = 4;
  const ::std::string& output_layer_names(int index) const;
  ::std::string* mutable_output_layer_names(int index);
  void set_output_layer_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_output_layer_names(int index, ::std::string&& value);
  #endif
  void set_output_layer_names(int index, const char* value);
  void set_output_layer_names(int index, const char* value, size_t size);
  ::std::string* add_output_layer_names();
  void add_output_layer_names(const ::std::string& value);
  #if LANG_CXX11
  void add_output_layer_names(::std::string&& value);
  #endif
  void add_output_layer_names(const char* value);
  void add_output_layer_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output_layer_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output_layer_names();

  // repeated float mean_colors = 7;
  int mean_colors_size() const;
  void clear_mean_colors();
  static const int kMeanColorsFieldNumber = 7;
  float mean_colors(int index) const;
  void set_mean_colors(int index, float value);
  void add_mean_colors(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_colors() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_colors();

  // repeated float mean_image = 8;
  int mean_image_size() const;
  void clear_mean_image();
  static const int kMeanImageFieldNumber = 8;
  float mean_image(int index) const;
  void set_mean_image(int index, float value);
  void add_mean_image(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_image() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_image();

  // string model_path = 1;
  void clear_model_path();
  static const int kModelPathFieldNumber = 1;
  const ::std::string& model_path() const;
  void set_model_path(const ::std::string& value);
  #if LANG_CXX11
  void set_model_path(::std::string&& value);
  #endif
  void set_model_path(const char* value);
  void set_model_path(const char* value, size_t size);
  ::std::string* mutable_model_path();
  ::std::string* release_model_path();
  void set_allocated_model_path(::std::string* model_path);

  // string model_weights_path = 2;
  void clear_model_weights_path();
  static const int kModelWeightsPathFieldNumber = 2;
  const ::std::string& model_weights_path() const;
  void set_model_weights_path(const ::std::string& value);
  #if LANG_CXX11
  void set_model_weights_path(::std::string&& value);
  #endif
  void set_model_weights_path(const char* value);
  void set_model_weights_path(const char* value, size_t size);
  ::std::string* mutable_model_weights_path();
  ::std::string* release_model_weights_path();
  void set_allocated_model_weights_path(::std::string* model_weights_path);

  // int32 input_width = 5;
  void clear_input_width();
  static const int kInputWidthFieldNumber = 5;
  ::google::protobuf::int32 input_width() const;
  void set_input_width(::google::protobuf::int32 value);

  // int32 input_height = 6;
  void clear_input_height();
  static const int kInputHeightFieldNumber = 6;
  ::google::protobuf::int32 input_height() const;
  void set_input_height(::google::protobuf::int32 value);

  // int32 mean_width = 9;
  void clear_mean_width();
  static const int kMeanWidthFieldNumber = 9;
  ::google::protobuf::int32 mean_width() const;
  void set_mean_width(::google::protobuf::int32 value);

  // int32 mean_height = 10;
  void clear_mean_height();
  static const int kMeanHeightFieldNumber = 10;
  ::google::protobuf::int32 mean_height() const;
  void set_mean_height(::google::protobuf::int32 value);

  // bool normalize = 11;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 11;
  bool normalize() const;
  void set_normalize(bool value);

  // bool preserve_aspect_ratio = 12;
  void clear_preserve_aspect_ratio();
  static const int kPreserveAspectRatioFieldNumber = 12;
  bool preserve_aspect_ratio() const;
  void set_preserve_aspect_ratio(bool value);

  // bool transpose = 13;
  void clear_transpose();
  static const int kTransposeFieldNumber = 13;
  bool transpose() const;
  void set_transpose(bool value);

  // bool uses_python = 15;
  void clear_uses_python();
  static const int kUsesPythonFieldNumber = 15;
  bool uses_python() const;
  void set_uses_python(bool value);

  // int32 pad_mod = 14;
  void clear_pad_mod();
  static const int kPadModFieldNumber = 14;
  ::google::protobuf::int32 pad_mod() const;
  void set_pad_mod(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:scanner.proto.NetDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_layer_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_layer_names_;
  ::google::protobuf::RepeatedField< float > mean_colors_;
  mutable int _mean_colors_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > mean_image_;
  mutable int _mean_image_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr model_path_;
  ::google::protobuf::internal::ArenaStringPtr model_weights_path_;
  ::google::protobuf::int32 input_width_;
  ::google::protobuf::int32 input_height_;
  ::google::protobuf::int32 mean_width_;
  ::google::protobuf::int32 mean_height_;
  bool normalize_;
  bool preserve_aspect_ratio_;
  bool transpose_;
  bool uses_python_;
  ::google::protobuf::int32 pad_mod_;
  mutable int _cached_size_;
  friend struct ::protobuf_scanner_2ftypes_2eproto::TableStruct;
  friend void ::protobuf_scanner_2ftypes_2eproto::InitDefaultsNetDescriptorImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frame

// int64 buffer = 1;
inline void Frame::clear_buffer() {
  buffer_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::buffer() const {
  // @@protoc_insertion_point(field_get:scanner.proto.Frame.buffer)
  return buffer_;
}
inline void Frame::set_buffer(::google::protobuf::int64 value) {
  
  buffer_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.Frame.buffer)
}

// int32 width = 2;
inline void Frame::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Frame::width() const {
  // @@protoc_insertion_point(field_get:scanner.proto.Frame.width)
  return width_;
}
inline void Frame::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.Frame.width)
}

// int32 height = 3;
inline void Frame::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Frame::height() const {
  // @@protoc_insertion_point(field_get:scanner.proto.Frame.height)
  return height_;
}
inline void Frame::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.Frame.height)
}

// -------------------------------------------------------------------

// BoundingBox

// float x1 = 1;
inline void BoundingBox::clear_x1() {
  x1_ = 0;
}
inline float BoundingBox::x1() const {
  // @@protoc_insertion_point(field_get:scanner.proto.BoundingBox.x1)
  return x1_;
}
inline void BoundingBox::set_x1(float value) {
  
  x1_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.BoundingBox.x1)
}

// float y1 = 2;
inline void BoundingBox::clear_y1() {
  y1_ = 0;
}
inline float BoundingBox::y1() const {
  // @@protoc_insertion_point(field_get:scanner.proto.BoundingBox.y1)
  return y1_;
}
inline void BoundingBox::set_y1(float value) {
  
  y1_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.BoundingBox.y1)
}

// float x2 = 3;
inline void BoundingBox::clear_x2() {
  x2_ = 0;
}
inline float BoundingBox::x2() const {
  // @@protoc_insertion_point(field_get:scanner.proto.BoundingBox.x2)
  return x2_;
}
inline void BoundingBox::set_x2(float value) {
  
  x2_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.BoundingBox.x2)
}

// float y2 = 4;
inline void BoundingBox::clear_y2() {
  y2_ = 0;
}
inline float BoundingBox::y2() const {
  // @@protoc_insertion_point(field_get:scanner.proto.BoundingBox.y2)
  return y2_;
}
inline void BoundingBox::set_y2(float value) {
  
  y2_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.BoundingBox.y2)
}

// float score = 5;
inline void BoundingBox::clear_score() {
  score_ = 0;
}
inline float BoundingBox::score() const {
  // @@protoc_insertion_point(field_get:scanner.proto.BoundingBox.score)
  return score_;
}
inline void BoundingBox::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.BoundingBox.score)
}

// int32 track_id = 6;
inline void BoundingBox::clear_track_id() {
  track_id_ = 0;
}
inline ::google::protobuf::int32 BoundingBox::track_id() const {
  // @@protoc_insertion_point(field_get:scanner.proto.BoundingBox.track_id)
  return track_id_;
}
inline void BoundingBox::set_track_id(::google::protobuf::int32 value) {
  
  track_id_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.BoundingBox.track_id)
}

// double track_score = 7;
inline void BoundingBox::clear_track_score() {
  track_score_ = 0;
}
inline double BoundingBox::track_score() const {
  // @@protoc_insertion_point(field_get:scanner.proto.BoundingBox.track_score)
  return track_score_;
}
inline void BoundingBox::set_track_score(double value) {
  
  track_score_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.BoundingBox.track_score)
}

// int32 label = 8;
inline void BoundingBox::clear_label() {
  label_ = 0;
}
inline ::google::protobuf::int32 BoundingBox::label() const {
  // @@protoc_insertion_point(field_get:scanner.proto.BoundingBox.label)
  return label_;
}
inline void BoundingBox::set_label(::google::protobuf::int32 value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.BoundingBox.label)
}

// -------------------------------------------------------------------

// Point

// float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:scanner.proto.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.Point.x)
}

// float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:scanner.proto.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.Point.y)
}

// float score = 3;
inline void Point::clear_score() {
  score_ = 0;
}
inline float Point::score() const {
  // @@protoc_insertion_point(field_get:scanner.proto.Point.score)
  return score_;
}
inline void Point::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.Point.score)
}

// -------------------------------------------------------------------

// NetDescriptor

// string model_path = 1;
inline void NetDescriptor::clear_model_path() {
  model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetDescriptor::model_path() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.model_path)
  return model_path_.GetNoArena();
}
inline void NetDescriptor::set_model_path(const ::std::string& value) {
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.model_path)
}
#if LANG_CXX11
inline void NetDescriptor::set_model_path(::std::string&& value) {
  
  model_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:scanner.proto.NetDescriptor.model_path)
}
#endif
inline void NetDescriptor::set_model_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:scanner.proto.NetDescriptor.model_path)
}
inline void NetDescriptor::set_model_path(const char* value, size_t size) {
  
  model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:scanner.proto.NetDescriptor.model_path)
}
inline ::std::string* NetDescriptor::mutable_model_path() {
  
  // @@protoc_insertion_point(field_mutable:scanner.proto.NetDescriptor.model_path)
  return model_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetDescriptor::release_model_path() {
  // @@protoc_insertion_point(field_release:scanner.proto.NetDescriptor.model_path)
  
  return model_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetDescriptor::set_allocated_model_path(::std::string* model_path) {
  if (model_path != NULL) {
    
  } else {
    
  }
  model_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_path);
  // @@protoc_insertion_point(field_set_allocated:scanner.proto.NetDescriptor.model_path)
}

// string model_weights_path = 2;
inline void NetDescriptor::clear_model_weights_path() {
  model_weights_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetDescriptor::model_weights_path() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.model_weights_path)
  return model_weights_path_.GetNoArena();
}
inline void NetDescriptor::set_model_weights_path(const ::std::string& value) {
  
  model_weights_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.model_weights_path)
}
#if LANG_CXX11
inline void NetDescriptor::set_model_weights_path(::std::string&& value) {
  
  model_weights_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:scanner.proto.NetDescriptor.model_weights_path)
}
#endif
inline void NetDescriptor::set_model_weights_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_weights_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:scanner.proto.NetDescriptor.model_weights_path)
}
inline void NetDescriptor::set_model_weights_path(const char* value, size_t size) {
  
  model_weights_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:scanner.proto.NetDescriptor.model_weights_path)
}
inline ::std::string* NetDescriptor::mutable_model_weights_path() {
  
  // @@protoc_insertion_point(field_mutable:scanner.proto.NetDescriptor.model_weights_path)
  return model_weights_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetDescriptor::release_model_weights_path() {
  // @@protoc_insertion_point(field_release:scanner.proto.NetDescriptor.model_weights_path)
  
  return model_weights_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetDescriptor::set_allocated_model_weights_path(::std::string* model_weights_path) {
  if (model_weights_path != NULL) {
    
  } else {
    
  }
  model_weights_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_weights_path);
  // @@protoc_insertion_point(field_set_allocated:scanner.proto.NetDescriptor.model_weights_path)
}

// repeated string input_layer_names = 3;
inline int NetDescriptor::input_layer_names_size() const {
  return input_layer_names_.size();
}
inline void NetDescriptor::clear_input_layer_names() {
  input_layer_names_.Clear();
}
inline const ::std::string& NetDescriptor::input_layer_names(int index) const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.input_layer_names)
  return input_layer_names_.Get(index);
}
inline ::std::string* NetDescriptor::mutable_input_layer_names(int index) {
  // @@protoc_insertion_point(field_mutable:scanner.proto.NetDescriptor.input_layer_names)
  return input_layer_names_.Mutable(index);
}
inline void NetDescriptor::set_input_layer_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.input_layer_names)
  input_layer_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetDescriptor::set_input_layer_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.input_layer_names)
  input_layer_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetDescriptor::set_input_layer_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_layer_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:scanner.proto.NetDescriptor.input_layer_names)
}
inline void NetDescriptor::set_input_layer_names(int index, const char* value, size_t size) {
  input_layer_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scanner.proto.NetDescriptor.input_layer_names)
}
inline ::std::string* NetDescriptor::add_input_layer_names() {
  // @@protoc_insertion_point(field_add_mutable:scanner.proto.NetDescriptor.input_layer_names)
  return input_layer_names_.Add();
}
inline void NetDescriptor::add_input_layer_names(const ::std::string& value) {
  input_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:scanner.proto.NetDescriptor.input_layer_names)
}
#if LANG_CXX11
inline void NetDescriptor::add_input_layer_names(::std::string&& value) {
  input_layer_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:scanner.proto.NetDescriptor.input_layer_names)
}
#endif
inline void NetDescriptor::add_input_layer_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:scanner.proto.NetDescriptor.input_layer_names)
}
inline void NetDescriptor::add_input_layer_names(const char* value, size_t size) {
  input_layer_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:scanner.proto.NetDescriptor.input_layer_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetDescriptor::input_layer_names() const {
  // @@protoc_insertion_point(field_list:scanner.proto.NetDescriptor.input_layer_names)
  return input_layer_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetDescriptor::mutable_input_layer_names() {
  // @@protoc_insertion_point(field_mutable_list:scanner.proto.NetDescriptor.input_layer_names)
  return &input_layer_names_;
}

// repeated string output_layer_names = 4;
inline int NetDescriptor::output_layer_names_size() const {
  return output_layer_names_.size();
}
inline void NetDescriptor::clear_output_layer_names() {
  output_layer_names_.Clear();
}
inline const ::std::string& NetDescriptor::output_layer_names(int index) const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.output_layer_names)
  return output_layer_names_.Get(index);
}
inline ::std::string* NetDescriptor::mutable_output_layer_names(int index) {
  // @@protoc_insertion_point(field_mutable:scanner.proto.NetDescriptor.output_layer_names)
  return output_layer_names_.Mutable(index);
}
inline void NetDescriptor::set_output_layer_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.output_layer_names)
  output_layer_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetDescriptor::set_output_layer_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.output_layer_names)
  output_layer_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetDescriptor::set_output_layer_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_layer_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:scanner.proto.NetDescriptor.output_layer_names)
}
inline void NetDescriptor::set_output_layer_names(int index, const char* value, size_t size) {
  output_layer_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:scanner.proto.NetDescriptor.output_layer_names)
}
inline ::std::string* NetDescriptor::add_output_layer_names() {
  // @@protoc_insertion_point(field_add_mutable:scanner.proto.NetDescriptor.output_layer_names)
  return output_layer_names_.Add();
}
inline void NetDescriptor::add_output_layer_names(const ::std::string& value) {
  output_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:scanner.proto.NetDescriptor.output_layer_names)
}
#if LANG_CXX11
inline void NetDescriptor::add_output_layer_names(::std::string&& value) {
  output_layer_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:scanner.proto.NetDescriptor.output_layer_names)
}
#endif
inline void NetDescriptor::add_output_layer_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_layer_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:scanner.proto.NetDescriptor.output_layer_names)
}
inline void NetDescriptor::add_output_layer_names(const char* value, size_t size) {
  output_layer_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:scanner.proto.NetDescriptor.output_layer_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetDescriptor::output_layer_names() const {
  // @@protoc_insertion_point(field_list:scanner.proto.NetDescriptor.output_layer_names)
  return output_layer_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetDescriptor::mutable_output_layer_names() {
  // @@protoc_insertion_point(field_mutable_list:scanner.proto.NetDescriptor.output_layer_names)
  return &output_layer_names_;
}

// int32 input_width = 5;
inline void NetDescriptor::clear_input_width() {
  input_width_ = 0;
}
inline ::google::protobuf::int32 NetDescriptor::input_width() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.input_width)
  return input_width_;
}
inline void NetDescriptor::set_input_width(::google::protobuf::int32 value) {
  
  input_width_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.input_width)
}

// int32 input_height = 6;
inline void NetDescriptor::clear_input_height() {
  input_height_ = 0;
}
inline ::google::protobuf::int32 NetDescriptor::input_height() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.input_height)
  return input_height_;
}
inline void NetDescriptor::set_input_height(::google::protobuf::int32 value) {
  
  input_height_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.input_height)
}

// repeated float mean_colors = 7;
inline int NetDescriptor::mean_colors_size() const {
  return mean_colors_.size();
}
inline void NetDescriptor::clear_mean_colors() {
  mean_colors_.Clear();
}
inline float NetDescriptor::mean_colors(int index) const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.mean_colors)
  return mean_colors_.Get(index);
}
inline void NetDescriptor::set_mean_colors(int index, float value) {
  mean_colors_.Set(index, value);
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.mean_colors)
}
inline void NetDescriptor::add_mean_colors(float value) {
  mean_colors_.Add(value);
  // @@protoc_insertion_point(field_add:scanner.proto.NetDescriptor.mean_colors)
}
inline const ::google::protobuf::RepeatedField< float >&
NetDescriptor::mean_colors() const {
  // @@protoc_insertion_point(field_list:scanner.proto.NetDescriptor.mean_colors)
  return mean_colors_;
}
inline ::google::protobuf::RepeatedField< float >*
NetDescriptor::mutable_mean_colors() {
  // @@protoc_insertion_point(field_mutable_list:scanner.proto.NetDescriptor.mean_colors)
  return &mean_colors_;
}

// repeated float mean_image = 8;
inline int NetDescriptor::mean_image_size() const {
  return mean_image_.size();
}
inline void NetDescriptor::clear_mean_image() {
  mean_image_.Clear();
}
inline float NetDescriptor::mean_image(int index) const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.mean_image)
  return mean_image_.Get(index);
}
inline void NetDescriptor::set_mean_image(int index, float value) {
  mean_image_.Set(index, value);
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.mean_image)
}
inline void NetDescriptor::add_mean_image(float value) {
  mean_image_.Add(value);
  // @@protoc_insertion_point(field_add:scanner.proto.NetDescriptor.mean_image)
}
inline const ::google::protobuf::RepeatedField< float >&
NetDescriptor::mean_image() const {
  // @@protoc_insertion_point(field_list:scanner.proto.NetDescriptor.mean_image)
  return mean_image_;
}
inline ::google::protobuf::RepeatedField< float >*
NetDescriptor::mutable_mean_image() {
  // @@protoc_insertion_point(field_mutable_list:scanner.proto.NetDescriptor.mean_image)
  return &mean_image_;
}

// int32 mean_width = 9;
inline void NetDescriptor::clear_mean_width() {
  mean_width_ = 0;
}
inline ::google::protobuf::int32 NetDescriptor::mean_width() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.mean_width)
  return mean_width_;
}
inline void NetDescriptor::set_mean_width(::google::protobuf::int32 value) {
  
  mean_width_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.mean_width)
}

// int32 mean_height = 10;
inline void NetDescriptor::clear_mean_height() {
  mean_height_ = 0;
}
inline ::google::protobuf::int32 NetDescriptor::mean_height() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.mean_height)
  return mean_height_;
}
inline void NetDescriptor::set_mean_height(::google::protobuf::int32 value) {
  
  mean_height_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.mean_height)
}

// bool normalize = 11;
inline void NetDescriptor::clear_normalize() {
  normalize_ = false;
}
inline bool NetDescriptor::normalize() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.normalize)
  return normalize_;
}
inline void NetDescriptor::set_normalize(bool value) {
  
  normalize_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.normalize)
}

// bool preserve_aspect_ratio = 12;
inline void NetDescriptor::clear_preserve_aspect_ratio() {
  preserve_aspect_ratio_ = false;
}
inline bool NetDescriptor::preserve_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.preserve_aspect_ratio)
  return preserve_aspect_ratio_;
}
inline void NetDescriptor::set_preserve_aspect_ratio(bool value) {
  
  preserve_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.preserve_aspect_ratio)
}

// bool transpose = 13;
inline void NetDescriptor::clear_transpose() {
  transpose_ = false;
}
inline bool NetDescriptor::transpose() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.transpose)
  return transpose_;
}
inline void NetDescriptor::set_transpose(bool value) {
  
  transpose_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.transpose)
}

// int32 pad_mod = 14;
inline void NetDescriptor::clear_pad_mod() {
  pad_mod_ = 0;
}
inline ::google::protobuf::int32 NetDescriptor::pad_mod() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.pad_mod)
  return pad_mod_;
}
inline void NetDescriptor::set_pad_mod(::google::protobuf::int32 value) {
  
  pad_mod_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.pad_mod)
}

// bool uses_python = 15;
inline void NetDescriptor::clear_uses_python() {
  uses_python_ = false;
}
inline bool NetDescriptor::uses_python() const {
  // @@protoc_insertion_point(field_get:scanner.proto.NetDescriptor.uses_python)
  return uses_python_;
}
inline void NetDescriptor::set_uses_python(bool value) {
  
  uses_python_ = value;
  // @@protoc_insertion_point(field_set:scanner.proto.NetDescriptor.uses_python)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace scanner

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_scanner_2ftypes_2eproto__INCLUDED
