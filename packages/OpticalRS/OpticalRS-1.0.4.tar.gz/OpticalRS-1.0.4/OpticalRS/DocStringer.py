# -*- coding: utf-8 -*-
"""
DocStringer
===========

I'm trying to bang something together that'll process my numpydoc docstrings
into some markdown that I can use in my documentation. It's probably going to
take way longer than I currently think it's going to.
"""

from re import sub
from inspect import getmembers, getmodule, isclass, ismethod, isfunction
import pypandoc
import OpticalRS

outfile = 'modules.md'

modules = ['AlbedoIndex','ArrayUtils','DepthEstimator','KNNDepth','LandMasking',
           'Lyzenga1978','Lyzenga1981','Lyzenga2006','MSDisplay','MSExposure',
           'RasterDS','RasterSubset','Sagawa2010','WV2RadiometricCorrection']

def first_paragraph(dstr):
    """
    Try to get just the first paragraph of a numpydoc docstring. I'm going to
    make some assumptions about how the docstring is formatted to make this
    easy. I'll assume there's a docstring heading with 2 newlines after it and
    that there are another 2 newlines after the first paragraph.
    """
    return dstr.split('\n\n')[1].replace('\n',' ')

def no_heading(dstr):
    """
    Try to get just the first paragraph of a numpydoc docstring. I'm going to
    make some assumptions about how the docstring is formatted to make this
    easy. I'll assume there's a docstring heading with 2 newlines after it and
    that there are another 2 newlines after the first paragraph.
    """
    the_rest = dstr.split('\n\n')[1:]
    return "\n\n".join([s.replace("\n"," ") for s in the_rest]) + "\n"

def to_md(rststr):
    """
    Try to convert rst docstring to markdown using `pypandoc`.
    """
    return pypandoc.convert(rststr,'markdown',format='rst')

def to_md_noheading(rststr):
    """
    Try to convert rst docstring to markdown using `pypandoc`. Ignore '-----'
    headings.
    """
    rststr = sub("^-{3,}\n","",rststr)
    return pypandoc.convert(rststr,'markdown',format='rst')

with open(outfile, "w") as outf:
    # Make the page header and description
    outf.write("# OpticalRS Modules\n\n")
    mod_descr = "OpticalRS methods are organized into various modules. When \
                appropriate, modules are named after the journal paper from \
                which they were derived. The following details were \
                autogenerated from the first paragraph of the module \
                docstrings. For full details, look at the docstrings on \
                [GitHub](https://github.com/jkibele/OpticalRS/) or the \
                the installed code."
    # split/join to remove excess space
    outf.write("{}\n\n".format(" ".join(mod_descr.split())))

    # Build a table of modules with the first paragraph of docstring as descrip
    outf.write("Module | Description\n--|--\n")
    for m in modules:
        # Have to use getmodule or else RasterDS returns the RasterDS method
        # instead of the module.
        themod = getmodule(getattr(OpticalRS,m))
        modname = themod.__name__.split('.')[-1]

        dstr = themod.__doc__
        first_p = to_md(first_paragraph(dstr)).replace('\n',' ')
        outf.write("{0} | <sup>{1}</sup> \n".format(modname,first_p))

    # Do the list of methods
#    outf.write("\n# OpticalRS Classes, Methods, and Functions\n\n")
#    outf.write("The following is the whole list of OpticalRS methods autogenerated from docstrings.\n\n")
#    for m in modules:
#        themod = getmodule(getattr(OpticalRS,m))
#        modname = themod.__name__.split('.')[-1]
#        outf.write("## {}\n\n".format(modname))
#        outf.write(no_heading(themod.__doc__))
#        # classes?
#        classdict = dict([x for x in getmembers(themod,isclass)])
#        for cname, theclass in classdict.iteritems():
#            outf.write("### {}\n".format(cname))
#            outf.write("{}\n\n".format(theclass.__doc__))
#            methoddict = dict([x for x in getmembers(theclass,ismethod)])
#            for mname, themeth in methoddict.iteritems():
#                outf.write("#### {}\n".format(mname))
#                outf.write("{}\n\n".format(themeth.__doc__))
#        # functions?
#        funcdict = dict([x for x in getmembers(themod,isfunction)])
#        for fname, thefunc in funcdict.iteritems():
#            outf.write("### {}\n".format(fname))
#            outf.write("{}\n\n".format(thefunc.__doc__))
