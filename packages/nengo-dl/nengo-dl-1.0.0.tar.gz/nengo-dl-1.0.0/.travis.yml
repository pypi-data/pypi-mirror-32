language: python
notifications:
  email:
    on_success: change
    on_failure: change

sudo: required
dist: trusty

env:
  global:
    - MODE="test"
    - PYTHON_VERSION="3.5"
    - NENGO_DL_TEST_PRECISION="32"
    - NENGO_DL_TEST_UNROLL="1"
    - NUMPY_VERSION="numpy"
    - TF_VERSION="tensorflow"
    - NENGO_VERSION="nengo"

  matrix:
    - MODE="pep8"
    - MODE="docs"
    - # default build
    - MODE="coverage"
    - MODE="coverage"
      PYTHON_VERSION="2.7"
      NENGO_VERSION="git+https://github.com/nengo/nengo.git"
      TF_VERSION="tensorflow==1.3.0"
    - MODE="examples"
    - NENGO_DL_TEST_PRECISION="64"
    - NENGO_DL_TEST_UNROLL="5"
    - NUMPY_VERSION="numpy==1.11.0"
      TF_VERSION="tensorflow==1.3.0"
      NENGO_VERSION="nengo==2.7.0"
    - TF_VERSION="tensorflow --pre"
      NENGO_VERSION="git+https://github.com/nengo/nengo.git"
    - PYTHON_VERSION="2.7"
    - PYTHON_VERSION="3.4"
    - PYTHON_VERSION="3.6"

#matrix:
#  include:
#    - dist: xenial # gives us a more up-to-date glibc (required by tensorflow)
#      env: TF_VERSION="tf-nightly" NENGO_VERSION="git+https://github.com/nengo/nengo.git"

# TODO: separate out into scripts

# set up miniconda
before_install:
  - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a

# install python requirements
install:
  - conda create -q -n test python=$PYTHON_VERSION pip $NUMPY_VERSION
  - source activate test
  - pip install $TF_VERSION
  - pip install $NENGO_VERSION
  - if [[ "$MODE" == "docs" || "$MODE" == "examples" ]]; then
      pip install -e .[docs,tests];
      conda install pandoc;
    else
      pip install -e .[tests];
    fi
  - conda list -e
  - pip freeze

# set up xvfb so we can test examples with matplotlib
before_script:
  - if [[ "$MODE" == "examples" ]]; then
      export DISPLAY=:99.0;
      sh -e /etc/init.d/xvfb start;
      sleep 3;
    fi

# run the main script
script:
  - if [[ "$MODE" == "pep8" ]]; then
      codespell -q 3 && flake8;
    elif [[ "$MODE" == "docs" ]]; then
      export LATEST_TAG="$(git describe --abbrev=0 --tags)";
      sphinx-build -b linkcheck docs docs/_build -W -D nbsphinx_execute=never &&
      sphinx-build -b html docs docs/_build -vW -A current_branch=$TRAVIS_BRANCH -A latest_release=$LATEST_TAG -A building_version=$TRAVIS_BRANCH &&
      git checkout $LATEST_TAG &&
      sphinx-build -b html docs docs/_build/$LATEST_TAG -vW -A current_branch=$TRAVIS_BRANCH -A latest_release=$LATEST_TAG -A building_version=$LATEST_TAG &&
      git checkout $TRAVIS_BRANCH;
    elif [[ "$MODE" == "coverage" ]]; then
      coverage run -m pytest --pyargs nengo;
      coverage run -a -m pytest nengo_dl;
      coverage report -m;
    elif [[ "$MODE" == "examples" ]]; then
      python docs/whitepaper/whitepaper2018_code.py > /dev/null &&
      pytest -v --durations 20 --nbval-lax docs/examples;
    else
      pytest -n 2 --pyargs nengo && pytest -n 2 --durations 20 nengo_dl;
    fi

# upload results
after_success:
  - if [[ "$MODE" == "docs" && "$TRAVIS_BRANCH" == "master" ]]; then
      export DATE=$(date '+%Y-%m-%d %T');
      git config --global user.email "travis@travis-ci.org";
      git config --global user.name "TravisCI";
      ghp-import -m "Last update at $DATE" -b gh-pages docs/_build &&
      git push -fq "https://$GH_TOKEN@github.com/nengo/nengo-dl.git" gh-pages;
    elif [[ "$MODE" == "coverage" ]]; then
      eval "bash <(curl -s https://codecov.io/bash)";
    fi
